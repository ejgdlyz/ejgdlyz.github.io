<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实战案例</title>
      <link href="/2019/12/12/%E5%AE%9E%E6%88%98/"/>
      <url>/2019/12/12/%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h5 id="实战1：图片爬取"><a href="#实战1：图片爬取" class="headerlink" title="实战1：图片爬取"></a>实战1：图片爬取</h5><p>网站：<a href="https://www.mzitu.com/mm" target="_blank" rel="noopener">https://www.mzitu.com/mm</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'https://www.mzitu.com/mm/page/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(url)</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>    <span class="token punctuation">}</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>text    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> None<span class="token keyword">def</span> <span class="token function">parse_inpage</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    img <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.main .content .main-image img'</span><span class="token punctuation">)</span>    url<span class="token operator">=</span>img<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token keyword">def</span> <span class="token function">get_inpage</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span>item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span>    title<span class="token operator">=</span>item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(url)</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.mzitu.com'</span><span class="token punctuation">,</span>        <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#解析内部网页10页图片url</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>            in_url<span class="token operator">=</span>parse_inpage<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            img_name<span class="token operator">=</span>str<span class="token punctuation">(</span>in_url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span><span class="token punctuation">{</span>                <span class="token string">'image'</span><span class="token punctuation">:</span>in_url<span class="token punctuation">,</span>                <span class="token string">'img_name'</span><span class="token punctuation">:</span>img_name<span class="token punctuation">,</span>                <span class="token string">'title'</span><span class="token punctuation">:</span>title            <span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">page_parese</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>html<span class="token operator">!=</span>None<span class="token punctuation">)</span> <span class="token punctuation">:</span>        doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doc <span class="token operator">!=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            items<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.main .main-content .postlist ul li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>                image<span class="token operator">=</span>item<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>                title<span class="token operator">=</span>item<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'alt'</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span><span class="token punctuation">{</span>                    <span class="token string">'image'</span><span class="token punctuation">:</span>image<span class="token punctuation">,</span>                    <span class="token string">'title'</span><span class="token punctuation">:</span>title                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">#保存图片</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">save_images</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'img/'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'img/'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.mzitu.com'</span><span class="token punctuation">,</span>            <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>        <span class="token punctuation">}</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">:</span>            file_path<span class="token operator">=</span><span class="token string">'img/{0}/{1}.{2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'img_name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'jpg'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(file_path)</span>            <span class="token comment" spellcheck="true"># print(response.content)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Already Downloaded'</span><span class="token punctuation">,</span>file_path<span class="token punctuation">)</span>    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>args<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Filed to save images'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    html<span class="token operator">=</span>get_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> page_parese<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#item就是page_parse()函数返回的字典,返回一页的字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#得到30页的分组图片链接</span>        <span class="token keyword">for</span> innerpage <span class="token keyword">in</span> get_inpage<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#每组每张图片的字典</span>            save_images<span class="token punctuation">(</span>innerpage<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>innerpage<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>starting<span class="token operator">=</span><span class="token number">1</span>ending<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>pool <span class="token keyword">import</span> Pool<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool<span class="token operator">=</span>Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    groups<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>starting<span class="token punctuation">,</span>ending<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>main<span class="token punctuation">,</span>groups<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># for i in range(1,21):</span>    <span class="token comment" spellcheck="true">#     main(i)</span></code></pre><h5 id="实战2-微博动态获取"><a href="#实战2-微博动态获取" class="headerlink" title="实战2.微博动态获取"></a>实战2.微博动态获取</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#XXX为微博号</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token keyword">import</span> requestsbase_url<span class="token operator">=</span><span class="token string">'https://m.weibo.cn/api/container/getIndex?'</span><span class="token comment" spellcheck="true">#url请求的前半部分</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'m.weibo.cn'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://m.weibo.cn/u/XXX'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    params<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'uid'</span><span class="token punctuation">,</span>        <span class="token string">'values'</span><span class="token punctuation">:</span> <span class="token string">'XXX'</span><span class="token punctuation">,</span>        <span class="token string">'containerid'</span><span class="token punctuation">:</span> <span class="token string">'107603XXX'</span><span class="token punctuation">,</span>        <span class="token string">'page'</span><span class="token punctuation">:</span> page    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 构造参数字典，其中type,values,containerid为固定值，page为可变参数</span>    url<span class="token operator">=</span>base_url<span class="token operator">+</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># urlencode()方法将参数转化为url的GET请求参数。</span>    <span class="token comment" spellcheck="true"># 即类似 type=uid&amp;value=2830678474&amp;containerid=1076032830678474&amp;page=2</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义解析方法</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> json<span class="token punctuation">:</span>        cards<span class="token operator">=</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cards'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> card <span class="token keyword">in</span> cards<span class="token punctuation">:</span>            card<span class="token operator">=</span>card<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mblog'</span><span class="token punctuation">)</span>            weibo<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            weibo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token operator">=</span>card<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>            weibo<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token operator">=</span>pq<span class="token punctuation">(</span>card<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            weibo<span class="token punctuation">[</span><span class="token string">'attitudes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> card<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'attitudes_count'</span><span class="token punctuation">)</span>            weibo<span class="token punctuation">[</span><span class="token string">'comments'</span><span class="token punctuation">]</span> <span class="token operator">=</span> card<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'comments_count'</span><span class="token punctuation">)</span>            weibo<span class="token punctuation">[</span><span class="token string">'reposts'</span><span class="token punctuation">]</span> <span class="token operator">=</span> card<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'reposts_count'</span><span class="token punctuation">)</span>            <span class="token keyword">yield</span> weibo<span class="token comment" spellcheck="true">#将结果写入MongoDB数据库</span><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClientclient <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'weibo'</span><span class="token punctuation">]</span>collection <span class="token operator">=</span> db<span class="token punctuation">[</span><span class="token string">'weibo'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">save_to_mongo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> collection<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'saved to mongodb'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        json<span class="token operator">=</span>get_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(json.get('data').get('cards')[0].get('mblog')['comments_count'])</span>        <span class="token comment" spellcheck="true"># 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values</span>        results<span class="token operator">=</span>parse_page<span class="token punctuation">(</span>json<span class="token punctuation">)</span>        <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            save_to_mongo<span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ajax数据爬取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests pyquery os multiprocessing python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/2019/12/10/mongodb/"/>
      <url>/2019/12/10/mongodb/</url>
      
        <content type="html"><![CDATA[<h4 id="MongoDB存储"><a href="#MongoDB存储" class="headerlink" title="MongoDB存储"></a>MongoDB存储</h4><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统。其内容存储形式类似JSON对象，它的字段可以包含其他文档，数组，文档数组。</p><h5 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h5><p>安装MongoDB，并启动服务。</p><p>安装PyMongo库。</p><h5 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h5><h6 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymongoclient<span class="token operator">=</span>pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#client=pymongo.MongoClient('mongodb://localhost:27017')#或者直接传入字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span></code></pre><h6 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#指定MongoDB的test数据库</span>db<span class="token operator">=</span>client<span class="token punctuation">.</span>test<span class="token comment" spellcheck="true">#db=client['test']</span></code></pre><h6 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h6><p>Mongo的数据库包含了很多集合(collection)，类似于关系型数据库中的表。</p><pre class=" language-python"><code class="language-python">collection<span class="token operator">=</span>db<span class="token punctuation">.</span>students<span class="token comment" spellcheck="true">#collection=db['students']</span></code></pre><h5 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3.插入数据"></a>3.插入数据</h5><pre class=" language-python"><code class="language-python">student<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'10023'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span>res<span class="token operator">=</span>collection<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行输出:5def8e96c4203d31b90ea4ea'''</span></code></pre><p>MongoDB中，每条数据都有一个_id属性来唯一标识。没有显示指明该属性，由MongoDB默认生成一个ObjectId类型的 _id属性。调用insert()方法后返回该属性。</p><p>若以列表的形式插入</p><pre class=" language-python"><code class="language-python">stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'10024'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mary'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'10025'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">]</span>res<span class="token operator">=</span>collection<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[ObjectId('5def901e729d50c3021e1226'), ObjectId('5def901e729d50c3021e1227')]'''</span></code></pre><p>python3.x版本中，也可以使用insert_one()和insert_many()方法来实现插入单条记录和多条记录，<strong>官方推荐。</strong></p><pre class=" language-python"><code class="language-python">res1<span class="token operator">=</span>collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>student<span class="token punctuation">)</span>res2<span class="token operator">=</span>collection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>inserted_id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span>inserted_ids<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''&lt;pymongo.results.InsertOneResult object at 0x000001B44BA42F88>5def91cc6ecbe6fd31a1968e&lt;pymongo.results.InsertManyResult object at 0x000001B44BA42C08>[ObjectId('5def91cc6ecbe6fd31a1968f'), ObjectId('5def91cc6ecbe6fd31a19690')]'''</span></code></pre><h5 id="4-查询"><a href="#4-查询" class="headerlink" title="4.查询"></a>4.查询</h5><p>find_one()和find()方法进行查询。find_one()是单个结果，find()返回的是生成器对象。</p><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span>collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Mike'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{'_id': ObjectId('5def901e729d50c3021e1227'), 'id': '10025', 'name': 'Mike', 'age': 25}&lt;class 'dict'>'''</span></code></pre><p>find（）方法。查找年龄为20的数据</p><pre class=" language-python"><code class="language-python">results <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token keyword">for</span> res <span class="token keyword">in</span> results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>查找年龄&gt;20的数据。</p><pre class=" language-python"><code class="language-python">results<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">for</span> res <span class="token keyword">in</span> results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>比较符号</p><p>$lt 小于，$gt 大于，$lte 小于等于,$gte 大于等于,$ne 不等于,$in 在范围内 ,$nin 不在范围内。</p><p>results=collection.find({‘name’: {‘$regex’: ‘^M.*’}}),$regex来指定正则匹配，查询以M开头的正则表达式。</p><p>功能符号</p><p>$regex ————正则表达式    ——————— {‘name’: {‘$regex’: ‘^M.*’}}</p><p>$exists ————属性是否存在  ———— ——{‘$name’: { ‘$exists’: True}}  name属性是否存在。 </p><p>$type ————  类型判断   ————————{‘age’: {‘$type’: ‘int’}} age的类型为int</p><p>$mod ————  数字模操作———————{‘age’: {‘$mod’: [5,0]}} age取模余数为0</p><p>$text ————   文本查询————————{‘$text’: {‘$serach’: ‘Mike’}} text类型的属性中包含Mike字符串</p><p>$where ————高级查询————————{‘$where’: ‘age==20’} age为20</p><h5 id="5-计数与排序"><a href="#5-计数与排序" class="headerlink" title="5.计数与排序"></a>5.计数与排序</h5><ul><li><p>计数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># cnt=collection.find().count()</span>cnt<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'$lte'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span></code></pre></li><li><p>排序</p><pre class=" language-python"><code class="language-python">results<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#按name升序,降序为pymongo.DESCENDING</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''['Mary', 'Mary', 'Mary', 'Mary', 'Mary', 'Mike', 'Mike', 'Mike', 'Mike', 'Mike', 'QQ', 'Tom', 'Tom', 'Tom', 'Tom', 'Tom', 'Wed']'''</span></code></pre></li></ul><h5 id="6-偏移"><a href="#6-偏移" class="headerlink" title="6.偏移"></a>6.偏移</h5><p>利用skip()方法偏移取的元素，比如偏移两个2，就忽略前两个元素，得到第三个以后的元素。</p><pre class=" language-python"><code class="language-python">results<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> res <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''['Mary', 'Mary', 'Mary', 'Mike', 'Mike', 'Mike', 'Mike', 'Mike', 'QQ', 'Tom', 'Tom', 'Tom', 'Tom', 'Tom', 'Wed']'''</span></code></pre><p>或者使用limit()方法指定要取的个数。</p><pre class=" language-python"><code class="language-python">results<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> res <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''['Mary', 'Mary']'''</span></code></pre><p>当数据量非常大的时候，使用偏移量容易内存溢出。可以保留上次的 _id，在通过 _id的进行取数据。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdid1<span class="token operator">=</span>collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id1<span class="token punctuation">)</span>results<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'_id'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span>id1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> res <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''5def8e96c4203d31b90ea4ea['Mary', 'Mike', 'Tom', 'Mary', 'Mike', 'Tom', 'Mary', 'Mike', 'Tom', 'Mary', 'Mike', 'Tom', 'Mary', 'Mike', 'QQ', 'Wed']'''</span></code></pre><h5 id="7-更新"><a href="#7-更新" class="headerlink" title="7.更新"></a>7.更新</h5><pre class=" language-python"><code class="language-python">condition<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mary'</span><span class="token punctuation">}</span>student<span class="token operator">=</span>collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">25</span><span class="token comment" spellcheck="true">#result=collection.update(condition,student)</span><span class="token comment" spellcheck="true">#不使用set会将匹配的数据库的数据全部用student替换，如果原先存在其他字段会被删除</span>result<span class="token operator">=</span>collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'$set'</span><span class="token punctuation">:</span> student<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{'n': 1, 'nModified': 0, 'ok': 1.0, 'updatedExisting': True}'''</span></code></pre><p>或者,官方推荐使用<strong>update_one()</strong>和<strong>update_many()</strong>方法。它们的第二个参数需要使用$操作符作为字典的键名。</p><pre class=" language-python"><code class="language-python">condition<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mary'</span><span class="token punctuation">}</span>student<span class="token operator">=</span>collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">26</span>result<span class="token operator">=</span>collection<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span>condition<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'$set'</span><span class="token punctuation">:</span> student<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#update_once返回的结果是UpdateResult类型</span><span class="token comment" spellcheck="true">#set操作符可以只更新student字典内存在的字段，如果原先还有其他字段，则不变。</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>matched_count<span class="token punctuation">,</span>result<span class="token punctuation">.</span>modified_count<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#分别获得匹配的数据条数和影响的数据条数</span><span class="token triple-quoted-string string">'''1 1'''</span></code></pre><p>改变更新条件</p><pre class=" language-python"><code class="language-python">condition<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span>result<span class="token operator">=</span>collection<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span>condition<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'$inc'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查询年龄>20记录，更新条件为{'$inc': {'age': 1}}，将这条记录的年龄加 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>matched_count<span class="token punctuation">,</span>result<span class="token punctuation">.</span>modified_count<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1 1&lt;class 'pymongo.results.UpdateResult'>'''</span></code></pre><p>update_many()方法</p><pre class=" language-python"><code class="language-python">condition<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span>result<span class="token operator">=</span>collection<span class="token punctuation">.</span>update_many<span class="token punctuation">(</span>condition<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'$inc'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>matched_count<span class="token punctuation">,</span>result<span class="token punctuation">.</span>modified_count<span class="token punctuation">)</span></code></pre><h5 id="8-删除"><a href="#8-删除" class="headerlink" title="8.删除"></a>8.删除</h5><p>直接调用remove()方法即可进行删除。</p><pre class=" language-python"><code class="language-python">condition<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mary'</span><span class="token punctuation">}</span>result<span class="token operator">=</span>collection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#此时符合条件的所有数据均会被删除</span><span class="token triple-quoted-string string">'''{'n': 5, 'ok': 1.0}'''</span></code></pre><p>新的推荐方法 delete_one()和delete_many()</p><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> res<span class="token punctuation">]</span><span class="token punctuation">)</span>condition<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">}</span>result<span class="token operator">=</span>collection<span class="token punctuation">.</span>delete_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>deleted_count<span class="token punctuation">)</span>result<span class="token operator">=</span>collection<span class="token punctuation">.</span>delete_many<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'$lt'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>deleted_count<span class="token punctuation">)</span>res<span class="token operator">=</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> res<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''['Mike', 'Mike', 'Tom', 'Mike', 'Tom', 'Mike', 'Tom', 'Mike']&lt;pymongo.results.DeleteResult object at 0x000002B1B1FA1F08>10['Mike', 'Mike', 'Mike', 'Tom', 'Mike', 'Tom', 'Mike']'''</span></code></pre><h5 id="9-其他方法"><a href="#9-其他方法" class="headerlink" title="9.其他方法"></a>9.其他方法</h5><p>PyMongoDB提供了一些组合方法，如find_one_and_detele(),find_one_and_replace(),find_one_and_update(),</p><p>它们是查找后删除，替换和更新的操作。</p><p>对索引进行操作，create_index()，create_indexs()和drop_index()等。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫,数据存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyMongo python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关系型数据库存储</title>
      <link href="/2019/12/08/mysql/"/>
      <url>/2019/12/08/mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="关系型数据库存储"><a href="#关系型数据库存储" class="headerlink" title="关系型数据库存储"></a>关系型数据库存储</h4><h5 id="mysql的存储"><a href="#mysql的存储" class="headerlink" title="mysql的存储"></a>mysql的存储</h5><ul><li><p>准备</p><p>安装pymysql库。</p><p>安装mysql并运行。</p></li></ul><h5 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过pymysql的connect()方法声明一个mysql的连接对象db,传入mysql的运行ip，用户，密码,端口</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用cursor()方法过的mysql的操作游标，利用游标来执行sql语句</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select version()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查询版本号</span>data<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Data version:'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"create database spiders "</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建spiders数据库</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Data version: ('5.5.53',)&lt;class 'tuple'>'''</span></code></pre><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql<span class="token operator">=</span><span class="token string">'create table stu(id varchar(20) primary key,name varchar(20) not null,age int not null)'</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>row<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></code></pre><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>id<span class="token operator">=</span><span class="token string">'1002'</span>name<span class="token operator">=</span><span class="token string">'Tom'</span>age<span class="token operator">=</span><span class="token number">23</span>sql<span class="token operator">=</span><span class="token string">'insert into stu values(%s,%s,%s)'</span><span class="token comment" spellcheck="true">#字符串拼接过于繁琐，使用格式化字符%s来实现，有几个value写几个%s</span><span class="token comment" spellcheck="true">#标准写法</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#values的值用统一的元组传入</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#执行db对象的commit()实现插入，这个方法才是将sql语句提交到数据库执行的方法</span><span class="token keyword">except</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="动态构造SQL插入"><a href="#动态构造SQL插入" class="headerlink" title="动态构造SQL插入"></a><strong>动态构造SQL插入</strong></h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'1005'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Mike'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>table<span class="token operator">=</span><span class="token string">'stu'</span>keys<span class="token operator">=</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将字典类型的数据转为以,分隔的字符串---id,name,age</span><span class="token comment" spellcheck="true"># print(keys)# id,name,age</span>values<span class="token operator">=</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#构造占位符，有几个字段就构造几个占位符，首先定义长度为1的数组['%s']，然后扩充，join()对其进行格式化为以,分隔的字符串</span><span class="token comment" spellcheck="true">#print(values)  # %s,%s,%s</span>sql<span class="token operator">=</span><span class="token string">'insert into {table}({keys}) values({values})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span>keys<span class="token operator">=</span>keys<span class="token punctuation">,</span>values<span class="token operator">=</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#format()方法通过{}来实现格式化输出，这里用通过变量进行填充</span><span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># insert into stu(name,sex,age) values(%s,%s,%s)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tuple()将字典类型的数据变为元组类型</span>    <span class="token comment" spellcheck="true">#print(tuple(data.values()))</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'insert Successfully'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed'</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><p>最简单的就是构造一个SQL语句</p><pre class=" language-python"><code class="language-python">sql<span class="token operator">=</span><span class="token string">'update stu set age=%s where name= %s'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span>Tom<span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>实际数据抓取过程中，大部分情况下要插入数据。当数据出现重复时，我们希望更新数据而不是重复保存。</p><p>实现去重的方法，若数据存在，则更新数据，否则，就插入数据。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldata<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'1005'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Mike'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">120</span><span class="token punctuation">}</span>db<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>table<span class="token operator">=</span><span class="token string">'stu'</span>keys<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>values<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>sql<span class="token operator">=</span><span class="token string">'insert into {table}({keys}) values({values}) on duplicate key update'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span>keys<span class="token operator">=</span>keys<span class="token punctuation">,</span>values<span class="token operator">=</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#on duplicate key update 如果主键存在就执行更新操作</span>update <span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">" {key} = %s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">)</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [' id = %s', ' name = %s', ' age = %s']</span><span class="token comment" spellcheck="true"># print([" {key} = %s".format(key=key) for key in data])#[' id = %s', ' name = %s', ' age = %s']</span><span class="token comment" spellcheck="true">#print(update) #id = %s,name = %s,age = %s</span>sql<span class="token operator">+=</span>update<span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#insert into stu(id,name,age) values(%s,%s,%s) on duplicate key update id = %s,name = %s,age = %s</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  6个%s，tuple()元组*2变为原来的2倍</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>Error    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>condition<span class="token operator">=</span><span class="token string">'age>100'</span>table<span class="token operator">=</span><span class="token string">'stu'</span>sql<span class="token operator">=</span><span class="token string">'delete from {table} where {condition}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span>condition<span class="token operator">=</span>condition<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'spiders'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>condition<span class="token operator">=</span><span class="token string">'age&lt;=23'</span>table<span class="token operator">=</span><span class="token string">'stu'</span>sql<span class="token operator">=</span><span class="token string">'select * from {table} where {condition}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span>condition<span class="token operator">=</span>condition<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count:'</span><span class="token punctuation">,</span>cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">)</span>    one<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'one:'</span><span class="token punctuation">,</span>one<span class="token punctuation">)</span>    results<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#fetchall()获取的数据是3条而不是4条，由于前面调用了fetchone()方法，使其内部的指针偏移到下一条数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'results:'</span><span class="token punctuation">,</span>results<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Type results:'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> results<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''select * from stu where age>=10count: 4one: ('1002', 'Tom', 23)results: (('1003', 'Mary', 20), ('1006', 'Bob', 25), ('10023', 'Mike', 25))Type results: &lt;class 'tuple'>('1003', 'Mary', 20)('1006', 'Bob', 25)('10023', 'Mike', 25)'''</span></code></pre><p>由于数据量很大时，fetchall()将结果以元组的形式返回占用的开销高，所以建议逐条取数据。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count:'</span><span class="token punctuation">,</span>cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">)</span>    row<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Row:"</span><span class="token punctuation">,</span>row<span class="token punctuation">)</span>        row<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫,数据存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pymysql python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件存储</title>
      <link href="/2019/12/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2019/12/07/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h4><h5 id="1-TXT文本存储"><a href="#1-TXT文本存储" class="headerlink" title="1.TXT文本存储"></a>1.TXT文本存储</h5><p>txt几乎兼容任何平台，方便。但是不利于检索。</p><p>保存知乎发现页面的最新专题信息。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqurl<span class="token operator">=</span><span class="token string">"https://zhihu.com/explore"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36'</span><span class="token punctuation">}</span>html<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>textdoc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>items1<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.ExploreHomePage-specials .ExploreSpecialCard'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> item1 <span class="token keyword">in</span> items1<span class="token punctuation">:</span>    title1<span class="token operator">=</span>item1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.ExploreSpecialCard-info .ExploreSpecialCard-title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>    items2<span class="token operator">=</span>item1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.ExploreSpecialCard-contentList .ExploreSpecialCard-contentTitle'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item2 <span class="token keyword">in</span> items2<span class="token punctuation">:</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item2<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item2<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>    file<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'explore.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>title1<span class="token punctuation">,</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">3</span></code></pre><p>explore.txt</p><pre class=" language-reStructuredText"><code class="language-reStructuredText">中超大结局，广州恒大豪夺第八冠力压国安，恒大夺取中超冠军归化球员初登中超赛场天海门将张鹭醉驾被抓==================================================向时间开杠，抗老当然有正确答案当我们讨论抗老时，到底在讨论什么？如何抗衰老?肌肤抗老的原理究竟是什么？==================================================向上生活，渐入「家」境向上生活，2020 自如新产品发布会能否用一百字写清楚你最想要的生活？拥有哪些好物，可以提高幸福感？==================================================当「猝死」离我们越来越近艺人高以翔在录制节目时突发心源性猝死心源性猝死：毫无征兆的死亡威胁？我看起来完全正常，会不会猝死？==================================================</code></pre><p><strong>打开方式</strong></p><p>r：  只读方式打开。文件的指针在文件的开头。默认</p><p>rb：以二进制打开一个文件。文件的指针放在文件开头。</p><p>r+：以读写方式打开一·个文件。文件指针放在文件的开头。</p><p>rb+: 以二进制读写方式打开一个文件。文件的指针放在文件的开头。</p><p>w： 以写入的方式打卡一个文件。如果该文件已存在，将其覆盖。不存在，就创建。</p><p>wb:  以二进制写入方式打开一个文件。如果该文件存在，将其覆盖。不存在，就创建。</p><p>w+：以读写方式打开一个文件。已存在，覆盖。不存在，创建。</p><p>wb+: 以二进制读写格式打开文件。已存在，覆盖。不存在，创建。</p><p>a：    以追加方式打开一个文件。已存在，文件指针放在文件结尾。新的内容放在已有内容之后。不存在，创建新文件来写入。</p><p>ab：  以二进制追加方式打开一个文件。已存在，文件指针放在文件结尾。新的内容放在已有内容之后。不存在，创建新文件来写入。</p><p>a+：  以读写方式打开一个文件。已存在，文件指针放在文件结尾。文件打开时会是追加模式。不存在，创建新文件来读写。</p><p>ab+：以二进制追加方式打开一个文件。已存在，文件指针放在文件结尾。新的内容放在已有内容之后。不存在，创建新文件来写入。</p><p><strong>简化写法</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open <span class="token punctuation">(</span><span class="token string">'explore.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span> <span class="token keyword">as</span> file<span class="token punctuation">)</span><span class="token punctuation">:</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>title1<span class="token punctuation">,</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span></code></pre><h5 id="2-JSON文件存储"><a href="#2-JSON文件存储" class="headerlink" title="2.JSON文件存储"></a>2.JSON文件存储</h5><p>​    json即javascript object Notation，javascript对象标记，通过对象和数组的组合来表示数据，是一种轻量级的数据交换格式。</p><ul><li><p>对象和数组</p><p>JavaScript语言中，一切皆对象。    任何支持的类型都可以通过JSON来表示，例如字符串，数字，对象，数组等。</p><p><strong>对象</strong>：JavaScript中使用{}包裹起来的内容。{key1:value1,key2,value2,…}的键值对结构。key为对象的属性，value为对应的值。</p><p><strong>数组</strong>：JavaScript用[]包裹起来的内容。</p><p>一个json对象可以写为如下形式：</p><p>[{</p><p>​    ‘name’:’Tom’,</p><p>​    ‘sex’:’male’，</p><p>​    ‘age’:’23’</p><p>},{</p><p>​    ‘name’:’Mary’,</p><p>​    ‘sex’:’female’，</p><p>​    ‘age’:’20’</p><p>}]</p><p>[]包起来的相当于列表类型，列表的每个元素可以是任意类型，这个案例中它是字典类型，用{}包围。</p></li><li><p>读取json</p><p>python提供了json库来实现json文件的读写操作，利用json库的loads()方法将json文本字符串转为json对象，通过dumps()方法将json对象转为文字字符串。</p><p>json的数据需要用双引号来包围，否则报错。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonstr1<span class="token operator">=</span><span class="token string">'[{"name": "Tom","gender": "male","age": "23"},{"name": "Mary","gender": "female","age": "20"}]'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用loads()方法将字串串转为json对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过索引来获取对应的内容</span><span class="token triple-quoted-string string">'''运行结果：&lt;class 'str'>[{'name': 'Tom', 'gender': 'male', 'age': '23'}, {'name': 'Mary', 'gender': 'female', 'age': '20'}]&lt;class 'list'>'''</span></code></pre><p>从json文本中读取内容。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    str1<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用loads()方法将字串串转为json对象</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过索引来获取对应的内容</span></code></pre></li><li><p>输出json</p><p>调用dumps()将json对象转化为字符串。</p><pre class=" language-python"><code class="language-python">data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用dumps()将json对象转为字符串</span><span class="token triple-quoted-string string">'''[{"name": "Tom", "sex": "male"}]'''</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#保存为json的格式</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加参数indent，代表缩进的字符个数</span><span class="token triple-quoted-string string">'''[  {    "name": "Tom",    "sex": "male"  }]'''</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#json中包含中文字符</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>    <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h5 id="3-CSV文件存储"><a href="#3-CSV文件存储" class="headerlink" title="3.CSV文件存储"></a>3.CSV文件存储</h5><p>CSV，全称Comma-Separated Values ，中文名称逗号分隔值或字符分隔值，其文件以纯文本形式存储表格数据。</p><ul><li><p>写入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#打开data.csv文件，打开模式为w，获得文件句柄</span>    writer<span class="token operator">=</span>csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用csv的writer()方法初始化写入对象，传入句柄</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'23'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1002'</span><span class="token punctuation">,</span><span class="token string">'Mike'</span><span class="token punctuation">,</span><span class="token string">'32'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1003'</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'45'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''id,name,age1001,Mary,231002,Mike,321003,Tom,45'''</span></code></pre><p>修改列之间的分隔符</p><pre class=" language-python"><code class="language-python">writer<span class="token operator">=</span>csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#此时为空格分隔</span></code></pre><p>调用writerrows()方法同时写入多行，此时的参数为二维列表</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    writer<span class="token operator">=</span>csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'Mike'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1003'</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1002'</span><span class="token punctuation">,</span><span class="token string">'Mike'</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''id name age1001 Mike 201003 Tom 451002 Mike 32'''</span></code></pre><p>爬取的数据一般是结构化的数据，用字典来表示。在csv库中也提供了字典的写入方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    fieldnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#定义三个字段，将其传入DictWriter来初始化一个字典写入对象</span>    writer<span class="token operator">=</span>csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span>fieldnames<span class="token operator">=</span>fieldnames<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#先写入头部信息</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'mary'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#先写入字典</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'1002'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'1003'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'QQ'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''id,name,age1001,mary,201002,Tom,291003,QQ,28'''</span></code></pre><p>写入中文，要给open()参数指定编码格式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></code></pre></li><li><p>读取</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    reader<span class="token operator">=</span>csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫,数据存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests python3 json csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyquery的使用</title>
      <link href="/2019/12/04/pyquery/"/>
      <url>/2019/12/04/pyquery/</url>
      
        <content type="html"><![CDATA[<h5 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h5><ul><li><p>简介</p><p>pyquery更适合用于CSS选择器。</p></li><li><p>实例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq <span class="token comment" spellcheck="true">#引入PyQuery对象，取别名为pq</span>html<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div>&lt;ul>&lt;li class='item-0'>first item&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-inactive'>&lt;a href='link3.html'>&lt;span class='bold'>thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class='item-1'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/ul>&lt;/div>'''</span>doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：所有li节点</p></li><li><p>URL初始化</p><p>初始化的参数不仅可以以字符串的形式传递，还可以传入网页的url</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc<span class="token operator">=</span>pq<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://ejgdlyz.github.io'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''类似于from pyquery import PyQuery as pqimport requestsdoc=pq(requests.get('https://ejgdlyz.github.io').text)print(doc('title'))'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>文件初始化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuerydoc<span class="token operator">=</span>pq<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'demo.html'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span></code></pre></li></ul><h5 id="2-基本CSS选择器"><a href="#2-基本CSS选择器" class="headerlink" title="2.基本CSS选择器"></a>2.基本CSS选择器</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQueryhtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div id='container'>&lt;ul class='list'>&lt;li class='item-0'>first item&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-1 active'>&lt;a href='link3.html'>&lt;span class='bold'>thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class='item-1 active'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/ul>&lt;/div>'''</span>doc<span class="token operator">=</span>PyQuery<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'#container .list li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'#container .list li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''输出&lt;li class="item-0">first item&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">second item&lt;/a>&lt;/li>&lt;li class="item-inactive">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link4.html">fourth item&lt;/a>&lt;/li>&lt;li class="item-0">&lt;a href="link5.html">fifth item&lt;/a>&lt;/li>&lt;class 'pyquery.pyquery.PyQuery'>'''</span></code></pre><h5 id="3-查找结点"><a href="#3-查找结点" class="headerlink" title="3.查找结点"></a>3.查找结点</h5><ul><li><p>子节点</p><p>查找子节点时，可以用find()方法。参数为css选择器。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token comment" spellcheck="true">#以前面的html为例</span>doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>items<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>lis<span class="token operator">=</span>items<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#选取其内部的所有li节点。find()方法会将所有符合条件的节点选择出来，结果类型为PyQuery类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#find()查找的范围时子孙节点，若只查找子节点，可以用children()方法</span>lis<span class="token operator">=</span>items<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#lis=items.children('.active')</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span></code></pre></li><li><p>父节点</p></li></ul><pre class=" language-python"><code class="language-python">  items<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span>  container<span class="token operator">=</span>items<span class="token punctuation">.</span>parent<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>  <span class="token triple-quoted-string string">'''  输出  &lt;class 'pyquery.pyquery.PyQuery'>  &lt;div id="container">  &lt;ul class="list">  &lt;li class="item-0">first item&lt;/li>  &lt;li class="item-1">&lt;a href="link2.html">second item&lt;/a>&lt;/li>  &lt;li class="item-0 active">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>  &lt;li class="item-1 active">&lt;a href="link4.html">fourth item&lt;/a>&lt;/li>  &lt;li class="item-0">&lt;a href="link5.html">fifth item&lt;/a>  &lt;/li>&lt;/ul>  &lt;/div>  '''</span></code></pre><p>  这里的父节点是该节点的直接父节点，它不会去查找父节点的父节点。</p><p>  若想要获得祖先节点，可以使用parents()方法。parents()方法会返回所有祖先节点。</p><pre class=" language-python"><code class="language-python">  doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>  items<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span>  parents<span class="token operator">=</span>items<span class="token punctuation">.</span>parents<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>parents<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>parents<span class="token punctuation">)</span></code></pre><p>  parents()方法也可以传入css选择器</p><pre class=" language-python"><code class="language-python">  parent<span class="token operator">=</span>items<span class="token punctuation">.</span>parents<span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span></code></pre><ul><li><p>兄弟节点</p><p>siblings()方法获取兄弟节点。</p><pre class=" language-python"><code class="language-python">doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.list .item-0.active'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>siblings<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出兄弟节点4个。</p><p>也可以向siblings()传入css选择器。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>siblings<span class="token punctuation">(</span><span class="token string">'.active'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h5 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4.遍历"></a>4.遍历</h5><p>pyquery的选择结果可能是多个节点，也可能是单个节点，类型都是PyQuery类型。</p><p>对于单个节点，可以打印输出，也可以转成字符串打印输出。</p><pre class=" language-python"><code class="language-python">doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.item-0.active'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''输出&lt;li class="item-0 active">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class='''</span></code></pre><p>对于多个节点的结果，遍历获取。例如，遍历每一个li节点，需要items()方法。</p><pre class=" language-python"><code class="language-python">lis<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#得到一个生成器，遍历，得到li对象，类型为PyQuery类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> lis<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>type<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''&lt;class 'generator'>&lt;li class="item-0">first item&lt;/li> &lt;class 'pyquery.pyquery.PyQuery'>&lt;li class="item-1">&lt;a href="link2.html">second item&lt;/a>&lt;/li> &lt;class 'pyquery.pyquery.PyQuery'>&lt;li class="item-0 active">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li> &lt;class 'pyquery.pyquery.PyQuery'>&lt;li class="item-1 active">&lt;a href="link4.html">fourth item&lt;/a>&lt;/li> &lt;class 'pyquery.pyquery.PyQuery'>&lt;li class="item-0">&lt;a href="link5.html">fifth item&lt;/a>&lt;/li> &lt;class 'pyquery.pyquery.PyQuery'>'''</span></code></pre><h5 id="5-获取信息"><a href="#5-获取信息" class="headerlink" title="5.获取信息"></a>5.获取信息</h5><ul><li><p>获取属性</p><p>提取到某个PyQuery类型的节点后，就可以调用attr()方法来获取属性。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqhtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='mydiv'>&lt;div id='container'>&lt;ul class='list'>&lt;li class='item-0'>first item&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-0 active'>&lt;a href='link3.html'>&lt;span class='bold'>thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class='item-1 active'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/ul>&lt;/div>&lt;/div>'''</span>doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>a<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.item-0.active a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(a.attr.href)</span></code></pre><p>当返回结果有多个时，就需要进行遍历。</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> A <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行输出&lt;class 'generator'>link2.htmllink3.htmllink4.htmllink5.html'''</span></code></pre></li><li><p>获取文本</p><p>调用text()方法来获取文本。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#同上</span>a<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.item-0.active a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#忽略节点内部的html文本，返回纯文字内容</span><span class="token triple-quoted-string string">'''运行输出&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>thrid item'''</span></code></pre><p>若想要获取节点内的html文本，可以用html()方法</p><pre class=" language-python"><code class="language-python">li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.item-0.active'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>html<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行输出&lt;li class="item-0 active">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>'''</span></code></pre><p>当返回结果是多个节点时，text()会将所有文本内容进行拼接，而html()只返回第一个节点的html文本内容。</p><pre class=" language-python"><code class="language-python">doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>lis<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>html<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行输出first item second item thrid item fourth item fifth itemfirst item'''</span></code></pre></li></ul><h5 id="6-节点操作"><a href="#6-节点操作" class="headerlink" title="6.节点操作"></a>6.节点操作</h5><p>pyquery提供了一系列方法来对节点进行动态修改，为某个节点添加一个class,移除节点等。</p><ul><li><p>addClass和removeClass</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqhtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='mydiv'>&lt;div id='container'>&lt;ul class='list'>&lt;li class='item-0'>first item&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-0 active'>&lt;a href='link3.html'>&lt;span class='bold'>thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class='item-1 active'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/ul>&lt;/div>&lt;/div>'''</span>doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.item-0.active'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token punctuation">.</span>removeClass<span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#移除active属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token punctuation">.</span>add_class<span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加active属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行输出&lt;li class="item-0 active">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class="item-0">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class="item-0 active">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>'''</span></code></pre></li><li><p>attr,text,html</p><pre class=" language-python"><code class="language-python">html<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;ul class='list'>&lt;li class='item-0 active'>&lt;a href='link3.html'>&lt;span class='bold'>thrid item&lt;/span>&lt;/a>&lt;/li>&lt;/ul>'''</span>doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.item-0.active'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">'changed item'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token punctuation">.</span>html<span class="token punctuation">(</span><span class="token string">'&lt;span>changed item&lt;/span>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行输出&lt;li class="item-0 active">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class="item-0 active" name="link">&lt;a href="link3.html">&lt;span class="bold">thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class="item-0 active" name="link">changed item&lt;/li>&lt;li class="item-0 active" name="link">&lt;span>changed item&lt;/span>&lt;/li>'''</span></code></pre><p>attr()方法只传一个参数的属性名，就获取这个属性值，传入第二个参数，可以用来修改属性值。</p><p>text()和html()方法如果不传参数，则获取节点内纯文本和html文本，如果传入参数，则进行赋值。</p></li><li><p>remove()</p><pre class=" language-python"><code class="language-python">html<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='div1'>    Hello World!&lt;p>This is a p Tag&lt;/p>&lt;/div>'''</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>div<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'.div1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果只提取Hello world!这个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>div<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''&lt;class 'pyquery.pyquery.PyQuery'>Hello World!This is a p Tag&lt;p>This is a p Tag&lt;/p>Hello World!'''</span></code></pre></li></ul><h5 id="7-伪类选择器"><a href="#7-伪类选择器" class="headerlink" title="7.伪类选择器"></a>7.伪类选择器</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqhtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='mydiv'>&lt;div id='container'>&lt;ul class='list'>&lt;li class='item-0'>first item&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-0 active'>&lt;a href='link3.html'>&lt;span class='bold'>thrid item&lt;/span>&lt;/a>&lt;/li>&lt;li class='item-1 active'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>'''</span>doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li:first-child'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出第一个li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li:last-child'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最后一个li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li:nth-child(2)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#第二个li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li:gt(2)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出第三个之后的li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li:nth-child(2n)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#偶数位置的li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'li:contains(second)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#包含second的li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行输出&lt;li class="item-0">first item&lt;/li>&lt;li class="item-0">&lt;a href="link5.html">fifth item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">second item&lt;/a>&lt;/li>&lt;li class="item-1 active">&lt;a href="link4.html">fourth item&lt;/a>&lt;/li>&lt;li class="item-0">&lt;a href="link5.html">fifth item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">second item&lt;/a>&lt;/li>&lt;li class="item-1 active">&lt;a href="link4.html">fourth item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">second item&lt;/a>&lt;/li>'''</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyquery python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautiful Soup的使用</title>
      <link href="/2019/11/28/beautufulsoup/"/>
      <url>/2019/11/28/beautufulsoup/</url>
      
        <content type="html"><![CDATA[<h5 id="1-Beautiful-Soup-简介"><a href="#1-Beautiful-Soup-简介" class="headerlink" title="1.Beautiful Soup 简介"></a>1.Beautiful Soup 简介</h5><p>Beautiful Soup就是python的一个HTML或XML的解析库，可以用它来方便的从网页中获取数据。</p><h5 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p class='title' name='dormouse'>&lt;b>The Dormouse's story&lt;/b>&lt;/p>&lt;p class='story'>Once a time there were three little sisiters;and their names were &lt;a href='https://example.com/elsie' class='sister' id='link1'>&lt;!--Elsie-->&lt;/a>,&lt;a href='https://example.com/Lacie' class='sister' id='link2'>&lt;!--Lacie-->&lt;/a>and&lt;a href='https://example.com/Tom' class='sister' id='link3'>&lt;!--Tom-->&lt;/a>;and they lived at the bottom of a wall&lt;/p>&lt;p class='story'>...&lt;/p>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#该对象的第二个参数为解析器的类型，这里使用lxml，</span><span class="token comment" spellcheck="true">#初始化BeautifulSoup时自动更正格式</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pretty()方法把解析的字符串以标准的缩进格式输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出title节点的文本内容，soup.titlt选出HTML文本节点</span></code></pre><h5 id="3-节点选择器"><a href="#3-节点选择器" class="headerlink" title="3.节点选择器"></a>3.节点选择器</h5><p>直接调用节点的名称就可以选择节点元素，再调用string属性就可以得到节点内的文本。</p><ul><li><p>选择元素</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p class='title' name='dormouse'>&lt;b>The Dormouse's story&lt;/b>&lt;/p>&lt;p class='story'>Once a time there were three little sisiters;and their names were &lt;a href='https://example.com/elsie' class='sister' id='link1'>&lt;!--Elsie-->&lt;/a>,&lt;a href='https://example.com/Lacie' class='sister' id='link2'>&lt;!--Lacie-->&lt;/a>and&lt;a href='https://example.com/Tom' class='sister' id='link3'>&lt;!--Tom-->&lt;/a>;and they lived at the bottom of a wall&lt;/p>&lt;p class='story'>...&lt;/p>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#当有多个节点时，只会选择第一个节点</span></code></pre></li><li><p>提取信息</p><p>获取节点属性值，节点名称</p><p>（1）获取名称</p><p>利用name属性来获取节点名称。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><p>（2）获取属性</p><p>每个节点可能有多个属性，利用attrs获取全部属性</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>sttrs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回类型为字典，</span><span class="token comment" spellcheck="true">#print(soup.a.['class'])</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>（3）获取 内容</p><p>利用string属性获取节点元素包含的文本内容</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string<span class="token punctuation">)</span></code></pre></li><li><p>嵌套选择</p><p>返回类型是bs4.element.Tag类型，可以继续调用节点进行下一步选择</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嵌套选择'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span></code></pre></li><li><p>关联选择</p><p>做选择时，不能一步就选到想要的节点内容，需要先选中某一个节点元素，然后再以它为基准选择其他子节点，父节点，兄弟节点等。</p><p>（1）子节点和子孙节点</p><p>选取节点之后，想要获取它的直接子节点，可以调用contents属性</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p class='title' name='dormouse'>&lt;b>The Dormouse's story&lt;/b>&lt;/p>&lt;p class='story'>Once a time there were three little sisiters;and their names were &lt;a href='https://example.com/elsie' class='sister' id='link1'>&lt;!--Elsie-->&lt;/a>,&lt;a href='https://example.com/Lacie' class='sister' id='link2'>&lt;!--Lacie-->&lt;/a>and&lt;a href='https://example.com/Tom' class='sister' id='link3'>&lt;!--Tom-->&lt;/a>;and they lived at the bottom of a wall&lt;/p>&lt;p class='story'>...&lt;/p>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents<span class="token punctuation">)</span></code></pre><p>返回结果是列表类型。p节点里既包含文本，又包含节点，最后会将它们以列表形式统一返回。</p><p>（2）父节点和子孙节点</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#同上</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#parents属性输出所有祖先节点,生成器类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>（3）兄弟节点</p><p>同级节点获取</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p class='story'>Once a time there were three little sisiters;and their names were &lt;a href='https://example.com/elsie' class='sister' id='link1'>&lt;span>Elsie&lt;/span>&lt;/a>    Hello&lt;a href='https://example.com/Lacie' class='sister' id='link2'>&lt;!--Lacie-->&lt;/a>    and&lt;a href='https://example.com/Tom' class='sister' id='link3'>&lt;!--Tom-->&lt;/a>;and they lived at the bottom of a wall&lt;/p>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'同级节点'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'上一个兄弟节点'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>previous_sibling<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下一个兄弟节点'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'上一个兄弟节点'</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>previous_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下一个兄弟节点'</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>（4）提取信息</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p class='story'>    Once a time there were three little sisiters;and their names were &lt;a href='https://example.com/elsie' class='sister' id='link1'>Elsie&lt;/a>&lt;a href='https://example.com/Lacie' class='sister' id='link2'>Lacie&lt;/a>&lt;/p>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取文本，属性'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'next_sibling:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Parent:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>返回结果是单个节点，可以直接调用string,attrs等属性获取其文本和属性。</p><p>返回的是多个节点的生成器，则可以转为列表后取出某个元素，再调用string,attrs等属性获取其对应节点的文本和属性。</p></li></ul><h5 id="4-方法选择器"><a href="#4-方法选择器" class="headerlink" title="4.方法选择器"></a>4.方法选择器</h5><ul><li><p>find_all()</p><p>查询符合所有符合条件的元素，给它传入一些属性或文本，就可以得到符合条件的元素。</p><p>（1）name</p><p>根据节点名来查找元素</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='panel'>&lt;div class='panel-heading'>&lt;h4>Hello&lt;/h4>&lt;/div>&lt;div class='panel-body'>&lt;ul class='list' id='list-1'>&lt;li class='element'>Foo&lt;/li>&lt;li class='element'>Tom&lt;/li>&lt;li class='element'>Bob&lt;/li>&lt;/ul>&lt;ul class='list list-small' id='list-2'>&lt;li class='element'>Foo&lt;/li>&lt;li class='element'>Tom&lt;/li>&lt;/ul>&lt;/div>&lt;/div>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回结果类型为Tag类型，可以嵌套查询</span><span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> ul<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list"</span> id<span class="token operator">=</span><span class="token string">"list-1"</span><span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Bob<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list list-small"</span> id<span class="token operator">=</span><span class="token string">"list-2"</span><span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bs4.element.Tag'</span><span class="token operator">></span>ul<span class="token operator">==</span><span class="token operator">==</span> <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list"</span> id<span class="token operator">=</span><span class="token string">"list-1"</span><span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Bob<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Bob<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span>FooTomBobul<span class="token operator">==</span><span class="token operator">==</span> <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list list-small"</span> id<span class="token operator">=</span><span class="token string">"list-2"</span><span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span>FooTom</code></pre><p>（2）attrs</p><p>传入属性查询</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='panel'>&lt;div class='panel-heading'>&lt;h4>Hello&lt;/h4>&lt;/div>&lt;div class='panel-body'>&lt;ul class='list' id='list-1' name='elements'>&lt;li class='element'>Foo&lt;/li>&lt;/ul>&lt;ul class='list list-small' id='list-2'>&lt;li class='element'>Foo&lt;/li>&lt;/ul>&lt;/div>&lt;/div>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'list-1'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#attrs的残数为字典类型，返回结果为符合id=list-1所有节点列表类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'elements'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list"</span> id<span class="token operator">=</span><span class="token string">"list-1"</span> name<span class="token operator">=</span><span class="token string">"elements"</span><span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list"</span> id<span class="token operator">=</span><span class="token string">"list-1"</span> name<span class="token operator">=</span><span class="token string">"elements"</span><span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">]</span></code></pre><p>（3）text</p><p>text()参数来匹配节点的文本，传入的形式可以是str,也可以是字符串，或者正则表达式对象。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> rehtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='panel'>&lt;div class='panel-1'>&lt;a href='https://www.baidu.com'>baidu link&lt;/a>&lt;a href='https://www.sohu.com'>sohu link&lt;/a>&lt;/div>&lt;/div>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出:</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'baidu link'</span><span class="token punctuation">,</span> <span class="token string">'sohu link'</span><span class="token punctuation">]</span></code></pre></li><li><p>find()</p><p>类似find_all()，不同的是find()返回的第一个匹配的元素，为单个元素。find_all()返回所有匹配元素的列表。</p></li></ul><h5 id="5-CSS选择器"><a href="#5-CSS选择器" class="headerlink" title="5.CSS选择器"></a>5.CSS选择器</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='panel'>&lt;div class='panel-heading'>&lt;h4>Hello&lt;/h4>&lt;/div>&lt;div class='panel-body'>&lt;ul class='list' id='list-1'>&lt;li class='element'>Foo&lt;/li>&lt;li class='element'>Tom&lt;/li>&lt;li class='element'>Bob&lt;/li>&lt;/ul>&lt;ul class='list list-small' id='list-2'>&lt;li class='element'>Foo&lt;/li>&lt;li class='element'>Tom&lt;/li>&lt;/ul>&lt;/div>&lt;/div>'''</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.panel .panel-heading'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#list-2 .element'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"panel-heading"</span><span class="token operator">></span><span class="token operator">&lt;</span>h4<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Bob<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bs4.element.Tag'</span><span class="token operator">></span></code></pre><ul><li><p>嵌套选择</p><p>先选择ul节点，再遍历每个ul节点，选择其li节点</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>获取属性</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">[</span><span class="token string">'li'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Tag类型</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取每个ul节点的id属性</span><span class="token triple-quoted-string string">'''list-1list-1list-2list-2'''</span></code></pre></li><li><p>获取文本</p><p>获取文本你可以使用string方法，亦可以使用get_text()</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> li <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get Text'</span><span class="token punctuation">,</span>li<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'String:'</span><span class="token punctuation">,</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Get Text FooString: FooGet Text TomString: TomGet Text BobString: BobGet Text FooString: FooGet Text TomString: Tom'''</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Beautiful Soup python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPath的使用</title>
      <link href="/2019/11/27/%E4%BD%BF%E7%94%A8XPath/"/>
      <url>/2019/11/27/%E4%BD%BF%E7%94%A8XPath/</url>
      
        <content type="html"><![CDATA[<h5 id="1-使用XPath"><a href="#1-使用XPath" class="headerlink" title="1.使用XPath"></a>1.使用XPath</h5><ul><li><p>XPath概览</p><p>XPath的选择功能强大，它提供了简洁明了的路径选择表达式。用于字符串，数值，时间的匹配以及节点，序列的处理等。</p></li><li><p>XPath常用规则</p><p>nodename —————-选取此节点的所有子节点</p><p>/                    —————-从当前节点选取直接子节点</p><p>//                  —————-从当前节点选取直接子孙节点</p><p>.                    —————-选取当前节点</p><p>..                  —————–选取当前节点的父节点</p><p>@                —————–选取属性</p><p><strong>//title[@lang=’eng’]</strong></p><p><strong>这就是一个XPath规则，代表选择所有名称为title，同时属性lang值为eng的节点</strong></p></li><li><p>实例引入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true">#导入lxml库的etree模块，声明一段HTML文本，调用HTML类进行初始化，</span><span class="token comment" spellcheck="true"># 自动补充缺失节点，成功构造一个XPath解析对象</span>text<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div>&lt;ul>&lt;li class='item-0'>&lt;a href='link1.html'>first item&lt;/a>&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-inactive'>&lt;a href='link3.html'>thrid item&lt;/a>&lt;/li>&lt;li class='item-1'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>result<span class="token operator">=</span>etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出修正后的HTML代码，返回结果是bytes类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#利用decode()方法转成str</span></code></pre></li><li><p>所有节点</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreecontent<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div>&lt;ul>&lt;li class='item-0'>&lt;a href='link1.html'>first item&lt;/a>&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-inactive'>&lt;a href='link3.html'>thrid item&lt;/a>&lt;/li>&lt;li class='item-1'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/ul>&lt;/div>'''</span>html<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#result=etree.tostring(html)</span>result<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#*匹配所有节点，返回结果是一个列表每个元素是Element类型</span><span class="token comment" spellcheck="true">#res_li=html.xpath('//li')#获取所有li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre></li><li><p>子节点</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*/li/a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># /a表示所有li元素下的直接a元素，/用于取直接子节点</span><span class="token comment" spellcheck="true">#result=html.xpath('//li//a')</span><span class="token comment" spellcheck="true"># //a表示所有li元素下的所有a元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul/a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#/ul下的直接a元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出：[]</span></code></pre><p>//用于获取直接子节点，，//用于获取子孙节点</p></li><li><p>父节点</p><p>已知子节点，查找父节点，用..来实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#首先选中href属性为link4.html的a节点，再获取其父节点，然后在获取其class属性</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[@href="link4.html"]/../@class'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre></li><li><p>属性匹配</p><p>用@符进行属性过滤。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="item-0"]'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#选取class为item-0的li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre></li><li><p>文本获取</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="item-0"]/text()'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果是['\r\n'] 原因：获取的节点是 &lt;li class='item-1'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li> &lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a> &lt;/li> 因为匹配的结果是修正过的，而自动修正的li节点的尾标签换行了，所以提取的文本是换行符'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>可改为：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="item-0"]//a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>或者</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#res=html.xpath('//li[@class="item-0"]//a/text()')</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="item-0"]//text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre></li><li><p>属性获取</p><p>获取所有a节点的href属性</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/@href'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre></li><li><p>属性多值匹配</p><p>适用于某个节点属性有多个值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreecontent<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;li class='li li-first'>&lt;a href="link1.html">first item&lt;/a>&lt;/li>'''</span>html<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>content<span class="token punctuation">)</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[contains(@class,li)]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre></li><li><p>多属性匹配</p><p>根据多个属性确定一个节点，可使用and来连接</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreecontent<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;li class='li li-first' name='item'>&lt;a href="link1.html">first item&lt;/a>&lt;/li>'''</span>html<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>content<span class="token punctuation">)</span>res<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[contains(@class,li) and @name="item"]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>and是xpath中的运算符，还有or,mod等等。</p></li><li><p>按序选择</p><p>利用[]传入索引的方法获取特定次序的节点</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreetext<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div>&lt;ul>&lt;li class='item-0'>&lt;a href='link1.html'>first item&lt;/a>&lt;/li>&lt;li class='item-1'>&lt;a href='link2.html'>second item&lt;/a>&lt;/li>&lt;li class='item-inactive'>&lt;a href='link3.html'>thrid item&lt;/a>&lt;/li>&lt;li class='item-1'>&lt;a href='link4.html'>fourth item&lt;/a>&lt;/li>&lt;li class='item-0'>&lt;a href='link5.html'>fifth item&lt;/a>&lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>result<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[position() &lt;3]/a/text() '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()-2]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre></li><li><p>节点轴选择</p><p>XPath提供了很多节点轴选择方法，包括获取子元素，兄弟元素，父元素，祖先元素等。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPath python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取猫眼电影排行榜TOP100</title>
      <link href="/2019/11/26/maoyan/"/>
      <url>/2019/11/26/maoyan/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#爬取猫眼电影TOP100的电影名称，时间，评分，图片等信息</span><span class="token comment" spellcheck="true">#requests库</span><span class="token comment" spellcheck="true">#1.抓取首页</span><span class="token comment" spellcheck="true">#2.正则提取</span><span class="token keyword">import</span> re<span class="token punctuation">,</span>requests<span class="token punctuation">,</span>json<span class="token punctuation">,</span>time<span class="token keyword">def</span> <span class="token function">get_one_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36'</span>    <span class="token punctuation">}</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>text    <span class="token keyword">return</span> None<span class="token keyword">def</span> <span class="token function">parse_one_page</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>        <span class="token string">'&lt;dd>.*?board-index.*?>(.*?)&lt;/i>.*?data-src="(.*?)".*?name.*?a.*?>(.*?)&lt;/a>.*?star.*?>(.*?)&lt;/p>.*?releasetime">(.*?)&lt;/p>.*?integer">(.*?)&lt;/i>.*?fraction">(.*?)&lt;/i>.*?&lt;/dd>'</span>        <span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    items <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#将结果生成字典</span>        <span class="token keyword">yield</span><span class="token punctuation">{</span>            <span class="token string">'index'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'image'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'actor'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">3</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'time'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'score'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>item<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> items<span class="token comment" spellcheck="true">#写入文件</span><span class="token keyword">def</span> <span class="token function">write_to_file</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'result.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(type(json.dumps(content)))</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>content<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#ensure_ascii为False，输出结果是中文形式而不是Unicode</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">"https://www.maoyan.com/board/4?offset="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    html<span class="token operator">=</span>get_one_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    items<span class="token operator">=</span>parse_one_page<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        write_to_file<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"霸王别姬"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"张国荣,张丰毅,巩俐"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1993-07-26"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.5"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"肖申克的救赎"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1994-09-10(加拿大)"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.5"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p0.meituan.net/movie/289f98ceaa8a0ae737d3dc01cd05ab052213631.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"罗马假日"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"格利高里·派克,奥黛丽·赫本,埃迪·艾伯特"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1953-09-02(美国)"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.1"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p1.meituan.net/movie/6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"让·雷诺,加里·奥德曼,娜塔莉·波特曼"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1994-09-14(法国)"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.5"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"泰坦尼克号"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1998-04-03"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.5"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"唐伯虎点秋香"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"周星驰,巩俐,郑佩佩"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1993-07-01(中国香港)"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.1"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p0.meituan.net/movie/223c3e186db3ab4ea3bb14508c709400427933.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"乱世佳人"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"费雯·丽,克拉克·盖博,奥利维娅·德哈维兰"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1939-12-15(美国)"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.1"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p0.meituan.net/movie/46c29a8b8d8424bdda7715e6fd779c66235684.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"魂断蓝桥"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"费雯·丽,罗伯特·泰勒,露塞尔·沃特森"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1940-05-17(美国)"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.2"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p1.meituan.net/movie/ba1ed511668402605ed369350ab779d6319397.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"天空之城"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"寺田农,鹫尾真知子,龟山助清"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1992-05-01"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.0"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">:</span> <span class="token string">"https://p0.meituan.net/movie/b0d986a8bf89278afbb19f6abaef70f31206570.jpg@160w_220h_1e_1c"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"辛德勒的名单"</span><span class="token punctuation">,</span> <span class="token string">"actor"</span><span class="token punctuation">:</span> <span class="token string">"连姆·尼森,拉尔夫·费因斯,本·金斯利"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token string">"1993-12-15(美国)"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token string">"9.2"</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests库</title>
      <link href="/2019/11/23/requests/"/>
      <url>/2019/11/23/requests/</url>
      
        <content type="html"><![CDATA[<h5 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsrq<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rq=requests.post('http://httpbin.org/post')</span><span class="token comment" spellcheck="true">#rq=requests.put('http://httpbin.org/put')</span><span class="token comment" spellcheck="true">#rq=requests.delete('http://httpbin.org/delete')</span><span class="token comment" spellcheck="true">#rq=requests.head('http://httpbin.org/get')</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>rq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>rq<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>rq<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rq<span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rq<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span></code></pre><ul><li>GET请求</li></ul><p>基本使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'120'</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span>params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#该网站会根据用户的请求返回不同结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>抓取网页</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> reheaders<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://zhihu.com/explore'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'explore-feed.*?question_link.*?>(.*?)&lt;/a>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>titles<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span></code></pre><p>抓取二进制数据(github图标)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/favicon.ico'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(r.text)</span><span class="token comment" spellcheck="true">#print(r.content)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'favicon.ico'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span></code></pre><ul><li><p>POST请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'12'</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre></li><li><p>响应</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsheaders<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.jianshu.com'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span></code></pre></li></ul><h5 id="2-高级用法"><a href="#2-高级用法" class="headerlink" title="2.高级用法"></a>2.高级用法</h5><ul><li><p>文件上传</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsfiles<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span>open<span class="token punctuation">(</span><span class="token string">'favicon.ico'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre></li><li><p>Cookies</p><p>使用cookies维持登录状态</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token triple-quoted-string string">'''r=requests.get('http://www.baidu.com')print(r.cookies)for key,value in r.cookies.items(): #将cookies转化为元组进行遍历    print(key+" = "+value)'''</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token string">'_zap=bface54d-d40e-4a91-a5a0-f9e714c77426; d_c0="ABCi0WXv5Q-PTjX-MOH69gxKYOZ2aSX7Syw=|1565908724"; _xsrf=r2XRKTVaACovZGHVhjD0tT9Qy7x0gwz5; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1574087462,1574219897,1574318671,1574499180; tgw_l7_route=a37704a413efa26cf3f23813004f1a3b; capsion_ticket="2|1:0|10:1574512981|14:capsion_ticket|44:NTIxZjBhOTViMDQzNDc0YmFhZjVjMzZlZTk1YjEwM2Y=|8992301dded8f83da8c35879cce196a1ccfa61143c7f48f1edb65022768f3316"; z_c0="2|1:0|10:1574513011|4:z_c0|92:Mi4xbUVWbUNBQUFBQUFBRUtMUlplX2xEeWNBQUFDRUFsVk5jN1lBWGdDSjNHTUZ6QjVYU2ZrNTZiV1U0QXRDem1MS2d3|cbbb282d1e4255038b92361ad909dcf8e0781f4992840c6ee3aa47db3ff0d82b"; tst=r; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1574513012'</span><span class="token punctuation">,</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'www.zhihu.com'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre></li><li><p>会话维持</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token triple-quoted-string string">'''requests.get('http://httpbin.org/cookies/set/number/123456')r=requests.get('http://httpbin.org/cookies')print(r.text)'''</span>s<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/cookies/set/number1/123456'</span><span class="token punctuation">)</span>r<span class="token operator">=</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/cookies'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre></li><li><p>代理设置</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsproxies<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://127.0.0.1:37279'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'http://127.0.0.1:37000'</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre></li><li><p>Prepared Request</p><p>将请求表示为数据结构</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> requests <span class="token keyword">import</span> Request<span class="token punctuation">,</span>Sessionurl<span class="token operator">=</span><span class="token string">'http://httpbin.org/post'</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">}</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">}</span>s<span class="token operator">=</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>req<span class="token operator">=</span>Request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>prepare<span class="token operator">=</span>s<span class="token punctuation">.</span>prepare_request<span class="token punctuation">(</span>req<span class="token punctuation">)</span>r<span class="token operator">=</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>prepare<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urllib库</title>
      <link href="/2019/11/22/urllib/"/>
      <url>/2019/11/22/urllib/</url>
      
        <content type="html"><![CDATA[<p>1.urlib三个模块:</p><p>request：模拟发送请求</p><p>error：异常处理，对请求错错误进行捕获</p><p>parse: 提供处理URL的方法</p><p>robotparser: 识别网站的robots.txt文件，判断哪些网站可以爬取</p><p>2.发送请求</p><ul><li>urlopen</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestresponse<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://www.python.org'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(response.read().decode('utf-8'))</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回一个HTTPResponse</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>data参数，添加该参数需要将参数转化为bytes类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestdata<span class="token operator">=</span>bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'world'</span><span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#urlcoding将字典类型转化为字符串</span><span class="token comment" spellcheck="true">#bytes的第一个参数应为str类型</span>response <span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/post'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>timeout参数,用于设置超时时间，单位秒，超过此时间抛出异常</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">try</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Timeout Out"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>Request类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment" spellcheck="true">#Request的构造方法</span><span class="token comment" spellcheck="true"># class urllib.request.Request(url,data=None,headers={},origin_req_host=Node,unverifiable=False,method=None)</span><span class="token comment" spellcheck="true">#url:必传参数,data可选，bytes类型</span><span class="token comment" spellcheck="true">#headers字典修改User-Agent伪装浏览器</span><span class="token comment" spellcheck="true">#origin_req_host请求方的host名字或ip</span><span class="token comment" spellcheck="true">#请求使用的方法，get,post,put</span>request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">"https://python.org"</span><span class="token punctuation">)</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>parseurl<span class="token operator">=</span><span class="token string">'https://www.httpbin.org/post'</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span><span class="token punctuation">,</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'httpbin.org'</span><span class="token punctuation">}</span>dict<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">}</span>data<span class="token operator">=</span>bytes<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>req<span class="token operator">=</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span>response<span class="token operator">=</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>高级用法</p></li></ul><p>urllib.request模块的BaseHandler类，用来处理Cookie,代理。所有Handler的父类。</p><p>子类：</p><p>HTTPDefaultErrorHandler:处理HTTP响应错误，错误会抛出HTTPError类型的异常</p><p>HTTPRedirectHandler:处理重定向</p><p>HTTPCookieProcessor:处理Cookie</p><p>ProxyHandler:设置代理</p><p>HTTPPasswordMgr:管理密码，维护用户名和密码的表</p><p>HTTPBasicAuthHandler:管理认证，链接打开需要认证时，可以用它解决认证问题</p><p>利用Handler来创建更底层的类opener,来实现更加高级的功能</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#跳过弹框身份验证</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">,</span>HTTPBasicAuthHandler<span class="token punctuation">,</span>build_opener<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLErrorusername<span class="token operator">=</span><span class="token string">'username'</span>password<span class="token operator">=</span><span class="token string">'password'</span>url<span class="token operator">=</span><span class="token string">'http://116.62.203.42/empManagement/login.php'</span>p<span class="token operator">=</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>auth_handler<span class="token operator">=</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>p<span class="token punctuation">)</span>opener<span class="token operator">=</span>build_opener<span class="token punctuation">(</span>auth_handler<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    html<span class="token operator">=</span>result<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#代理</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> ProxyHandler <span class="token punctuation">,</span>build_opener<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLError<span class="token comment" spellcheck="true">#本地代理服务器，运行在9743端口</span>proxy_handler<span class="token operator">=</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://127.0.0.1:9743'</span><span class="token punctuation">,</span><span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'https://127.0.0.1:9743'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>opener<span class="token operator">=</span>build_opener<span class="token punctuation">(</span>proxy_handler<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>    html<span class="token operator">=</span>result<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Cookies，获取百度Cookie</span><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar <span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>requestcookie<span class="token operator">=</span>http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#声明CookieJar对象</span>handler<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#HTTPCookieProcessor构建handler</span>opener<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>response<span class="token operator">=</span>opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> cookie<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">" = "</span><span class="token operator">+</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre><p>3.处理异常</p><ul><li><p>URLError</p><p>URLError类来自urllib.error类，由request类产生的异常都可以通过捕获这个类来处理</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>error<span class="token keyword">try</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://116.62.203.42/index.php'</span><span class="token punctuation">)</span><span class="token keyword">except</span> error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span></code></pre></li><li><p>HTTPError,error的子类，专门用来处理HTTP请求错误<br>三个属性<br>code:返回HTTP状态，404，500<br>reason:饭返回错误的原因<br>headers:返回请求头</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>error<span class="token keyword">try</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://116.62.203.42/index.php'</span><span class="token punctuation">)</span><span class="token keyword">except</span> error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">,</span>e<span class="token punctuation">.</span>code<span class="token punctuation">,</span>e<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">except</span> error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Request Successfully'</span><span class="token punctuation">)</span></code></pre><p>3.解析链接</p><ul><li>urlparse可以实现url的解析和识别</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparseresult<span class="token operator">=</span>urlparse<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/index.html;user?id=5#comment/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>url构造 urlunparse()</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlunparse<span class="token comment" spellcheck="true">#urlunparse的参数长度必须是6</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'http'</span><span class="token punctuation">,</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'index.html'</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'a=6'</span><span class="token punctuation">,</span><span class="token string">'comment'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlunparse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>urlsplit()与urlparse(),urlunsplit()与urlunparse()类似，只是参数的长度为5</p></li><li><p>urljoin()，生成链接</p><p>第一个参数为基础链接，新的链接作为第二个参数，解析基础链接的scheme,netloc,path，<br>若新链接缺少这三个部分，就对新连接进行补充</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urljoin<span class="token keyword">print</span><span class="token punctuation">(</span>urljoin<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'FAQ.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urljoin<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'https://www.taobao.com/FAQ.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urljoin<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/about.html'</span><span class="token punctuation">,</span><span class="token string">'https://www.taobao.com/FAQ.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urljoin<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com?wd=avv'</span><span class="token punctuation">,</span><span class="token string">'https://www.taobao.com/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urljoin<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'?category=2#comment'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>urlencode(),用于构造get请求参数</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencodeparams<span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">#字典类型</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'12'</span><span class="token punctuation">}</span>base_url<span class="token operator">=</span><span class="token string">'https://www.baidu.com'</span>url<span class="token operator">=</span>base_url<span class="token operator">+</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><ul><li>parse_qs 反序列化，将一个GET请求转回字典</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> parse_qsquery<span class="token operator">=</span><span class="token string">'name=Tom&amp;age=12'</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse_qs<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>parse_qsl 将参数转化为元组组成的列表</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> parse_qslquery<span class="token operator">=</span><span class="token string">'name=Tom&amp;age=12'</span>list1<span class="token operator">=</span>parse_qsl<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse_qsl<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>quote 将内容转化为url编码的格式，例如将中文转化为URL编码</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quotekeyword<span class="token operator">=</span><span class="token string">'沙雕'</span>url<span class="token operator">=</span><span class="token string">'https://www.baidu.com?wd='</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre></li></ul><p>4.robots协议</p><p>robots协议，爬虫协议，用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以。通常是一个robots.txt的文本文件，放在网站的根目录</p><p><a href="https://www.jianshu.com/robots.txt" target="_blank" rel="noopener">https://www.jianshu.com/robots.txt</a></p><p>2.robotparser</p><p>robotparser模块来解析robots.txt，该模块提供了一个类RobotFileParser，它可以根据网站的robots.txt文件来判断一个爬取爬虫施是否有权限爬取这个网页</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>robotparser <span class="token keyword">import</span> RobotFileParserrp<span class="token operator">=</span>RobotFileParser<span class="token punctuation">(</span><span class="token punctuation">)</span>rp<span class="token punctuation">.</span>set_url<span class="token punctuation">(</span><span class="token string">'https://www.jianshu.com/robots.txt'</span><span class="token punctuation">)</span>rp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'https://www.jianshu.com/p/0826cf4692f9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'https://www.jianshu.com/p/5f054ad47f50'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>robotparser <span class="token keyword">import</span> RobotFileParser<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenrp<span class="token operator">=</span>RobotFileParser<span class="token punctuation">(</span><span class="token punctuation">)</span>rp<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://www.jd.com/robots.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'https://search.jd.com/Search?keyword=%E6%99%BA%E8%83%BD%E5%86%B0%E7%AE%B1&amp;enc=utf-8&amp;spm=2.1.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'https://mall.jd.com/index-1000000950.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> urlib python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础教程</title>
      <link href="/2019/11/03/linux/"/>
      <url>/2019/11/03/linux/</url>
      
        <content type="html"><![CDATA[<h4 id="一-Linux目录"><a href="#一-Linux目录" class="headerlink" title="一.Linux目录"></a>一.Linux目录</h4><h6 id="1-目录简介"><a href="#1-目录简介" class="headerlink" title="1.目录简介"></a>1.目录简介</h6><p>/根目录</p><p>/dev 管理设备</p><p>/etc 配置文件</p><p><strong>/home家目录</strong></p><p>/lib动态库</p><p><strong>/usr 已经安装的软件</strong></p><p>/opt 未安装的软件放置目录</p><p>/sbin 高权限指令</p><p>/selinux 安全</p><p>/tmp 临时文件</p><p><strong>/media 识别外部设备，U盘，光驱</strong></p><p><strong>/var 日志文件</strong></p><h4 id="二-Linux实操"><a href="#二-Linux实操" class="headerlink" title="二.Linux实操"></a>二.Linux实操</h4><h5 id="1-远程登录Linux系统"><a href="#1-远程登录Linux系统" class="headerlink" title="1.远程登录Linux系统"></a>1.远程登录Linux系统</h5><p>1）远程登录的软件</p><p>​    xshell5</p><p>2）远程上传和下载软件</p><p>​    xftp5(链接时选用SFTP协议，才能使用22端口)</p><h5 id="2-vi和vim编辑器"><a href="#2-vi和vim编辑器" class="headerlink" title="2.vi和vim编辑器"></a>2.vi和vim编辑器</h5><p>vim可以认为是vi的增强版</p><p>1）vi和vim的三种常见模式</p><ul><li><p>正常模式</p><p>再此模式下，可以使用快捷键，上下左右移动光标，复制和删除等。</p></li><li><p>插入模式/编辑模式</p><p>输入i即可进入此模式</p></li><li><p>命令行模式</p><p> 存盘，退出vim等操作</p><img src="http://116.62.203.42/linuximg/1.png" alt="img" style="zoom:80%;"></li><li><p>快速入门案例</p><p>开发一个hello.java程序</p><p>public class Hello<br>{</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prntln</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>}</p><ul><li>快捷键的使用</li></ul><p>1）复制当前行 yy，复制当前行的下5行，5yy，并粘贴 p</p><p>2）删除当前行是dd,删除当前行的下5行是 5dd</p><p>3）在文件中查找某个单词，命令行下 /关键词 回车 就能查找</p><p>4）设置文件的行号 命令行下 输入 [：set nu]，取消行号 [:set nonu]</p><p>5）编辑/etc/profile文件，到达文件的最末行[G]和最首行[gg]，此操作是在正常模式下</p><p>6）撤销动作，输入hello 然后撤销[正常模式下:u]</p><p>7）编辑一个文件/etc/profile，并将光标移动到第20行[shift+g]</p><p>​    ①显示行号[:set nu]</p><p>​    ②输入20这个数[正常模式]</p><p>​    ③输入shift+g[正常模式]</p></li></ul><h5 id="3-开关机和重启命令"><a href="#3-开关机和重启命令" class="headerlink" title="3.开关机和重启命令"></a>3.开关机和重启命令</h5><ul><li>基本介绍</li></ul><p>​    shutdown</p><p>​        shutdown -h now        立即关机</p><p>​        shutdown -h 1               1分钟后关机</p><p>​        shutdown -r now         立即重启</p><p>​    halt                   直接使用，等价于关机</p><p>​    reboot              重启系统</p><p>​    sync                  把内存的数据保存到磁盘上(关机或重启之前使用)</p><ul><li><p>用户的登录和注销</p><p>logout—–退出远程登录</p></li></ul><h5 id="4-用户管理"><a href="#4-用户管理" class="headerlink" title="4.用户管理"></a>4.用户管理</h5><ul><li><p>基本介绍</p><img src="http://116.62.203.42/linuximg/2.png" alt="11" style="zoom:80%;"></li><li><p><strong>添加用户(创建用户时，会自动为其创建组并且创建与其同名的家目录)</strong></p><p>useradd 【选项】用户名</p><p>[root@localhost ~]# useradd xiaoming</p><p>useradd -d 指定目录(未存在目录)  用户名   ——&gt;在指定目录创建用户</p></li><li><p><strong>为用户创建密码或者修改密码</strong></p><p>passwd 用户名</p><p>[root@localhost ~]# passwd xiaoming</p></li><li><p><strong>删除用户</strong></p><p>userdel 用户名</p><p>①删除用户，保留家目录</p><p>[root@localhost home]# userdel  xiaoming</p><p>②删除用户以及用户主目录</p><p>[root@localhost home]# userdel -r xm</p><p>删除用户时，一般不会删除家目录</p></li><li><p><strong>查询用户信息</strong></p><p>id 用户名</p><p>[root@localhost home]# id zzy<br>uid=500(zzy) gid=500(zzy) 组=500(zzy)</p><p>用户id号             所在组id号              组名称</p></li><li><p><strong>切换用户</strong></p><p>su - 非root用户名</p><p>[root@localhost home]# su - zzy</p><p>root切换到权限低的用户不需要密码</p><p>exit 可以回到原用户</p></li><li><p><strong>查看当前用户</strong></p><p>whoami</p><p>[root@localhost home]# whoami<br>root</p></li><li><p><strong>用户组</strong></p><p>介绍：类似于角色，系统可以对有共性的多个用户进行统一的管理</p><p><strong>增加组：groupadd 组名</strong></p><p>演示：[root@localhost /]# groupadd wd</p><p><strong>删除组：groupdel 组名</strong></p><p>演示：[root@localhost /]# groupdel wd</p><p><strong>增加用户时直接加上组:useradd -g  用户组 用户名</strong></p><p>案例：增加一个zwj用户，将其指定到wudang组</p><p>[root@localhost /]# groupadd wudang</p><p>[root@localhost /]# useradd -g wudang zwj </p><p>[root@localhost /]# useradd -g wudang zwj<br>[root@localhost /]# id zwj<br>uid=501(zwj) gid=501(wudang) 组=501(wudang)</p><p><strong>修改用户组：usermod -g 用户组 用户名</strong></p><p>案例：创建一个shaolin组，修改zwf所在组</p><p>[root@localhost /]# groupadd shaolin<br>[root@localhost /]# usermod -g shaolin zwj<br>[root@localhost /]# id zwj<br>uid=501(zwj) gid=502(shaolin) 组=502(shaolin)</p></li><li><p><strong>用户和组的配置文件</strong></p><p>/etc/passwd 用户配置文件 vim /etc/passwd</p><img src="http://116.62.203.42/linuximg/3.png" alt="1570349096959" style="zoom:80%;"><p>zzy用户名：x加密后的密码：500用户id：500组id：/home/zzy 家目录 ：shell</p><p>/etc/ shadow 口令配置文件</p><p>vim /etc/shadow</p><img src="http://116.62.203.42/linuximg/4.png" alt="1570349386555" style="zoom:80%;"><p>/etc/group 组配置文件</p><p>vim /etc/group</p><img src="http://116.62.203.42/linuximg/5.png" alt="1570349420084" style="zoom:80%;"></li></ul><h5 id="5-实用指令"><a href="#5-实用指令" class="headerlink" title="5.实用指令"></a>5.实用指令</h5><ul><li><p><strong>指定运行级别</strong></p><img src="http://116.62.203.42/linuximg/6.png" alt="1570350140600" style="zoom:80%;"><p>0：关机</p><p>1：单用户（找回丢失密码）</p><p>2：多用户状态没有网络服务</p><p>3：多用户状态有网络服务</p><p>4：系统未使用保留给用户</p><p>5：图像界面</p><p>6：系统重启</p><p>[root@localhost /]# vim /etc/inittab</p><img src="http://116.62.203.42/linuximg/7.png" alt="1570350392095" style="zoom:80%;"><p>常用的运行级别是3和5，要修改默认级别可改配置文件/etc/inittab的id:5:initdefault:这一行的数字</p><p><strong>切换到指定运行级别的指令：</strong></p><p>命令：init [0123456]</p><p>案例：运用init切换用户级别，5-3,然后关机</p><p> init 5</p><p> init 3</p><p> init 0</p><p><strong>找回丢失的root密码</strong></p><p>​    ①进入到单用户模式(因为进入到单用户，root不需要密码就能登录)</p><p>​    ②修改密码</p><p>开机-&gt;引导是输入e -&gt;看到一个界面a输入e-&gt;看到一个新的界面b，选中第二行(编辑内核) 输入e-&gt;在此行的最后输入 1 ，回车 -&gt;回到b界面，输入b，此时就会进入单用户模式。然后输入passwd root修改密码即可</p></li><li><p><strong>帮助指令</strong></p><p>对某个指令不熟悉时，通过帮助指令来了解使用方法</p><p><strong>man [命令或配置文件]</strong></p><p>案例：</p><p>查看ls的帮助</p><p>man ls</p><p><strong>help 命令</strong></p><h6 id="help-cd"><a href="#help-cd" class="headerlink" title="help cd"></a>help cd</h6></li></ul><h6 id="文件目录类指令"><a href="#文件目录类指令" class="headerlink" title="文件目录类指令"></a>文件目录类指令</h6><ul><li><p><strong>pwd</strong></p><p>显示当前工作目录的绝对路径</p><p>[root@localhost ~]# pwd<br>/root</p></li><li><p><strong>ls指令</strong></p><p>ls [选项] [目录或文件]</p><p>-a：显示当前目录所有文件信息（包括隐藏文件）</p><p>-l:以列表显示文件的详细信息</p></li><li><p><strong>cd命令</strong></p><p>cd [参数] </p><p>cd ~（可省略）回到家目录</p><p>cd .. 回到当前目录的上一级目录</p><p>理解：相对路径和绝对路径</p></li><li><p><strong>mkdir指令</strong></p><p>mkdir [选项] [创建的目录]</p><p>[root@localhost ~]# mkdir /home/dog</p><p>-p：创建多级目录</p><p>[root@localhost home]# mkdir -p /home/animal/tiger</p></li><li><p><strong>rmdir删除空目录</strong></p><p>rmdir [选项] 要删除的空目录</p><p>[root@localhost home]# rmdir /home/dog</p></li><li><p><strong>rm -rf 指令</strong></p><p>[root@localhost home]# rmdir animal<br>rmdir: 删除 “animal” 失败: 目录非空<br>[root@localhost home]# rm -rf animal</p></li><li><p><strong>touch指令</strong></p><p>touch 文件名称   —创建一个空文件</p><p>touch hello.txt</p><p>创建多个文件</p><p>touch a1.txt a2.txt</p></li><li><p><strong>cp指令</strong></p><p>cp [选项] source(源文件) dest(目标路径)</p><p>-r：递归复制整个文件夹</p><p>拷贝单个文件<br>[root@localhost home]# cp aaa.txt bbb/<br>拷贝整个目录</p><p>[root@localhost home]# cp -r bbb ccc</p><p>强制覆盖不提示的方法：\cp</p></li><li><p><strong>rm指令</strong></p><p>rm [选项] 要删除的文件或者目录</p><p>-r:递归删除整个文件</p><p>-f:强制删除不提示</p><p>[root@localhost home]# rm aaa.txt<br>rm：是否删除普通空文件 “aaa.txt”？y</p><p>[root@localhost home]# rm -rf bbb</p></li><li><p><strong>mv命令</strong></p><p>mv 移动文件与目录或者重命名</p><p>mv oldFileName newFileName —–重命名(同一目录)</p><p>[root@localhost home]# mv hello.txt world.txt</p><p>mv /temp/aa /targetfolder———移动</p><p>[root@localhost home]# mv world.txt ./zzy/</p><p>移动的同时重命名</p><p>[root@localhost zzy]# mv world.txt /home/hello.txt</p></li><li><p><strong>cat指令</strong></p><p>cat [选项] 要查看的文件</p><p>只能浏览文件信息，不能修改</p><p>-n:显示行号</p><p>cat -n hello.txt</p><p>分页显示（通过管道符）</p><p>[root@localhost home]# cat hello.txt | more</p></li><li><p><strong>more指令</strong></p><p>more 要查看的文件</p><p>空格：代表下一页</p><p>Enter:下一行</p><p>q:退出</p><p>Ctrl+f:向下滚动一屏</p><p>Ctrl+b:向上滚动一屏</p><p>=：当前行号</p><p>:f 输出文件名和当前行号</p></li><li><p><strong>less指令</strong></p><p>less 要查看的文件</p><p>是用于较大文件，分屏查看文件内容，分步加载文件内容。</p></li><li><p><strong>(&gt;)和&gt;&gt;指令</strong></p><p>输出重定向&gt;(覆盖原来内容)</p><p>追加&gt;&gt;(追加到文件尾部)</p><p>ls -l &gt;a.txt  ——将列表的内容写入a.txt （覆盖写）</p><p>ls -al &gt;&gt;b.txt   ——将列表的内容追加写到b.txt</p><p>cat a.txt &gt;b.txt——a.txt的内容覆盖写到b.txt</p><p>echo “内容” &gt;c.txt——-覆盖写到c.txt</p><p>echo “内容”&gt;&gt;c.txt ——–追加写到c.txt</p></li><li><p><strong>cal</strong></p><p>cal 查看日历信息</p></li><li><p><strong>echo指令</strong></p><p>作用：输出内容到控制台</p><p>echo [选项] [输出内容]</p><p>使用echo输出环境变量的路径</p><p>[root@localhost ~]# echo $PATH<br>/usr/lib/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</p><p>使用echo输出hello world</p><p>[root@localhost ~]# echo “hello world”<br>hello world</p></li><li><p><strong>head指令</strong></p><p>head 文件名 [查看文件的前10行内容]</p><p>head -n 5 [查看文件的前5行内容]</p><p>[root@localhost home]# head  -n 5 hello.txt</p><p>应用实例：查看/etc/profile的前5行代码</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># head -n 5 /etc/profile</span></code></pre></li><li><p><strong>tail指令</strong></p><p>显示文件尾部内容，用法类似head指令</p><p>tail 文件名</p><p>tail -n 文件名</p><p>tail -f 文件名 [追踪该文件的所有更新]</p><p>案例：实时监控hello.txt</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tail</span> -f hello.txt</code></pre></li><li><p><strong>ln软链接指令</strong></p><p>类似于windows<code>的快捷方式</code></p><p>ln -s [源文件或目录] [软连接名] </p><p>案例：创建一个链接到root的快捷方式</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s /root linktoroot</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd linktoroot</span></code></pre><p>当使用pwd查看当前目录时，仍然在当前目录</p><p>删除软链接</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -rf linktoroot </span></code></pre><p> —-(注意不要带/)</p></li><li><p><strong>history指令</strong></p><p>查看已经执行过的指令</p><p>history</p><p>显示所有历史指令</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># history </span></code></pre><p>显示最近的10个指令</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># history 10</span></code></pre><p>执行历史编号为5的指令</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># !298</span></code></pre></li></ul><h6 id="时间日期类指令"><a href="#时间日期类指令" class="headerlink" title="时间日期类指令"></a>时间日期类指令</h6><ul><li><p><strong>date指令</strong></p><p>基本语法：</p><p>date 显示当前时间</p><p>date +%Y 显示当前年份</p><p>date +% m 显示当前月份</p><p>date +%d 显示当前是哪一天</p><p>date “+%Y-%m-%d-%H-%M-%S” 显示年月日时分秒</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date</span>2019年 10月 07日 星期一 21:02:54 CST<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date +%Y</span>2019<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date "+%Y-%m-%d-%H-%M-%S"</span>2019-10-07-21-03-49</code></pre><p>设置系统时间</p><pre class=" language-bash"><code class="language-bash"><span class="token function">date</span> -s <span class="token string">"2018-10-10 11:20:20"</span></code></pre></li><li><p><strong>cal查看日历</strong></p><p>cal [选项] 显示本月历</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cal</span></code></pre><p>显示2020年的整年日历</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cal 2020</span></code></pre></li></ul><h6 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h6><ul><li><p><strong>find指令</strong></p><p>find [搜索目录] [选项]</p><p>-name 指定文件名查找</p><p>-user 指定用户名所有文件</p><p>-size 指定文件的大小(+20M查找&gt;20M的文件)[+n 大于 -n 小于 n 等于] [或者20K ]</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find /home -name hello.txt</span>/home/hello.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find /home -user zzy</span></code></pre><p>查找以txt结尾的文件（尽量不在本目录使用）</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# find / -name *.txt</code></pre></li><li><p><strong>locate指令</strong></p><p>快速定位文件路径（基于locate的数据库实现快速定位）</p><p>locate 搜索文件</p><p>注意：使用locate之前，必须先使用updatedb指令创建locate数据库</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># updatedb</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># locate hello.txt</span>/home/hello.txt</code></pre></li><li><p><strong>grep指令和管道符号|</strong></p><p>grep过滤查找 </p><p>管道符|：表示将前一个命令的处理结果输出传递给后面的命令处理。</p><p>grep [选项] 查找内容 源文件</p><p>-n 显示匹配行及行号</p><p>-i 忽略字母大小写</p><p>案例:在hello.txt查找hello所在行，并显示行号</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grep -n hello /home hello.txt</span>hello.txt:66:hello<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat hello.txt | grep -n hello</span>66:hello</code></pre></li></ul><h6 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h6><ul><li><p><strong>gzip和gunzip指令</strong></p><p>gzip 文件 [压缩文件]</p><p>gunzip 文件.gz [解压缩文件]</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># gzip hello.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a.txt  hello.txt.gz  mycal  zzy<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># gunzip hello.txt.gz</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a.txt  hello.txt  mycal  zzy</code></pre><p>当使用gzip进行压缩文件后，不会保留源文件</p></li><li><p><strong>zip和unzip指令</strong></p><p>zip [选项] xxx.zip 将要压缩的内容 [压缩文件或者命令]</p><p>-r 递归压缩</p><p>压缩home目录下的所有文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># zip -r mypack.zip /home/</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a.txt  hello.txt  mycal  mypack.zip  zzy</code></pre><p>unzip [选项] xxx.zip</p><p>将mypack.zip解压到/opt/tmp目录</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># unzip -d /opt/tmp mypack.zip</span><span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>home</code></pre></li><li><p><strong>tar指令</strong></p><p>基本语法：tar [选项] xxx.tar.gz 打包的内容 [打包目录，压缩后的文件格式为.tar.gz]</p><p>-c:产生.tar打包文件</p><p>-v:显示详细信息</p><p>-f:指定压缩后的文件名</p><p>-z:打包同时压缩</p><p>-x:解包.tar文件</p><p>将/home/a1.txt,a2.txt压缩成a.tar.gz</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zcvf a.tar.gz a1.txt a2.txt</span>a1.txta2.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a1.txt  a2.txt  a.tar.gz  a.txt  hello.txt  mycal  zzy</code></pre><p>将/home的文件压缩成myhome.tar.gz</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zcvf myhome.tar.gz /home/</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a1.txt  a2.txt  a.tar.gz  a.txt  hello.txt  mycal  myhome.tar.gz  zzy</code></pre><p>将a.tar.gz解压到当前目录</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf a.tar.gz </span>a1.txta2.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a1.txt  a2.txt  a.tar.gz  a.txt  hello.txt  mycal  myhome.tar.gz  zzy</code></pre><p>将myhome.tar.gz解压到/opt/tmp目录下（指定的解压缩路径必须存在）</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf myhome.tar.gz -C /opt/tmp/</span></code></pre></li></ul><h5 id="6-组管理和权限管理"><a href="#6-组管理和权限管理" class="headerlink" title="6.组管理和权限管理"></a>6.组管理和权限管理</h5><h6 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h6><ul><li><p>linux组的基本介绍</p><p>在Linux中的每个用户必须属于一个组，不能独立于组外。在Linux在每个文件有所有者，所在组，其他组的概念</p><p>1）所有者</p><p>2）所在组</p><p>3）其他组</p><p>4）改变用户所在组</p></li><li><p><strong>所有者</strong></p><p>文件的创建者</p><p>查看文件的所有者</p><p>1）指令：ls -ahl</p><pre class=" language-bash"><code class="language-bash">drwx------. 26 zzy  zzy  4.0K 10月  8 22:46 zzy</code></pre><p>zzy 所有者   zzy 所属组</p><p>修改文件的所有者：</p><p>chown 用户名 文件名</p><p>使用root创建一个apple.txt，然后改变所有者为zzy</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch apple.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 120-rw-r--r--.  1 root root      0 10月  8 23:02 apple.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown zzy apple.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 120-rw-r--r--.  1 zzy  root      0 10月  8 23:02 apple.txt</code></pre></li><li><p><strong>组的创建</strong></p><p>groupadd 组名</p><p>创建animal组，用户fox，将fox放到animal组</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd animal</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g animal fox</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id fox</span>uid<span class="token operator">=</span>504<span class="token punctuation">(</span>fox<span class="token punctuation">)</span> gid<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span> 组<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span></code></pre></li><li><p><strong>所在组</strong></p><p>某个用户创建了一个文件后，默认这个文件的所在组就是该用户所在组</p><p>修改文件的所在组</p><p>chgrp 组名 文件名</p><p>使用root创建bb.txt文件，查看此文件的所在组，然后修改此文件的所在组到animal组</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch bb.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-r--r--.  1 root root        0 10月  8 23:12 bb.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp animal bb.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-r--r--.  1 root animal      0 10月  8 23:12 bb.txt</code></pre></li><li><p><strong>改变用户所在组</strong></p><p>添加用户时指定用户所在组：useradd -g 组名 用户名</p><p>或者使用root用户修改：usermod -g  组名 用户名</p><p>新建monster组，修改fox用户所在组为monster</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd monster</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id fox</span>uid<span class="token operator">=</span>504<span class="token punctuation">(</span>fox<span class="token punctuation">)</span> gid<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span> 组<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># usermod -g monster fox</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id fox</span>uid<span class="token operator">=</span>504<span class="token punctuation">(</span>fox<span class="token punctuation">)</span> gid<span class="token operator">=</span>505<span class="token punctuation">(</span>monster<span class="token punctuation">)</span> 组<span class="token operator">=</span>505<span class="token punctuation">(</span>monster<span class="token punctuation">)</span></code></pre></li></ul><h6 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h6><ul><li><p><strong>权限的基本介绍</strong></p><pre class=" language-bash"><code class="language-bash">-rw-r--r--.  1 root root      263 10月  6 20:56 a.txt</code></pre><p>rw-表示文件所有者的权限–读写</p><p>r–表示文件所在组的用户的权限 –只读</p><p>r–文件的其他组的权限 –只读</p><p>1 –如果是文件，表示硬链接，如果是目录，表示字母的个数</p><p>root –所有者</p><p>root–所属组</p><p>263–文件大小，如果是目录则显示4096</p><p>10月  6 20:56–文件最后的修改时间</p><p>0-9位说明：</p><p>1）第0位确定文件夹类型[- (普通文件) ,d（目录）,l（软链接文件）,c（字符设备）,b(块文件，硬盘)]</p><p>2）第1-3位确定所有者—user</p><p>3）第4-6位确定所属组—-group</p><p>4）第7-9位确定其他用户用于该文件的权限–other</p></li><li><p><strong>chmod</strong></p><p>修改文件或者目录的权限</p><p>第一种方式:+，=，-</p><p>u:所有者，g:所有组，o:其他人,a:所有人</p><p>1）chmod u=rwx,g=rx,o=x 文件目录名 </p><p>2）chmod o+w 文件目录名</p><p>3）chmod a-x 文件目录名 </p><p>案例：</p><p>给abc文件的所有者读写执行的权限，给所在组读执行的权限，给其他组读执行的权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-r--r--.  1 root root        0 10月  9 14:40 abc<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod u=rwx,g=rw,o=rx abc</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rwxrw-r-x.  1 root root        0 10月  9 14:40 abc</code></pre><p>给abc文件的所有者除去执行的权限，增加组执行的权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod u-x,g+x abc</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-rwxr-x.  1 root root        0 10月  9 14:40 abc</code></pre><p>给abc文件的所有用户添加执行的权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod a+x abc</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rwxrwxr-x.  1 root root        0 10月  9 14:40 abc</code></pre><p>第二种方式：通过数字变更权限</p><p>r=4 w=2 x=1 rwx=4+2+1=7</p><p>chmod u=rwx,g=rx,o=x 文件目录名</p><p>相当于 chmod 751 文件目录名</p><p>案例：将abc.txt文件的权限修改成rwxr-xr-x ，使用数字方式实现</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 12-rw-r--r--.  1 root root      0 10月  9 19:06 abc.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 755 abc.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 12-rwxr-xr-x.  1 root root      0 10月  9 19:06 abc.txt</code></pre></li><li><p><strong>修改文件所有者</strong></p><p>chown newowner file 改变文件的所有者</p><p>chown newownergroup file 改变用户的所有者和所有组</p><p>-R 如果是目录，则使其下的所有子文件或目录递归生效</p><p>案例：将abc.txt文件的所有者修改位fox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown fox abc.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 12-rwxr-xr-x.  1 fox  root      0 10月  9 19:06 abc.txt</code></pre><p>将kkk目录所有文件或目录的所有者改为fox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown -R fox kkk</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 16drwxr-xr-x.  2 fox  root   4096 10月  9 19:15 kkk</code></pre></li><li><p><strong>改变文件的所在组</strong></p><p>charp newgroup file 改变文件的所有组</p><p>将abc.txt所属组改为animal</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp animal abc.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 16-rwxr-xr-x.  1 fox  animal    0 10月  9 19:06 abc.txt</code></pre><p>将kkk下所有文件和目录的所属组改为fox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp -R animal kkk</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 16drwxr-xr-x.  2 fox  animal 4096 10月  9 19:15 kkk</code></pre></li></ul><h6 id="最佳实践—警察和土匪游戏"><a href="#最佳实践—警察和土匪游戏" class="headerlink" title="最佳实践—警察和土匪游戏"></a>最佳实践—警察和土匪游戏</h6><p>​    两个组：ploice(警察),bankit(土匪)</p><p>​    警察用户：jack，jerry</p><p>​    土匪用户：xh,xq</p><p>​    要求：</p><p>​    创建组</p><pre class=" language-bash"><code class="language-bash">root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd ploice</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd bankit</span></code></pre><p>​    创建用户并分组</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g police jack</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd jerry</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp -R police jerry</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 24drwx------.  4 jack  police 4096 10月  9 19:49 jackdrwx------.  4 jerry police 4096 10月  9 19:49 jerry<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g bankit xh</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g bankit xq</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 32drwx------.  4 xh    bankit 4096 10月  9 19:55 xhdrwx------.  4 xq    bankit 4096 10月  9 19:55 xq</code></pre><p>​    jack创建一个文件，自己可以读写，本组人可以读，其他组没有任何权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ <span class="token function">touch</span> jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ ll总用量 0-rw-r--r--. 1 jack police 0 10月  9 19:56 jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 740 jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ ll总用量 0-rwxr-----. 1 jack police 0 10月  9 19:56 jackfile</code></pre><p>​    jack修改该文件，让其他组可以读，本组人可以读写</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 764 jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ ll总用量 0-rwxrw-r--. 1 jack police 0 10月  9 19:56 jackfile</code></pre><p>xh投靠警察，看看是否可以读写</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp -R police xh</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 32drwx------.  4 xh    police 4096 10月  9 19:55 xh<span class="token punctuation">[</span>xh@localhost home<span class="token punctuation">]</span>$ <span class="token function">cd</span> jackbash: cd: jack: 权限不够<span class="token punctuation">[</span>jack@localhost home<span class="token punctuation">]</span>$ <span class="token function">chmod</span> g<span class="token operator">=</span>rx jack<span class="token punctuation">[</span>jack@localhost home<span class="token punctuation">]</span>$ ll总用量 32drwxr-x---.  4 jack  police 4096 10月  9 20:04 jack<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># usermod -g police xh</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id xh</span>uid<span class="token operator">=</span>507<span class="token punctuation">(</span>xh<span class="token punctuation">)</span> gid<span class="token operator">=</span>501<span class="token punctuation">(</span>police<span class="token punctuation">)</span> 组<span class="token operator">=</span>501<span class="token punctuation">(</span>police<span class="token punctuation">)</span><span class="token punctuation">[</span>xh@localhost home<span class="token punctuation">]</span>$ <span class="token function">cd</span> jack<span class="token punctuation">[</span>xh@localhost jack<span class="token punctuation">]</span>$ ll总用量 0-rwxrw-r--. 1 jack police 0 10月  9 19:56 jackfile<span class="token punctuation">[</span>xh@localhost jack<span class="token punctuation">]</span>$ vim jackfile</code></pre><p><strong>注意文件所在组的修改和用户所在组的修改所用命令不同</strong></p><p>注意修改jack文件的权限管理后，重新登录xh账号</p><p>练习：</p><img src="http://116.62.203.42/linuximg/11.png" alt="1570624373363" style="zoom:80%;"><h5 id="7-crond定时调度"><a href="#7-crond定时调度" class="headerlink" title="7.crond定时调度"></a>7.crond定时调度</h5><ul><li><p><strong>crontab任务调度</strong></p><p>是指系统在某个时间执行的特定的命令或程序</p><p>crontab [选项]</p><p>-e 编辑crond任务调度</p><p>-l 查询crontab任务</p><p>-r 删除当前用户的所有crontab任务</p><p>案例：</p><p>每分钟执行 [root@localhost home]# ls -l /home&gt;&gt;/home/to.txt指令</p><p>简单的任务不用写脚本，可以在crontab中加入任务即可，对于比较复杂的任务，需要写脚本（shell编程）来完成</p><p>crontab -e </p><p>*/1 * * * * ls -l /home &gt;&gt; /home/to.txt</p><p>wq退出</p><p>参数说明：</p><p>第一个* 一小时的第几分钟，范围 0-59</p><p>第二个* 一天的第几小时，范围 0-23</p><p>第三个* 一月的第几天，范围 1-31</p><p>第四个* 一年的第几月，范围 1-12</p><p>第五个* 一周的星期几，范围 0-7（0和7都代表星期日）</p><p>特殊符号的说明：</p><p>*代表任何时间，比如第一个 * 就代表一小时每分钟都执行一次</p><p>,代表不连续的时间，比如 0 8,12,16 * * * 命令，就代表在每天的8点0分，12点0分,16点0分都执行一次命令</p><p>-代表连续的时间范围。比如 0 5 * * 1-6 命令，带在周一到周六的凌晨5点0分执行命令</p><p>*/n 代表每隔多久执行一次，比如:   */10 * * * * 命令，代表每隔10分钟执行一次命令 </p><p>练习：</p><p>1）每隔1分钟，就将当前日期信息，追加到/tmp/mydate文件中</p><p>​    编写一个文件/home/mytask1.sh</p><p>​        vim mytask1.sh</p><p>​        date &gt;&gt; /tmp/date</p><p>​        给mytask1.sh一个可执行权限 chmod 744 mytask1.sh</p><p>​        crontab -e</p><p>​        */1 * * * *  /home/mytask1.sh</p><p>2)每隔一分钟，将当前日期和日历都追加到/home/mycal文件中</p><p>类似1）修改 date &gt;&gt; /home/mycal 为 date &gt;&gt;/home/mycal </p><p>cal &gt;&gt; /home/mycal</p></li></ul><h5 id="8-磁盘分区，挂载"><a href="#8-磁盘分区，挂载" class="headerlink" title="8.磁盘分区，挂载"></a>8.磁盘分区，挂载</h5><ul><li><p><strong>分区的基础知识</strong></p><p>分区的方式：</p><p>1）mbr分区</p><p>最多支持四个分区</p><p>系统只能安装在主分区</p><p>扩展分区要占一个主分区</p><p>MBR最大只支持2TB,但拥有好的兼容性</p><p>2）gtp分区</p><p>支持无限多的分区（windows下做多支持128个分区）</p><p>最大支持18EB的大容量（EB=1204PB,PB=1024TB）</p><p>windows7 64位以后支持gtp</p></li><li><p>分区基础知识</p><p>Windows下的磁盘分区：</p><img src="http://116.62.203.42/linuximg/8.png" alt="1570691965777" style="zoom:80%;"></li><li><p>Linux分区</p><p>原理介绍：</p><p>Linux来说无论有几个分区，分给哪一个目录使用，它归根结底就只有一个目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分</p><p>Linux采用了一种叫做载入的处理方法，它的整个文件系统包含了一整套的文件和目录，且将一个分区和一个目录联系起来，这时载入的一个分区使它的存储空间在一个目录下获得</p><p>示意图：</p><img src="http://116.62.203.42/linuximg/9.png" alt="1570692250711" style="zoom:80%;"></li><li><p><strong>查看分区和挂载命令：lsblk -f</strong></p><img src="http://116.62.203.42/linuximg/10.png" alt="1570692929383" style="zoom:80%;"></li><li><p><strong>挂载的经典案例</strong></p><p>新增一块硬盘，挂载到/home/newdisk目录</p><p>1）虚拟机添加硬盘</p><p>2）分区 fdisk/dev/sdb</p><p>3）格式化 mkfs -t ext4 /dev/sdb1</p><p>4）挂载 创建目录/home/newdisk   挂载 mount /dev/sdb1 /home/newdisk</p><p>5）设置可以自动挂载(已经挂载，重启机器后仍然可以挂载到 /home/newdisk)</p><p>vim /etc/fstab</p><p>/dev/sdb1  /home/newdisk ext4 defaults 0 0</p><p>mount -a </p><p>reboot</p></li><li><p>具体步骤</p><p>①在虚拟机菜单中，选择设置，设别列表添加硬盘，下一步，修改磁盘大小，完成后重启系统才能识别</p><p>②分区命令：fdisk /dev/sdb</p><p>开始对/sdb分区</p><p>m–显示命令列表</p><p>p–显示磁盘分区 同 fdisk -l</p><p>n –新增分区</p><p>d –删除分区</p><p>w –写入并退出</p><p>说明：开始分区后，输入n，新增分区，然后选择p,分区类型位主分区，两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q</p><p>③格式化磁盘</p><p>分区命令：mkfs -t ext4 /dev/sdb1</p><p>其中ext4是分区类型</p><p>④挂载：将一个分区与一个目录联系起来</p><p>mount 设备名称 挂载目录 </p><p>mount /dev/sdb1 /home/newdisk</p><p>umount 设备名称或挂载目录</p><p>umount /dev/sdb1 或者 umount /home/newdisk</p><p>⑤永久挂载</p><p>通过修改/etc/fstab实现挂载</p><p>编辑完成后</p><p>[root@localhost home]# vim /etc/fstab<br>[root@localhost home]# mount -a</p><p>添加完成后，执行mount -a 即可生效</p></li></ul><h6 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h6><ul><li><p><strong>查询系统整体磁盘的使用情况</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem                    Size  Used Avail Use% Mounted on/dev/mapper/VolGroup-lv_root   18G  5.3G   12G  32% /tmpfs                         764M   76K  764M   1% /dev/shm/dev/sda1                     485M   33M  427M   8% /boot/dev/sdb1                     2.0G   35M  1.9G   2% /home/newdisk<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -lh</span></code></pre></li><li><p>查询指定目录的磁盘占用情况</p><p>du -h /目录</p><p>默认为当前目录</p><p>-s 指定目录占用大小汇总</p><p>-h 带计量单位</p><p>-a 含文件</p><p>–max-depth=1 子目录深度</p><p>-c 列出明细的同时，增加汇总值</p><p>应用实例：</p><p>查询/opt目录的磁盘占用情况，深度为1</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># du -ach --max-depth=1 /opt</span>86M    /opt/gcc-4.9.2.tar.bz21.5M    /opt/tmp4.0K    /opt/rh743M    /opt/gcc-4.9.2830M    /opt830M    总用量</code></pre></li><li><p><strong>实用指令查询</strong></p><p>统计/home文件夹下文件的个数</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /home | grep "^-" | wc -l</span>3</code></pre><p>统计/home文件夹下目录的个数</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll /home | grep "^d" | wc -l</span>8</code></pre><p>统计/home文件夹下文件的个数，包括子文件里的</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -lR /home | grep "^-" | wc -l</span>5</code></pre><p>统计/home文件夹下目录的个数，包括子文件夹里的</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -lR /home | grep "^d" | wc -l</span>17</code></pre><p>以树形显示目录结构(可能需要安装)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install tree</span></code></pre></li></ul><h5 id="9-网络配置"><a href="#9-网络配置" class="headerlink" title="9.网络配置"></a>9.网络配置</h5><ul><li><p>自动获取</p><p>网络连接—&gt;自动连接—&gt;应用，此方式获取的IP地址可能会变化，所以不适合做服务器</p></li><li><p>指定特定的IP</p><p>说明：直接修改配置文件来指定ip,并可以连接到外网，编辑 vi /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>配置IP地址为静态的，IP地址为192.168.145.133</p><p>没有则新增</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span>.ONBOOT<span class="token operator">=</span>yesBOOTPROTO<span class="token operator">=</span>static//设置静态ipIPADDR<span class="token operator">=</span>192.168.145.133 //IP地址GATEWAY<span class="token operator">=</span>192.168.145.2 //网关，虚拟网卡的地址DNS1<span class="token operator">=</span>192.168.145.2 //dns地址和网关相同就行<span class="token punctuation">..</span>.</code></pre><p>保存退出重启服务(或系统)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service network restart</span></code></pre><p>若为拷贝的系统，可能会出现错误，这是因为网卡地址不同</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service network restart</span>关闭环回接口：                                             <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>弹出环回接口：                                             <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>弹出界面 eth0： 错误：没有找到合适的设备：没有找到可用于连接 <span class="token string">'System eth0'</span> 的设备。</code></pre><p>解决方法：</p><p>首先查看现在使用的网卡信息(就是eth?)，例如我的就是eth3</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig</span>eth3      Link encap:Ethernet  HWaddr 00:0C:29:4C:5C:7B            inet addr:192.168.145.133  Bcast:192.168.145.255  Mask:255.255.255.0          inet6 addr: fe80::20c:29ff:fe4c:5c7b/64 Scope:Link<span class="token punctuation">..</span>.</code></pre><p>接着，修改MAC地址</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vi /etc/udev/rules.d/70-persistent-net.rules</span><span class="token comment" spellcheck="true"># PCI device 0x1022:0x2000 (vmxnet)</span>SUBSYSTEM<span class="token operator">==</span><span class="token string">"net"</span>, ACTION<span class="token operator">==</span><span class="token string">"add"</span>, DRIVERS<span class="token operator">==</span><span class="token string">"?*"</span>, ATTR<span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token operator">==</span><span class="token string">"00:0c:29:4c:5c:7b"</span>, ATTR<span class="token punctuation">{</span>type<span class="token punctuation">}</span><span class="token operator">==</span><span class="token string">"1"</span>, KERNEL<span class="token operator">==</span><span class="token string">"eth*"</span>, NAME<span class="token operator">=</span><span class="token string">"eth3"</span></code></pre><p>将eth3直接改为eth0，并且复制00:0c:29:4c:5c:7b网卡地址</p><p>然后配置静态IP</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><span class="token punctuation">..</span>.HWADDR<span class="token operator">=</span>00:0c:29:4c:5c:7b  //改为刚才复制的网卡地址<span class="token punctuation">..</span>.</code></pre><p>退出保存，重启服务(或系统)即可。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service network restart</span></code></pre></li></ul><h5 id="10-进程管理"><a href="#10-进程管理" class="headerlink" title="10.进程管理"></a>10.进程管理</h5><h6 id="进程简介"><a href="#进程简介" class="headerlink" title="进程简介"></a>进程简介</h6><p>linux中，每个进程分配一个ID号</p><p>每个进程有两种存在方式，前台与后台，所谓前台就是用户目前的屏幕上可以进行操作的。后台则是在屏幕上无法看到，通常使用后台方式执行</p><p>系统服务一般在后台运行，直到关机结束。</p><ul><li><p>显示系统执行的进程</p><p>ps 命令用来查看目前系统中，有哪些正在执行，以及他们的执行情况</p><p>ps -aux</p><p>ps -a 显示当前终端的所有进程信息</p><p>ps -u 以用户的格式显示进程信息</p><p>ps -x显示后台进程运行的参数</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | more</span>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot         1  0.0  0.0   2900  1424 ?        Ss   19:27   0:01 /sbin/initroot         2  0.0  0.0      0     0 ?        S    19:27   0:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>root         3  0.0  0.0      0     0 ?        S    19:27   0:00 <span class="token punctuation">[</span>migration/0<span class="token punctuation">]</span></code></pre><p>分别为：用户-进程id-占用内存-占用虚拟内存- 使用物理内存 -使用终端 -运行状态(s:休眠，r:运行) - 启动时间 -占用cpu总时间 -进程执行时的命令行 </p><p>和管道符一起使用，进行过滤</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | grep sshd</span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      2006  0.0  0.0   9836  1012 ?        Ss   19:27   0:00 /usr/sbin/sshdroot      3881  0.0  0.2  12780  3428 ?        Ss   19:52   0:00 sshd: root@pts/1 root      4094  0.0  0.0   5984   732 pts/1    S+   20:18   0:00 <span class="token function">grep</span> sshd</code></pre><p>查看父进程</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef </span>UID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 19:27 ?        00:00:01 /sbin/init root         2     0  0 19:27 ?        00:00:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>root         3     2  0 19:27 ?        00:00:00 <span class="token punctuation">[</span>migration/0<span class="token punctuation">]</span></code></pre><p>PPID为PID的父进程</p><p>比如：查看sshd的父进程</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef | grep sshd</span>root      2006     1  0 19:27 ?        00:00:00 /usr/sbin/sshd</code></pre></li></ul><h6 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h6><p>kill [选项] 进程号 //通过进程号杀死进程</p><p>killall 进程名称 //通过进程名杀死进程 ，支持通配符</p><p>常用选项 </p><p>-9 :表示强迫进程立即停止</p><p>实践：</p><p>①剔除非法用户登录</p><p>查看当前远程登录的用户</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | grep sshd </span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      2006  0.0  0.0   9836  1012 ?        Ss   19:27   0:00 /usr/sbin/sshdroot      3881  0.0  0.2  12780  3428 ?        Ss   19:52   0:00 sshd: root@pts/1 root      4213  0.1  0.2  11888  3316 ?        Ss   20:31   0:00 sshd: zzy <span class="token punctuation">[</span>priv<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill 4217</span>You have new mail <span class="token keyword">in</span> /var/spool/mail/root</code></pre><p>②终止远程登录服务sshd,在适当的时候再启用</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | grep sshd </span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      2006  0.0  0.0   9836  1012 ?        Ss   19:27   0:00 /usr/sbin/sshd<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill 2006</span></code></pre><p>启动sshd服务</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /etc/init.d/sshd start</span></code></pre><p>③终止多个gedit编辑器，killall (通过进程名来    终止进程)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># killall gedit</span></code></pre><p>④强制杀掉一个终端(/bin/bash 代表一个终端)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux |grep bash</span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      3886  0.0  0.1   6876  1684 pts/1    Ss+  19:52   0:00 -bashroot      7959  0.0  0.1   6876  1648 pts/0    Ss   20:44   0:00 /bin/bashroot      7971  0.0  0.1   6876  1696 pts/2    Ss+  20:44   0:00 /bin/bash<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@localhost 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill -9 7959</span></code></pre><ul><li><p>pstree 查看进程树</p><p>pstree [选项] </p><p>pstree -p :显示进程的PID</p><p>pstree -u :显示进程的所属用户</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pstree -u</span></code></pre></li></ul><h6 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h6><p>基本介绍：service的本质就是进程，但是运行在后台，通常都会监听某个端口，等待其他程序的请求，像 mysql,sshd，防火墙等，又称为守护进程。</p><p>service 管理指令:</p><p>service 服务名 start | stop | restart | reload | status</p><p>在redhat7.0后，不再使用service,而是systemctl</p><p>使用案例：</p><p>查看当前防火墙的状况，关闭和重启防火墙</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables status</span>表格：filter<span class="token punctuation">..</span>.          4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22 </code></pre><p>关闭防火墙：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables stop</span>iptables：将链设置为政策 ACCEPT：filter                    <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>iptables：清除防火墙规则：                                 <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>iptables：正在卸载模块：                                   <span class="token punctuation">[</span>确定<span class="token punctuation">]</span></code></pre><p>windows dos下 的telnet ip地址 端口号 来查看端口是否打开</p><p>telnet 192.168.145.133 22</p><p>注意：service 命令使用后立即生效，但只是临时生效，当重启系统后，回归到以前的服务设置 </p><p>使用chkconfig才能设置某个服务自启动或关闭永久生效。</p><p>查看服务名:</p><p>setup 查看</p><p>/etc/init.d/服务名称</p><ul><li><p>服务的运行级别</p><p>vi /etc/inittab</p><p>0—6</p></li><li><p>chkconfig命令(重启后生效)</p><p>通过chkconfig命令可以给每个服务的各个运行级别设置自启动/关闭</p><p>基本语法：</p><p>chkconfig -list|grep xxx 查看服务</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig --list | grep sshd</span>sshd               0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</code></pre><p>chkconfig 服务名 –list</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig iptables --list</span>iptables           0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</code></pre><p>chkconfig –level 5 服务名 on/off</p><p>将sshd服务再运行级别为5情况下，不自启动</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig --level 5 sshd off</span></code></pre></li></ul><h6 id="动态监控"><a href="#动态监控" class="headerlink" title="动态监控"></a>动态监控</h6><ul><li><p>查看系统的网络情况 netstat</p><p>基本语法：</p><p>netstat [选项]</p><p>-an ：按照一定的顺序排列输出</p><p>-p:显示那个进程在调用</p><p>netstat -anp</p><p>案例：</p><p>查看系统所有的网络服务</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># netstat -anp | more</span>Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span>Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   tcp        0      0 0.0.0.0:43904               0.0.0.0:*                   LISTEN      1783/rpc.statd   </code></pre><p>查看服务名为sshd的服务信息</p><pre><code>[root@localhost home]# netstat -anp | grep sshdtcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      2006/sshd           tcp        0      0 127.0.0.1:6011              0.0.0.0:*                   LISTEN      3881/sshd           tcp        0     64 192.168.145.133:22          192.168.145.1:52686         ESTABLISHED 3881/sshd           tcp        0      0 :::22                       :::*                        LISTEN      2006/sshd           tcp        0      0 ::1:6011                    :::*                        LISTEN      3881/sshd    </code></pre></li></ul><ul><li><p>top命令</p><p>top与ps命令类似，都用来显示正在执行的进程。不同之处，top在执行一段时间可以更新正在运行的进程</p><p>基本语法：</p><p>top [选项]</p><p>-d 秒数 指定top命令隔几秒更新，默认3秒</p><p>-i 使top不显示任何闲置或者僵死进程</p><p>-p 通过指定监控进程id来仅仅监控某个进程的状态</p><p>交互操作说明</p><p>P 以cpu使用率排序，默认</p><p>M 以内存的使用率排序</p><p>N 以PID排序</p><p>q 退出top</p><p>案例:</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># top</span><span class="token function">top</span> - 21:41:35 up  2:14,  3 users,  load average: 0.04, 0.02, 0.00Tasks: 181 total,   1 running, 180 sleeping,   0 stopped,   0 zombieCpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%stMem:   1562944k total,   693188k used,   869756k free,    42252k buffersSwap:  2064376k total,        0k used,  2064376k free,   423176k cached </code></pre><p>top - 21:41:35(当前时间) up  2:14(系统运行时间),  3 users(当前系统用户数量),  load average: 0.04, 0.02, 0.00（负载均衡 三个树的和&lt;0.7 运行正常）</p><p>按q退出</p><p>①监视特定的用户</p><p>输入 top 回车,输入 u 回车，再输入用户名 ，即可。</p><p>②终止指定的进程</p><p>输入 top 回车,输入 k回车，再输入要结束的进程id号 ，即可。</p><p>③指定系统状态更新时间（每隔10s 自动更新，默认3s）</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># top -d 5</span></code></pre></li></ul><h5 id="11-RPM包管理"><a href="#11-RPM包管理" class="headerlink" title="11.RPM包管理"></a>11.RPM包管理</h5><ul><li><p>RPM 介绍</p><p>红帽包管理器（linux系统通用），类似于Windows 的setup.exe</p></li><li><p>rpm包的查询指令</p><p>查询已安装的rpm列表 rpm -qa | grep xx（软件名）</p><p>查询是否安装了firefox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qa | grep firefox</span>firefox-17.0.10-1.el6_4.i686</code></pre><p>rpm -qa                 查询所安装的所有rpm软件包</p><p>rpm -qa | more      分页显示</p><p>rpm -qa | grep X</p><p>rpm -q 软件包名      查询软件包是否安装</p><p>rpm -qi 软件包名      查询软件包信息</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qi firefox</span>Name        <span class="token keyword">:</span> firefox                      Relocations: <span class="token punctuation">(</span>not relocatable<span class="token punctuation">)</span>Version     <span class="token keyword">:</span> 17.0.10                           Vendor: Red Hat, Inc.Release     <span class="token keyword">:</span> 1.el6_4                       Build Date: 2013年10月23日 星期三 21时15分16秒</code></pre><p>rpm -qi file </p><p>rpm -ql 软件包名     查询软件包中的文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -ql firefox</span>/usr/bin/firefox/usr/lib/firefox/usr/lib/firefox/LICENSE/usr/lib/firefox/application.ini</code></pre><p>rpm -qf 文件全路径名     查询文件所属的软件包</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qf /etc/passwd </span>setup-2.8.14-20.el6_4.1.noarch</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qf /root/install.log</span><span class="token function">file</span> /root/install.log is not owned by any package</code></pre></li><li><p>卸载rpm包</p><p>rpm -e rpm包的名称</p><p>例：</p><p>删除firefox 软件包</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -e firefox</span></code></pre><p>强制删除</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -e --nodeps foo</span></code></pre></li><li><p>安装rpm包</p><p>rpm -ivh rpm包的全路径</p><p>i install 安装</p><p>v verbose 提示</p><p>h hash 进度条</p><p>安装firefox</p><p>找到firefox的安装包。先挂载到Linux系统iso文件，然后到/media/下去找rpm.</p><p>记住要连接镜像文件，然后redhat6桌面会多一个光驱。</p><p>切换到Packages目录，可查看到Centos系统的所有rpm包，找到firefox，复制到/opt/目录</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /media</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd CentOS_6.5_Final/</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd Packages/</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp firefox-17.0.10-1.el6.centos.i686.rpm /opt/</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/</span><span class="token punctuation">[</span>root@localhost opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>firefox-17.0.10-1.el6.centos.i686.rpm  gcc-4.9.2  gcc-4.9.2.tar.bz2  rh  tmp<span class="token punctuation">[</span>root@localhost opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -ivh firefox-17.0.10-1.el6.centos.i686.rpm </span>Preparing<span class="token punctuation">..</span>.                <span class="token comment" spellcheck="true">########################################### [100%]</span></code></pre></li></ul><h5 id="12-yum"><a href="#12-yum" class="headerlink" title="12.yum"></a>12.yum</h5><ul><li><p>介绍</p><p>yum是一个shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且进行安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。使用yum的前提是要联网</p></li><li><p>基本指令</p><p>查询yum服务器是否有需要安装的软件</p><p>yum list | grep xx 软件列表</p><p>安装指定的yum包</p><p>yum install xxx 下载安装</p><p>使用yum安装firefox</p><p>先查看yum服务器是否有firefox的rpm包</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum list | grep firefox</span>firefox.i686                                17.0.10-1.el6.centos        installedfirefox.i686                                68.2.0-4.el6.centos         updates </code></pre><p>安装（安装前先卸载）默认安装最新版本</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -e firefox</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install firefox</span>已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * rpmforge: ftp.riken.jp解决依赖关系<span class="token punctuation">..</span>.作为依赖被升级:  nspr.i686 0:4.21.0-1.el6_10                     nss.i686 0:3.44.0-7.el6_10               nss-softokn.i686 0:3.44.0-5.el6_10        nss-softokn-freebl.i686 0:3.44.0-5.el6_10       nss-sysinit.i686 0:3.44.0-7.el6_10       nss-tools.i686 0:3.44.0-7.el6_10          nss-util.i686 0:3.44.0-1.el6_10                完毕！</code></pre></li><li></li><li><p>5</p></li><li><p>55</p></li><li><p>55</p></li><li><p>55</p></li><li><p>5</p></li><li><p>55</p></li><li><p>5</p></li><li><p>55</p></li><li><p>5</p></li><li><p>5</p></li><li><p>55</p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux Redhat 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Redhat 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 编程</title>
      <link href="/2019/11/03/shell/"/>
      <url>/2019/11/03/shell/</url>
      
        <content type="html"><![CDATA[<h5 id="1-Shell简介"><a href="#1-Shell简介" class="headerlink" title="1.Shell简介"></a>1.Shell简介</h5><ul><li><p>shell的用途</p><p>Linux运维工程师通过shell程序对服务器进行集群管理。</p><p>JavaEE和Python程序员编写Shell脚本对服务器进行维护，比如定时备份数据库</p><p>等等…</p></li><li><p>Shell是什么？</p><p>Shell是一个命令行解释器，它为用户提供了一个Linux内核发送请求以便运行程序的界面系统级程序，用户可以使用Shell来启动，挂起，停止甚至是编写一些程序。</p><p>shell—-&gt;内核—-&gt;硬件</p></li><li><p>脚本格式要求</p><p>脚本以#!/bin/bash开头</p><p>脚本需要有可执行权限</p></li><li><p>shell快速入门</p><p>创建一个shell脚本，输出hello world！</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim hello.sh</span></code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bashecho "hello world!"</code></pre></li><li><p>执行方式</p><p>通常使用方式1</p><p>方式1 (输入脚本的绝对路径或者相对路径) </p><p>​    首先赋予hello.sh脚本的+x权限</p><p>​    执行脚本</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 744 hello.sh</span><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./hello.sh</span>hello world<span class="token operator">!</span><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /root/shelltest/hello.sh</span>hello world<span class="token operator">!</span></code></pre><p>方式2 (sh+脚本)</p><p>​    不赋予脚本+x权限，直接执行</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sh ./hello.sh</span>hello world<span class="token operator">!</span></code></pre></li></ul><h5 id="2-shell变量"><a href="#2-shell变量" class="headerlink" title="2.shell变量"></a>2.shell变量</h5><ul><li><p>介绍</p><p>分为系统变量和用户自定义变量</p><p>系统变量：$HOME ,$PATH,$USER等</p><p>echo $HOME</p><p>显示shell中所有变量 set</p></li><li><p>变量的定义</p><p>变量=值</p><p>撤销变量:unset 变量</p><p>声明静态变量 readonly 变量 </p><p>例：</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#echo "hello world!"A=100echo "自定义变量与销毁"echo "A= $A"unset A echo "A="echo "声明静态变量"readonly B=111echo "B=$B"#unset B #报错，静态变量不能unset</code></pre></li><li><p>变量定义的规则</p><p>变量名称可以由字母，数字或者下划线组成，不能以数字开头</p><p>变量赋值时等号两侧不能有空格</p><p>变量名称一般习惯为大写</p></li><li><p>将命令的返回值赋给变量</p><p>①A= ls -la `反引号 ，运行里面的命令，并把结果返回给变量A</p><p>②A=$(ls -la ) 等价于反引号</p><pre class=" language-shell"><code class="language-shell">RESULT=`ls -l /home`echo $RESULTecho ""A=$(date)echo $A</code></pre></li></ul><h5 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3.设置环境变量"></a>3.设置环境变量</h5><ul><li><p>基本语法</p><p>export 变量名=变量值 （将shell变量输出为环境变量）</p><p>source 配置文件 （让修改后的配置信息立即生效）</p><p>echo $变量名 （查询环境变量的值）</p></li><li><p>快速入门</p><p>在/etc/profile文件中定义TOMCAT_HOME环境变量</p><p>vim /etc/profile</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#定义一个自己的环境变量</span>TOMCAT_HOME<span class="token operator">=</span>/opt/tomcat/<span class="token function">export</span> TOMCAT_HOME</code></pre><p>查看环境变量TOMCAT_HOME的值</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># source /etc/profile</span><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo $TOMCAT_HOME</span>/opt/tomcat/</code></pre><p>在另外一个shell程序中使用TOMCAT_HOME</p><p>多行注释      :&lt;&lt;! 注释内容!</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#使用自定义的环境变量echo $TOMCAT_HOME[root@localhost shelltest]# ./hello.sh /opt/tomcat/</code></pre><p>注意： 为了让/etc/profile的环境变量生效，需要使用 source /etc/profile</p><p>重启系统或者注销用户</p></li></ul><h5 id="4-位置参数变量"><a href="#4-位置参数变量" class="headerlink" title="4.位置参数变量"></a>4.位置参数变量</h5><ul><li><p>介绍</p><p>当执行一个shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量</p><p>比如  ./myshell.sh 100 200 这个就是一个执行shell的命令行 ，可以在myshell中获取参数信息 </p></li><li><p>基本语法</p><p>$n ：n为数字,$0代表命令本身，$1-$9代表第一个参数到第九个参数，十以上的参数需要用大括号包含，{$10}</p><p>$* :这个变量代表命令行中的所有参数，$<em>把所有的参数看成*</em>一个整体**</p><p>$@ : 这个变量也代表命令行中的所有参数，但是$@把每个参数 <strong>区分对待</strong></p><p>$# : 这个变量代表命令行中所有参数的个数 </p></li><li><p>实例</p><p>写一个shell脚本，positionPara.sh 在脚本中获取到命令行的各个参数信息</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#获取各个参数echo "命令行参数 0,1,2 $0 $1 $2"echo "*: $*"echo " @:$@"echo "参数个数=$#"</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 744 positionPara.sh </span><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./positionPara.sh  30 60</span>命令行参数 0,1,2 ./positionPara.sh 30 60*: 30 60 @:30 60参数个数<span class="token operator">=</span>2</code></pre></li></ul><h5 id="5-预定义变量"><a href="#5-预定义变量" class="headerlink" title="5.预定义变量"></a>5.预定义变量</h5><ul><li><p>介绍：</p><p>shell的设计者事先定义好的变量，可以直接在shell脚本中使用</p></li><li><p>基本语法</p><p>$ $ ：当前进程的进程号</p><p>$!：后台运行的最后一个进程的进程号</p><p>$? ：最后一次执行的命令的返回状态。如果变量的值为0，证明上一个命令正确执行；如果变量的值为非0（具体是哪个数字，由命令自己决定），则证明上一个命令执行不正确</p></li><li><p>简单使用预定义变量</p><p>vim  prevar.sh </p><pre class=" language-shell"><code class="language-shell">#!/bin/bashecho "当前的进程号=$$"#后台的方式运行 hello.sh./hello.sh & echo "最后的进程号=$!"echo "执行的值=$?"</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./prevar.sh </span>当前的进程号<span class="token operator">=</span>3068最后的进程号<span class="token operator">=</span>3069执行的值<span class="token operator">=</span>0</code></pre></li></ul><p>Ctrl+c 退出</p><h5 id="6-运算符"><a href="#6-运算符" class="headerlink" title="6.运算符"></a>6.运算符</h5><ul><li><p>基本语法</p><p>$((运算式)) 或 $[运算式]</p><p>expr m + n       注意expr 运算符间要有空格</p><pre class=" language-shell"><code class="language-shell">expr m - n expr \* /,% 乘，除，取余</code></pre></li><li><p>实例</p><p>计算 （2+3）*4</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashans1=$(((2+3)*4))ans2=$[(2+3)*4]echo "ans1=$ans1"echo "ans2=$ans2"</code></pre><p>请求出命令行的两个参数和</p><pre class=" language-shell"><code class="language-shell">ans3=$[$1+$2]echo "命令行两个参数的和为 $ans3"</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./test.sh 20 40</span>ans1<span class="token operator">=</span>20ans2<span class="token operator">=</span>20命令行两个参数的和为 60</code></pre></li></ul><h5 id="7-条件判断"><a href="#7-条件判断" class="headerlink" title="7.条件判断"></a>7.条件判断</h5><ul><li><p>基本语法</p><p>[ condition ]    condition前后要有空格</p></li><li><p>常用判断条件</p><p>= 字符串比较</p><p>-lt 小于</p><p>-le 小于等于</p><p>-eq 等于</p><p>-gt 大于</p><p>-ge 大于等于</p><p>-ne 不等于</p><p>按照文件权限判断</p><p>​    - r 有读的权限</p><p>​    -w 有写的权限</p><p>​    -x 有执行的权限</p><p>按照文件的类型判断</p><p>​    -f 文件存在并且是一个常规文件</p><p>​    -e 文件存在</p><p>​    -d 文件存在并且是一个目录</p></li><li><p>案例</p><p>ok是否等于ok</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim condition.sh</span></code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bashif [ "ok"="ok" ]then        echo "equal"fiif [ 23 -gt 22 ]then        echo "大于"fi#判断文件是否存在if [ -e /root/shelltest/aaa.txt ]then        echo "存在"fi#文件权限if [ -r /root/shelltest/aaa.txt ]then        echo "有读的权限" fi</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 744 condition.sh </span><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./condition.sh </span>equal大于存在有读的权限</code></pre><p>删除某个目录下的空文件，并且名字以u开头</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashfor filename in `find /home/ -name "u*" -type d -empty `do        echo $filename        echo `rm -rf $filename`done</code></pre></li></ul><h5 id="8-流程控制"><a href="#8-流程控制" class="headerlink" title="8.流程控制"></a>8.流程控制</h5><ul><li><p>if判断</p><p>if [ 条件判断 ]; then</p><p>​    程序</p><p>fi</p><p>或者</p><p>if [ 条件判断 ] </p><p>then</p><p>​    程序</p><p>elif [ 条件判断式 ]</p><p>then</p><p>​    程序</p><p>fi</p></li><li><p>案例</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashif [ $1 -ge 60 ]then        echo "及格"elif [ $1 -lt 60 ]then        echo "不及格"fi       </code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost shelltest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./testif.sh 78</span>及格</code></pre></li><li><p>case语句</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashcase $1 in"1")echo "周一";;"2")echo "周二";;*)echo "other";;esac</code></pre></li><li><p>for 循环</p><p>for 变量 in 值1 值2 值3 …</p><p>do</p><p>​    程序</p><p>done</p><p>或者</p><p>for ((初始值;循环控制条件;变量变化))</p><p>do</p><p>​    程序</p><p>done</p><p>案例：</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#打印命令行输入的参数#使用$*for i in "$*"doecho "the num is $i" doneecho "------------"#使用 $@for j in "$@"doecho "the num is $j"done</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./printpara.sh 25 23 45</span>the num is 25 23 45------------the num is 25the num is 23the num is 45</code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bash#100以内的整数和sum=0for ((i=1;i<=100;i++))dosum=$[$sum+$i]doneecho "100以内的整数和: $sum"</code></pre></li><li><p>while循环</p><p>while [ 条件判断式 ]</p><p>do</p><p>​    程序</p><p>done</p><p>案例：</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#从命令行接收参数，输出1---的值sum=0i=0while [ $i -le $1 ]dosum=$[$sum+$i]i=$[$i+1]doneecho "值为: $sum"</code></pre></li></ul><h5 id="9-read读取控制台输入"><a href="#9-read读取控制台输入" class="headerlink" title="9.read读取控制台输入"></a>9.read读取控制台输入</h5><ul><li><p>基本语法</p><p>read [选项] [参数]</p><p>选项：</p><p>-p : 指定读取值时的提示符</p><p>-t ：指定读取值时的等待时间（秒），如果在没有指定的时间内输入，就不再等待了。</p><p>参数：</p><p>变量：指定读取值的变量名</p></li><li><p>实例</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#读取控制台输入的num值read -p  "请输入一个数: " NUM1echo "第一个值为: $NUM1"#读取控制台输入的num2值,要求在10s内输入read -t 10 -p "请在10秒内输入第二个数: " NUM2echo "第二个数为: $NUM2"</code></pre></li></ul><h5 id="10-函数"><a href="#10-函数" class="headerlink" title="10.函数"></a>10.函数</h5><ul><li><p>系统函数</p><p><strong>basename 基本语法</strong></p><p>功能：返回完整路径最后/的部分，常用于获取文件名</p><p>basename [pathname] [suffix]</p><p>basename [string] [suffix]    删除所有前缀，包括最后一个‘/‘，字符，然后将字符串显示出来</p><p>suffix为前缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。</p><p><strong>实例：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># basename /root/shelltest/aaa.txt </span>aaa.txt<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># basename /root/shelltest/aaa.txt .txt</span>aaa</code></pre><p><strong>dirname基本语法</strong></p><p>功能：返回完整路径后/的前面的部分，常用于返回路径部分</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dirname /root/shelltest/aaa.txt </span>/root/shelltest</code></pre></li><li><p>自定义函数</p><p>[function] functionname [()]</p><p>{</p><p>​    Action;</p><p>​    [return int;]</p><p>}</p><p>调用直接写函数名  functionname [值]</p><p>实例：计算两个参数的和</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashfunction func_sum (){        sum=$[$num1+$num2];        echo "sum is $sum"}read -p "请输入第一个数" num1read -p "请输入第二个数" num2func_sum $num1 $num2</code></pre></li></ul><h5 id="shell编程综合案例"><a href="#shell编程综合案例" class="headerlink" title="shell编程综合案例"></a>shell编程综合案例</h5><p>需求：</p><p>每天凌晨2点备份数据库admin 到/data/backup/db</p><p>备份开始和备份结束能够给出相应的提示信息</p><p>备份后的文件要求以备份时间为文件名，并打包成.tar.gz的形式</p><p>在备份的同时，检查10天前的备份数据库文件，如果有将其删除</p><pre class=" language-shell"><code class="language-shell">#!/bin/bash#完成数据库的定时备份#备份的路径 BACKUP=/data/backup/db#当前时间作为文件名DATETIME=$(date +%Y_%m_%d_%H%M%S)#echo $DATETIMecho "=========开始备份========="echo "备份路径 $BACKUP/$DATETIME.tar.gz"#主机HOST=localhost#用户名DB_USER=root#密码DB_PWD=root#备份数据库名DATABASE=test#创建备份的路径#如果备份的路径文件夹存在，就使用，否则就创建[ ! -d "$BACKUP/$DATETIME" ] && mkdir -p "$BACKUP/$DATETIME"#执行mysql备份数据库的指令mysqldump -u{$DB_USER} -p{$DB_PWD} $DATABASE | gzip > $BACKUP/$DATETIME/$DATETIME.sql.gz#打包备份文件cd $BACKUPtar -zcvf $DATETIME.tar.gz $DATETIME#删除临时目录rm -rf $BACKUP/$DATETIME#删除十天前的文件find $BACKUP -mtime +10 -name "*.tar.gz" -exec rm -rf {} \;echo "=========备份成功========="</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izbp1603l3nn58lq8r0ekgz sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># crontab -e </span><span class="token comment" spellcheck="true">#添加 10 2 * * * /usr/sbin/mysql_db_backup.sh</span><span class="token comment" spellcheck="true">#保存退出</span>crontab: installing new <span class="token function">crontab</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 笔记</title>
      <link href="/2019/11/02/SQL%20SERVER/"/>
      <url>/2019/11/02/SQL%20SERVER/</url>
      
        <content type="html"><![CDATA[<h5 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h5><h6 id="1-where-条件-is-null"><a href="#1-where-条件-is-null" class="headerlink" title="1.where 条件 is null"></a>1.where 条件 is null</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> mgr <span class="token operator">is</span> <span class="token boolean">null</span></code></pre><h6 id="2-between"><a href="#2-between" class="headerlink" title="2.between"></a>2.between</h6><p> 包含num1和num2</p><h6 id="3-where-group-by-having-order-by-的顺序"><a href="#3-where-group-by-having-order-by-的顺序" class="headerlink" title="3.where group by having order by 的顺序"></a>3.where group by having order by 的顺序</h6><p>SELECT</p><p>FROM</p><p>WHERE</p><p>GROUP BY</p><p>HAVING</p><p>ORDER BY</p><h6 id="4-更新多个记录"><a href="#4-更新多个记录" class="headerlink" title="4.更新多个记录"></a>4.更新多个记录</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> 平均成绩之和 <span class="token keyword">float</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu<span class="token keyword">update</span> stu <span class="token keyword">set</span>  平均成绩之和<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> 平均成绩<span class="token operator">+</span>新平均成绩 <span class="token keyword">from</span> stu <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>学号<span class="token operator">=</span>stu<span class="token punctuation">.</span>学号<span class="token punctuation">)</span></code></pre><h6 id="5-级联删除"><a href="#5-级联删除" class="headerlink" title="5.级联删除"></a>5.级联删除</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">constraint</span> FK_ 表名1_ 字段名 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">references</span> 表名<span class="token number">2</span><span class="token punctuation">(</span>字段名 <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span></code></pre><p>6.规定大写</p><p>collate Chinese_PRC_CS_AI</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 商品名称<span class="token punctuation">,</span>单价 <span class="token keyword">from</span> 商品信息 <span class="token keyword">where</span> 商品名称 <span class="token operator">like</span> <span class="token string">'%O%'</span> <span class="token keyword">collate</span> Chinese_PRC_CS_AI</code></pre><h5 id="表的基础操作-增删改查"><a href="#表的基础操作-增删改查" class="headerlink" title="表的基础操作(增删改查)"></a>表的基础操作(增删改查)</h5><p>表的创建</p><p>create table 表名 (字段名1 字段类型,字段名2 字段类型 ,…)</p><p>增：insert into 表名(字段名1 字段类型,字段名2 字段类型 ,…) values(值1,值2,…)</p><p>删：delete from 表名 (删除全部数据)</p><p>改：update 表名 set 字段名=值</p><p>查： select * from 表名</p><p>条件：like 模糊匹配</p><p>基础语句（select,delete,update） where like  ‘%…%’</p><p>案例：</p><p>商品表，teacher表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> 商品信息 <span class="token keyword">where</span> 产地 <span class="token operator">like</span> <span class="token string">"%州%"</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 商品信息<span class="token punctuation">(</span>商品编号<span class="token punctuation">,</span>商品名称<span class="token punctuation">,</span>库存编号<span class="token punctuation">,</span>供应商编号<span class="token punctuation">,</span> 产地<span class="token punctuation">,</span>单价<span class="token punctuation">,</span>均价<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1021</span><span class="token punctuation">,</span><span class="token string">"4G DDR3内存"</span><span class="token punctuation">,</span><span class="token number">1008</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"广州市"</span><span class="token punctuation">,</span><span class="token number">199</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">update</span> teacher <span class="token keyword">set</span> prof<span class="token operator">=</span><span class="token boolean">null</span> <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token string">"女"</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">;</span></code></pre><h5 id="表和列的增改"><a href="#表和列的增改" class="headerlink" title="表和列的增改"></a>表和列的增改</h5><p>为课程表增加一个备注字段，字段名bz,非Unicode编码</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 课程 <span class="token keyword">add</span> bz <span class="token keyword">Text</span></code></pre><p>将学生表的CJ字段改为成绩,CS改为出生</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">exec</span> sp_rename <span class="token string">'stu.CJ'</span><span class="token punctuation">,</span><span class="token string">'成绩'</span><span class="token punctuation">,</span><span class="token string">'column'</span><span class="token punctuation">;</span><span class="token keyword">exec</span> sp_rename <span class="token string">'XS.CS'</span><span class="token punctuation">,</span><span class="token string">'出生'</span><span class="token punctuation">,</span><span class="token string">'column'</span><span class="token punctuation">;</span></code></pre><p>使用SQL语句创建借阅表，表名为JY，该表含书号字段SH注意字段名大小写(字符型,最多允许7个汉字或14字符)，学号字段XH(字符型,最多允许5个汉字或11字符)，借阅日期字段JYRQ和归还时间字段GHSJ都是DateTime类型，并添加如下内容(日期格式可能不同,注意字段名大小写)：</p><p>SH             XH          JYRQ                GHSJ</p><hr><p>1              20120881101 2011-02-21          2013-04-16</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> JY<span class="token punctuation">(</span>SH <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XH <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>JYRQ <span class="token keyword">datetime</span><span class="token punctuation">,</span>GHSJ <span class="token keyword">datetime</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> JY<span class="token punctuation">(</span>SH<span class="token punctuation">,</span>XH<span class="token punctuation">,</span>JYRQ<span class="token punctuation">,</span>GHSJ<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'20120881101'</span><span class="token punctuation">,</span><span class="token string">'2011-02-21'</span><span class="token punctuation">,</span><span class="token string">'2013-04-16'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p>已知学生表XS有学号、姓名、毕业院校、成绩(CJ)等字段，请写一个SQL语句将删除成绩(CJ)字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> XS <span class="token keyword">drop</span> <span class="token keyword">column</span> CJ</code></pre><p>已知学生表XS有学号、姓名、毕业院校、成绩(CJ)等字段，请写一个SQL语句成绩(CJ)字段类型改为浮点型(Float)。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> xs <span class="token keyword">alter</span> CJ <span class="token keyword">float</span></code></pre><h5 id="记录的增删改"><a href="#记录的增删改" class="headerlink" title="记录的增删改"></a>记录的增删改</h5><p>1.已知商品信息表含有商品编号,商品名称,库存编号,供应商编号,产地,单价,均价等字段，请写一个SQL语句将各供应商所有商品单价的平均价格写入均价字段。执行结果如下：<br>供应商编号 商品名称                             单价       均价</p><hr><p>1001        DRAGONKING 1GB内存                   805      497.5<br>1001       CREATIVE SBS 2.1 380音箱              190      497.5<br>1002       Intel D915GVWB主板                  863.5    1046.65<br>1002       三星 795MB CRT显示器               1229.8    1046.65<br>1003       Maxtor 40G硬盘                     514.25     514.25</p><p>…</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> 商品信息 <span class="token keyword">set</span> 均价<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>单价<span class="token punctuation">)</span> <span class="token keyword">from</span> 商品信息 <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>供应商编号<span class="token operator">=</span>商品信息<span class="token punctuation">.</span>供应商编号<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 商品信息 <span class="token keyword">order</span> <span class="token keyword">by</span> 供应商编号 </code></pre><p>2.现要对学生表(xs)的成绩(字段名为CJ)进行加分，加分的规则是成绩为偶数的加1分，成绩为奇数的加2分</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> xs <span class="token keyword">set</span> cj<span class="token operator">=</span><span class="token keyword">case</span> <span class="token keyword">when</span> cj<span class="token operator">%</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> cj<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">when</span> cj<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">then</span> cj<span class="token operator">+</span><span class="token number">2</span> <span class="token comment" spellcheck="true">/*when CJ=NULL then NULL*/</span><span class="token keyword">end</span></code></pre><p>3.已知学生表XS有学号、姓名、毕业院校、成绩(CJ)等字段，请写一个SQL语句将不及格学生的学号和姓名按学号升序写入补考名单表(<strong>该表已经存在不能再创建</strong>)中。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 补考名单<span class="token punctuation">(</span>学号<span class="token punctuation">,</span>姓名<span class="token punctuation">)</span> <span class="token keyword">select</span> 学号<span class="token punctuation">,</span>姓名 <span class="token keyword">from</span> xs <span class="token keyword">where</span> cj<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 学号</code></pre><p>4.已知学生表XS有学号、姓名、毕业院校、成绩(CJ)等字段，请写一个SQL语句将不及格学生的学号和姓名按学号升序写入resit表(<strong>该表不存在，执行时创建</strong>)中</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 学号<span class="token punctuation">,</span>姓名 <span class="token keyword">into</span> resit <span class="token keyword">from</span> xs <span class="token keyword">where</span> cj<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 学号</code></pre><p>5.已知商品信息表有商品编号、商品名称、产地等字段，请写一个SQL语句将各产地及其商品数信息按产地升序写入产地商品数表(该表已经存在不能再创建)中</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 产地商品数 <span class="token keyword">select</span> 产地<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> 商品信息 <span class="token keyword">group</span> <span class="token keyword">by</span> 产地 <span class="token keyword">order</span> <span class="token keyword">by</span> 产地</code></pre><p>6.已知计算机登录信息表PCInfo含有XH,Host,LogT等字段，该表用于每台计算机登录服务器的时间，现要求只保留每台计算机最后一次登录的信息，请写一个SQL语句将各计算机历史登录信息删除</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> Pcinfo <span class="token keyword">where</span> xh <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>xh<span class="token punctuation">)</span> <span class="token keyword">from</span> pcinfo <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>host<span class="token operator">=</span>pcinfo<span class="token punctuation">.</span>host<span class="token punctuation">)</span></code></pre><p>7.已知商品信息表有商品编号、商品名称、供应商编号等字段，供应商信息表有编号、供应商名称、产品数量等字段，请写一个SQL语句统计各供应商的产品数量并写入供应商信息表产品数量字段中</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> 供应商信息 <span class="token keyword">set</span> 产品数量 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>商品名称<span class="token punctuation">)</span> <span class="token keyword">from</span> 商品信息 <span class="token keyword">where</span> 供应商信息<span class="token punctuation">.</span>编号<span class="token operator">=</span>商品信息<span class="token punctuation">.</span>商品编号 <span class="token keyword">group</span> <span class="token keyword">by</span> 供应商编号<span class="token punctuation">)</span><span class="token keyword">update</span> 供应商信息 <span class="token keyword">set</span> 产品数量<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">where</span> 产品数量 <span class="token operator">is</span> <span class="token boolean">null</span></code></pre><h5 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h5><p>1.显示每个雇员的年工资(基础工资加奖金)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> sal<span class="token operator">*</span><span class="token number">13</span><span class="token operator">+</span>isnull<span class="token punctuation">(</span>comm<span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp</code></pre><p>2.显示所有员工中的最低工资和该员工的名字</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span></code></pre><p>3.已知学生表XS有学号、姓名、毕业院校、成绩(CJ)、出生(CS)等字段，请写一个SQL语句显示姓名中含有“荣”的学生姓名</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 姓名 <span class="token keyword">from</span> xs <span class="token keyword">where</span> 姓名 <span class="token operator">like</span> <span class="token string">'%荣%'</span></code></pre><p>4.已知学生表XS有学号、姓名、毕业院校等字段，请写一个SQL语句显示毕业院校含“职业”两个字的学生学号，并按升序显示</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 学号 <span class="token keyword">from</span> xs <span class="token keyword">where</span> 毕业院校 <span class="token operator">like</span> <span class="token string">'%职业%'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 学号</code></pre><p>5.已知选修表score(sno,cno,degree),查询课程号(cno)为’c02’和’c03’课程的选课人数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> cno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 选课人数 <span class="token keyword">from</span> score <span class="token keyword">where</span> cno<span class="token operator">=</span><span class="token string">'c02'</span> <span class="token operator">or</span> cno<span class="token operator">=</span><span class="token string">'c03'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> cno </code></pre><p>6.已知学生表XS有学号、姓名、毕业院校、成绩(CJ)等字段，请写一个SQL语句显示所有参加考试学生的平均成绩(保留4位小数)。结果显示如下：</p><p>平均成绩</p><p>——————<br>   76.0625</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">convert</span><span class="token punctuation">(</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>CJ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均成绩 <span class="token keyword">from</span> xs<span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>CJ<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均成绩 <span class="token keyword">from</span> xs</code></pre><p>7.已知教师表teacher(tno,tname,sex,birthday,prof,depart)，查询姓名(tname)为两个汉字的教师工号(tno)、姓名(tname)、职称(prof)和所在院系(depart)等信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> tno<span class="token punctuation">,</span>tname<span class="token punctuation">,</span>prof<span class="token punctuation">,</span>depart <span class="token keyword">from</span> teacher <span class="token keyword">where</span> tname <span class="token operator">like</span> <span class="token string">'__'</span></code></pre><p>8.已知学生表XS(学号,姓名,CS,毕业院校,CJ)，请写一个SQL语句显示都有哪些毕业院校，一个院校有多个学生，只要显示一次，并按升序显示</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> 毕业院校 <span class="token keyword">from</span> XS <span class="token keyword">order</span> <span class="token keyword">by</span> 毕业院校</code></pre><h5 id="表的复杂查询"><a href="#表的复杂查询" class="headerlink" title="表的复杂查询"></a>表的复杂查询</h5><h6 id="1-Group-by-和having-语句"><a href="#1-Group-by-和having-语句" class="headerlink" title="1.Group by 和having 语句"></a><strong>1.Group by 和having 语句</strong></h6><p>Group by对查询结果进行分组统计</p><p>Having用于     限制分组产生的结果</p><p>例：</p><p>显示每个部门的平均工资和最高工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno</code></pre><p>显示每种部门每种岗位的平均工资和最低工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">,</span>job <span class="token keyword">order</span> <span class="token keyword">by</span> deptno</code></pre><p>总结：</p><p>① 如果select语句中同时包含，group by,having,order by时，那么顺序是：group by having oreder by</p><p>② 在选择列中如果有列，分组和表达式，那么这些列和表达式必须有一个出现在group by子句中，否则就会出错。</p><h6 id="2-多表查询"><a href="#2-多表查询" class="headerlink" title="2.多表查询"></a><strong>2.多表查询</strong></h6><p>查询部门名字为sales的雇员名字</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> dname<span class="token operator">=</span>’sales’<span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span>dept<span class="token punctuation">.</span>deptno</code></pre><p>(注意笛卡尔集)</p><p>显示雇员名，雇员工资及所在部门的名字，部门号</p><p>如果两张表有相同的字段名，则需要带表名（别名）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>dname<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span>emp<span class="token punctuation">.</span>deptno<span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> dept<span class="token punctuation">.</span>deptno<span class="token operator">=</span>emp<span class="token punctuation">.</span>deptno</code></pre><p>或</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>dname<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>deptno</code></pre><p>显示部门号为10的部门名，员工名和工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> dept<span class="token punctuation">.</span>dname<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>sal <span class="token keyword">from</span> dept<span class="token punctuation">,</span>emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span>dept<span class="token punctuation">.</span>deptno</code></pre><h6 id="3-自连接"><a href="#3-自连接" class="headerlink" title="3.自连接"></a><strong>3.自连接</strong></h6><p>指的是在同一张表中的连接查询</p><p>例：</p><p>显示每个员工和他上级的名字</p><p>把emp看作两张表，一个是a,一个是b</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token number">a</span><span class="token punctuation">.</span>ename 雇员<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>ename 老板<span class="token keyword">from</span> emp <span class="token number">a</span><span class="token punctuation">,</span>emp <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>mgr<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>empno</code></pre><h6 id="4-子查询"><a href="#4-子查询" class="headerlink" title="4.子查询"></a><strong>4.子查询</strong></h6><p>指的是嵌入在其他sql语句中的select语句</p><p>1）子查询的分类：</p><p>独立子查询</p><p>子查询可以独立运行</p><p>相关子查询</p><p>子查询引用了父查询的结果</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> stuno<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> stuno <span class="token keyword">from</span> result <span class="token keyword">where</span> stuno<span class="token operator">=</span>stu<span class="token punctuation">.</span>stuno<span class="token punctuation">)</span></code></pre><p>作为结果集(查询7班的男生信息)，一定要为结果集<strong>起个别名</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> classid<span class="token operator">=</span>’<span class="token number">7</span>’<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> classid<span class="token operator">=</span>’<span class="token number">7</span>’<span class="token punctuation">)</span> <span class="token keyword">as</span> tmp <span class="token keyword">where</span> sex<span class="token operator">=</span>’男’</code></pre><p>2）单行子查询</p><p>只返回一行数据的子查询语句</p><p>3）多行查询</p><p>返回多行数据的查询</p><p>例：显示与SMITH同一部门的所有员工</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename<span class="token operator">=</span>’smith’<span class="token punctuation">)</span></code></pre><p>查询和部门10工作相同的雇员名字，岗位，工资，部门号</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>在from子句中使用子查询</p><p>如何显示高于部门平均工资的员工信息</p><p>首先求出各个部门的平均工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> 平均工资<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><p>把查询结果当作一个临时表看待</p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> myavg<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">)</span> tmp</code></pre><p>最终结果</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> myavg<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">)</span> tmp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span>tmp<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>sal<span class="token operator">></span>tmp<span class="token punctuation">.</span>myavg</code></pre><p>查询最近一次office考试的最高分和最低分</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span> 最高分<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span> <span class="token keyword">as</span> 最低分<span class="token keyword">from</span> stu <span class="token keyword">where</span> subjectid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectid <span class="token keyword">from</span> subject <span class="token keyword">where</span> subject<span class="token operator">=</span>’office’<span class="token punctuation">)</span> <span class="token operator">and</span> examdate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>examdate<span class="token punctuation">)</span> <span class="token keyword">from</span> result <span class="token keyword">where</span> subjectid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectid <span class="token keyword">from</span> subject <span class="token keyword">where</span> subject<span class="token operator">=</span>’office’<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="5-分页查询"><a href="#5-分页查询" class="headerlink" title="5. 分页查询"></a><strong>5.</strong> <strong>分页查询</strong></h6><p>1)不用分页函数</p><p>字段 ename deptno sal hiredate</p><p>显示第一个到第四个的入职的雇员</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> hiredate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--top后的数表示要选择几条记录</span></code></pre><p>显示第四个到第9个入职的职员信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> ename <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> hiredate<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> hiredate<span class="token punctuation">;</span></code></pre><p>用查询结果创建新表（不存在）</p><p>Select *（可选字段名） into 新表名 from 表名</p><p>如何删除一张表的重复记录</p><p>tid    tname    tpasswd</p><p>1        aaa         123</p><p>1        aaa         123</p><p>1        aaa         123</p><p>2        bbb        456</p><p>2        bbb        456</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token keyword">into</span> emp <span class="token keyword">from</span>  test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建一个临时表</span><span class="token keyword">delete</span> <span class="token keyword">from</span> test <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--删除原表的所有数据 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> test <span class="token keyword">select</span> <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--将临时表的数据插入原表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">temp</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--删除临时表</span></code></pre><p>2）使用分页函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> tid<span class="token punctuation">)</span> id<span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> stu<span class="token punctuation">)</span> tmp <span class="token keyword">where</span> id <span class="token operator">>=</span><span class="token number">5</span> <span class="token operator">and</span> id<span class="token operator">&lt;=</span><span class="token number">8</span></code></pre><p>注意：如果使用生成行号的子查询作为结果集，那么必须为结果集添加别名，并且为行号添加名称</p><p>ROW_NUMBER() over(排序字段)：根据指定的字段排序，对排序之后的每一行添加一个不间断的行号</p><h6 id="6-维护数据的完整性"><a href="#6-维护数据的完整性" class="headerlink" title="6.维护数据的完整性"></a>6.维护数据的完整性</h6><p>Not null</p><p>Unique 当定义了唯一约束后，该值不能重复，可以空但是最多只能有一个</p><p>Primary key</p><p>一张表只能有一个主键，但是可以有多个unique约束</p><p>复合主键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test3<span class="token punctuation">(</span>tid <span class="token keyword">int</span><span class="token punctuation">,</span>tname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tpasswd nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>tid<span class="token punctuation">,</span>tname<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Foreign key(外键)</p><p>定义主表和从表之间的关系，外键的约束要定义在从表上，主表必须有主键约束或者unique约束</p><p>Check 强制数据必须满足的条件</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test4<span class="token punctuation">(</span>tid <span class="token keyword">int</span><span class="token punctuation">,</span>tname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tpasswd nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tage <span class="token keyword">int</span> <span class="token keyword">check</span><span class="token punctuation">(</span>tage<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> tage<span class="token operator">&lt;=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>商品售货系统表设计案例</p><img src="http://116.62.203.42/img/8.jpg" alt="img" style="zoom:80%;"> <pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> goods<span class="token punctuation">(</span>goodsid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>goodsname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>unitprice <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>unitprice<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>category nvarchar<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>category <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'食物'</span><span class="token punctuation">,</span><span class="token string">'日用'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>provider nvarchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> customer<span class="token punctuation">(</span>customerid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>custname nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>custaddress nvarchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>email nvarchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>sex <span class="token keyword">nchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>sex <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>cardid nvarchar<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> purchase<span class="token punctuation">(</span>customerid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> customer<span class="token punctuation">(</span>customerid<span class="token punctuation">)</span><span class="token punctuation">,</span>goodsid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> goods<span class="token punctuation">(</span>goodsid<span class="token punctuation">)</span><span class="token punctuation">,</span>nums <span class="token keyword">int</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>nums<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="表的连接"><a href="#表的连接" class="headerlink" title="表的连接"></a>表的连接</h5><p>1.已知字母表L的内容如下：<br>C</p><p>————————<br>A<br>B<br>C<br>D<br>E<br>请写一多表查询语句，显示5个字母中任取3字母的组合，内容如下(按组合从小到大排序)：<br>组合</p><p>————————<br>ABC<br>ABD<br>ABE<br>ACD<br>ACE<br>ADE<br>BCD<br>BCE<br>BDE<br>CDE </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> L1<span class="token punctuation">.</span>C<span class="token operator">+</span>L2<span class="token punctuation">.</span>C<span class="token operator">+</span>L3<span class="token number">.c</span> 组合 <span class="token keyword">from</span> L L1<span class="token punctuation">,</span>L L2<span class="token punctuation">,</span>L L3 <span class="token keyword">where</span> L1<span class="token number">.c</span><span class="token operator">&lt;</span>L<span class="token number">.c</span> <span class="token operator">and</span> L2<span class="token number">.c</span><span class="token operator">&lt;</span>L3<span class="token number">.c</span></code></pre><p>2.请根据学生表XS(学号,姓名,CS,毕业院校,CJ)、选修表XX(xh,kh,CJ)、课程表C(kh,km,RS)，写一多表查询语句，显示同一天生日的学生信息，内容如下：<br>学号           姓名     学号           姓名     BIRTH<br>————————————————————<br>20100881205  王聪慧    20100881210  郭闻娟    01-01<br>20100881205  王聪慧    20100881211  邹艺荣    01-01</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>学号 <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>姓名 <span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>学号 <span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>姓名<span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">(</span><span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>CS <span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> BIRTH <span class="token keyword">from</span> xs <span class="token number">a</span> <span class="token punctuation">,</span> xs <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>学号<span class="token operator">&lt;</span><span class="token number">b</span><span class="token punctuation">.</span>学号 <span class="token operator">and</span> <span class="token keyword">right</span><span class="token punctuation">(</span><span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>CS <span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">right</span><span class="token punctuation">(</span><span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>CS <span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>3.请根据学生表XS(学号,姓名,CS,毕业院校,CJ)、选修表XX(xh,kh,CJ)、课程表C(kh,km,RS)，写一多表查询语句，显示各课程的选修情况(含无人选修课程信息)。</p><p>XH                   KH KM                   CJ<br>————————————————————<br>20100881201        1001 C语言                80<br>20100881203        1001 C语言                56</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> xs<span class="token punctuation">.</span>XH<span class="token punctuation">,</span>XX<span class="token punctuation">.</span>KH<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>KM<span class="token punctuation">,</span>xx<span class="token punctuation">.</span>CJ <span class="token keyword">from</span> xs <span class="token keyword">left</span> <span class="token keyword">join</span> xx <span class="token keyword">on</span> xs<span class="token punctuation">.</span>学号<span class="token operator">=</span>xx<span class="token punctuation">.</span>xh <span class="token keyword">right</span> <span class="token keyword">join</span> <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>kh<span class="token operator">=</span>xx<span class="token punctuation">.</span>kh </code></pre><h5 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a><strong>case 语句</strong></h5><p>1)如果case后面跟表达式或字段，那么这种结构只能做等值判断，不能判断null值</p><p>case 表达式/字段</p><p> when 值then 自定义值</p><p>else 自定义值</p><p>end</p><p>2) 如果case后面没有接表达式或值，那么这种结构相当于if…else</p><p>,它可以判断null值</p><p>case </p><p> when 值then 自定义值</p><p>else 自定义值</p><p>end</p><h5 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a><strong>数据完整性</strong></h5><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>实体完整性：表的每一行数据就称为一个实体，实体完整性是指 每一行记录是唯一的，不重复的</p><p>​    标识列：系统自动生成，永远不会重复</p><p>​    主键：唯一 非空</p><p>​    唯一键：唯一 但是可以为null，只能空一次 </p><p>域完整性：域就是字段，域完整性就是为了保证字段的值是合理和准确的</p><p>​    非空 类型，check约束，默认值，关系（主外键约束）</p><p>自定义完整性：用户自己定义的约束规则</p><p>​    check约束 存储过程 触发器</p><p>引用完整性：一个表的字段的值引用另外一个表的某一个字段，</p><p>被引用的表称为主表，引用表就是称为从表或者外键表</p><p>​    1.选择外键表去创建主外键关系</p><p>​    2.建立主外键关系的字段类型和意义必须一致</p><p>​    3.建立关系的字段 在主表中必须是主键或者是唯一键</p><p>​    4.添加数据的时候先添加主表数据，再添加外键表</p><p>​    5.删除数据的时候先删除外键表数据，再删除主表</p><p>关系建立后表的级联操作</p><p>​    1.不执行任何操作：该报错就报错，能删除就删除</p><p>​    2.级联：删除主表记录，对应的从表记录也将被删除</p><p>​    3.set null ：删除主表，从表对应记录的字段值=null，前提是这个字段可以设置为null</p><p>​    4.set default :删除主表，从表对应记录的字段值=设置的默认值，前提是这个字段已经设置了默认值</p><h6 id="使用代码创建约束"><a href="#使用代码创建约束" class="headerlink" title="使用代码创建约束"></a><strong>使用代码创建约束</strong></h6><p>–种类：主键约束（primary key PK） 唯一键约束(unique UQ) 检查约束（check CK ） 默认值约束(default DF)</p><p>–外键约束(Foreign key FK)</p><p><strong>–创建约束的语法：</strong></p><p>–alter table 表名 </p><p>–add constraint 约束的名字(以简写作为前缀) 约束的类型(字段,表达式 值)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> test<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> Teacher <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>Name nvarchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>Gender <span class="token keyword">bit</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>Age <span class="token keyword">int</span> <span class="token punctuation">,</span>Salary money<span class="token punctuation">,</span>Birthday <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span></code></pre><p><strong>teacher表</strong></p><img src="http://116.62.203.42/img/1.jpg" alt="img" style="zoom:80%;"> <p><strong>classes表</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> classes<span class="token punctuation">(</span>cid <span class="token keyword">int</span> <span class="token keyword">identity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> PK_classes_cid <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="http://116.62.203.42/img/2.jpg" alt="img" style="zoom:80%;"> <p>–1.将id设置为主键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Teacher<span class="token keyword">add</span> <span class="token keyword">constraint</span> PK_Teacher_Id <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></code></pre><p>–2.设置name为唯一键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'UQ_Teacher_Name'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> UQ_Teacher_Name<span class="token keyword">alter</span> <span class="token keyword">table</span> Teacher <span class="token keyword">add</span> <span class="token keyword">constraint</span> UQ_Teacher_Name <span class="token keyword">unique</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span></code></pre><p>–3.设置年龄0-100之间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'CK_Teacher_Age'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> CK_Teacher_Age<span class="token keyword">alter</span> <span class="token keyword">table</span> teacher<span class="token keyword">ADD</span> <span class="token keyword">constraint</span> CK_Teacher_Age <span class="token keyword">check</span><span class="token punctuation">(</span>Age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> Age<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><p>–4.为birthday添加默认值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'DF_Teacher_Birthday'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> DF_Teacher_Birthday<span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">add</span> <span class="token keyword">constraint</span> DF_Teacher_Birthday <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token string">'1999-9-9'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> birthday  <span class="token comment" spellcheck="true">--for是说明为哪一个字段添加</span></code></pre><p>–5.为ClassId添加外键约束</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token comment" spellcheck="true">--从表的某一个字段，引用主表的某一个字段</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> FK_teacher_ClassId <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>classid<span class="token punctuation">)</span> <span class="token keyword">references</span> classes<span class="token punctuation">(</span>cid<span class="token punctuation">)</span></code></pre><h6 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'FK_teacher_ClassId'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> FK_teacher_ClassId<span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token comment" spellcheck="true">--从表的某一个字段，引用主表的某一个字段</span><span class="token keyword">with</span> <span class="token keyword">nocheck</span> <span class="token comment" spellcheck="true">--不检查现有数据</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> FK_teacher_ClassId <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>classid<span class="token punctuation">)</span> <span class="token keyword">references</span> classes<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--on delete Set null --删除主表数据，从表引用的数据设为null</span></code></pre><p><strong>subject表</strong></p><img src="http://116.62.203.42/img/3.jpg" alt="img" style="zoom:80%;"> <p><strong>student表</strong></p><img src="http://116.62.203.42/img/4.jpg" alt="img" style="zoom:80%;"> <p><strong>result表</strong></p><img src="http://116.62.203.42/img/5.jpg" alt="img" style="zoom:80%;"> <p>1.设置外键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>depno <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>empno <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>ename nvarchar<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> dept<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>外键的数据类型和主键一致</p><p>外键只能指向主键</p><p>保持数据的完整性</p><h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a><strong>视图</strong></h5><h6 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h6><p>视图就是一张虚拟表，根据用户的查询创建的命令，使用视图就像使用表一样</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vw_getinfo<span class="token keyword">create</span> <span class="token keyword">view</span> view_emp <span class="token keyword">as</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>hiredate<span class="token punctuation">,</span>sal<span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> view_emp<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">view</span> view_emp<span class="token punctuation">;</span></code></pre><h6 id="使用代码创建视图"><a href="#使用代码创建视图" class="headerlink" title="使用代码创建视图"></a>使用代码创建视图</h6><p>–create view vw_视图名称</p><p>–as </p><p>–查询的命令</p><p>–go</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> ls<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'vw_stuinfo'</span><span class="token punctuation">)</span> <span class="token keyword">drop</span> <span class="token keyword">view</span> vw_stuinfogo<span class="token keyword">create</span> <span class="token keyword">view</span> vw_stuinfo <span class="token comment" spellcheck="true">--这个创建语句必须是批处理的第一句</span><span class="token keyword">as</span>​    <span class="token comment" spellcheck="true">--select * from stu where 性别='男'</span>​    <span class="token comment" spellcheck="true">--update stu 不能在视图中使用update,delete,insert</span>​    <span class="token comment" spellcheck="true">--视图中只能使用一条select命令</span>​    <span class="token comment" spellcheck="true">--视图不能使用order by，除非同时使用了top</span>​    <span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">99.9999</span> <span class="token keyword">percent</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> 姓名go</code></pre><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>–对视图一般不去执行增加删除和修改的操作，需要注意的是，</p><p>–这些操作会直接影响原始的物理表,d但是这些操作局限于单表</p><p>–使用视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vw_stuinfo<span class="token keyword">update</span> vw_stuinfo <span class="token keyword">set</span> java<span class="token operator">=</span>java<span class="token number">-100</span> <span class="token keyword">where</span> 性别<span class="token operator">=</span><span class="token string">'男'</span></code></pre><p> 例：</p><p>对学生表Stu(XH,XM,CJ)创建加密视图学生加密(学号,姓名,成绩)。运行后结果显示：<br>学号         姓名      成绩<br>——————————————————————<br>1           AAA      56<br>2           BBB      80<br>3           CCC      70<br>Text<br>——————————————————————<br>NULL</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">create</span> <span class="token keyword">view</span> 学生加密 <span class="token keyword">with</span> encryption<span class="token keyword">as</span><span class="token keyword">select</span> XH 学号<span class="token punctuation">,</span>XM 姓名<span class="token punctuation">,</span>CJ 成绩 <span class="token keyword">from</span> stu go</code></pre><p>对学生表Stu(XH,XM,CJ)以带检查选项创建视图学生及格(学号,姓名,成绩)，该视图只包含成绩及格学生的信息，然后查询该视图内容，最后将成绩70改为50。运行后结果显示：<br>学号         姓名      成绩<br>——————————————————————<br>2           BBB      80<br>3           CCC      70<br>E_No Lever State 错误信息<br>————————————————————————<br>550  16    1     试图进行的插入或更新已失败，原因是目标视图或者目标视图所跨越的某一视图指定了 WITH CHECK OPTION</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">create</span> <span class="token keyword">view</span> 学生及格 <span class="token keyword">as</span><span class="token keyword">select</span> XH 学号<span class="token punctuation">,</span>XM 姓名<span class="token punctuation">,</span>CJ 成绩 <span class="token keyword">from</span> stu <span class="token keyword">where</span> CJ<span class="token operator">>=</span><span class="token number">60</span><span class="token keyword">WITH</span> <span class="token keyword">CHECK</span> <span class="token keyword">option</span>go</code></pre><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>函数和存储过程类似。</p><p>1.编写一函数Fact(@N)，用于求@N!，当@N=5时显示结果如下：</p><p>——————————————<br>       120</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">create</span> <span class="token keyword">function</span> Fact<span class="token punctuation">(</span><span class="token variable">@num</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">declare</span> <span class="token variable">@sum</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">declare</span> <span class="token variable">@i</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">@i</span><span class="token operator">&lt;=</span><span class="token variable">@num</span><span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">set</span> <span class="token variable">@sum</span><span class="token operator">=</span><span class="token variable">@sum</span><span class="token operator">*</span><span class="token variable">@i</span>        <span class="token keyword">set</span> <span class="token variable">@i</span><span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> <span class="token variable">@sum</span><span class="token keyword">end</span>go</code></pre><p>2.已知学生表XS有学号、姓名、毕业院校、成绩(CJ)等字段。创建一个函数XH2XM(@XH)，其功能是返回指定学号(@XH)学生的姓名。运行结果如下：<br>姓名<br>——————————<br>王聪慧<br>姓名<br>——————————<br>游连桦</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">create</span> <span class="token keyword">function</span> XH2XM<span class="token punctuation">(</span><span class="token variable">@XH</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span> <span class="token keyword">declare</span> <span class="token variable">@name</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token keyword">set</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> 姓名 <span class="token keyword">from</span> xs <span class="token keyword">where</span> 学号<span class="token operator">=</span><span class="token variable">@XH</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token variable">@name</span><span class="token keyword">end</span>go</code></pre><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a><strong>局部变量</strong></h5><h6 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h6><p>–语法</p><p>–declare @变量的名字 变量的类型=[默认值]</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'zzy'</span><span class="token keyword">print</span> <span class="token variable">@name</span><span class="token operator">+</span><span class="token string">'1346'</span><span class="token keyword">select</span> <span class="token variable">@name</span>go</code></pre><h6 id="赋值-set-select"><a href="#赋值-set-select" class="headerlink" title="赋值 set  select"></a>赋值 set  select</h6><p>–如果后面是完整的子查询，那么两个没有任何的区别</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">'3radsaf'</span><span class="token keyword">select</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">'456789'</span></code></pre><p>–查询比学号44的年龄大的学生信息</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@obj</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@obj</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> 年龄 <span class="token keyword">from</span> stu <span class="token keyword">where</span> <span class="token keyword">right</span><span class="token punctuation">(</span>cast<span class="token punctuation">(</span> cast <span class="token punctuation">(</span>学号 <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'44'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--set @obj=(select 年龄 from stu where right(cast( cast (学号 as decimal(11,0) )as varchar(11) ),2)='44')</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> 年龄<span class="token operator">></span><span class="token variable">@obj</span></code></pre><h6 id="两种赋值方式的区别"><a href="#两种赋值方式的区别" class="headerlink" title="两种赋值方式的区别"></a>两种赋值方式的区别</h6><p>–1. </p><p>–set一次只能为一个变量赋值,select支持一次为多个变量</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@age</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token variable">@age</span><span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true">--set @name='111',@age=20</span></code></pre><p>–2.</p><p>–如果=后是不完整的sql语句，那么当语句返回多行一列的时候,select会得到最后一个值</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@age</span> <span class="token keyword">int</span><span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true">--当没有用 EXISTS 引入子查询时，在选择列表中只能指定一个表达式。</span><span class="token comment" spellcheck="true">--子查询返回的值不止一个。当子查询跟随在 =、!=、&lt;、&lt;=、>、>= 之后，或子查询用作表达式时，这种情况是不允许的。 </span><span class="token comment" spellcheck="true">--set @name =(select 姓名 from stu)</span><span class="token comment" spellcheck="true">--set @name = 姓名 from stu  set后只能接独立子查询</span><span class="token keyword">select</span> <span class="token variable">@name</span> <span class="token operator">=</span> 姓名 <span class="token keyword">from</span> stu<span class="token keyword">print</span> <span class="token variable">@name</span> <span class="token comment" spellcheck="true">--最后一个名字</span></code></pre><p>–如果=后边的查询语句没有返回值，那么select会保留默认值</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'safaf'</span><span class="token punctuation">,</span><span class="token variable">@age</span> <span class="token keyword">int</span><span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true">--set @name=(select 姓名 from stu where right(cast( cast (学号 as decimal(11,0) )as varchar(11) ),2)='88')</span><span class="token comment" spellcheck="true">--等价于select @name=(select 姓名 from stu where right(cast( cast (学号 as decimal(11,0) )as varchar(11) ),2)='88')</span><span class="token keyword">select</span> <span class="token variable">@name</span><span class="token operator">=</span>姓名 <span class="token keyword">from</span> stu <span class="token keyword">where</span> <span class="token keyword">right</span><span class="token punctuation">(</span>cast<span class="token punctuation">(</span> cast <span class="token punctuation">(</span>学号 <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'88'</span><span class="token keyword">print</span> <span class="token variable">@name</span><span class="token keyword">print</span> <span class="token string">'13214'</span></code></pre><h6 id="变量使用案例"><a href="#变量使用案例" class="headerlink" title="变量使用案例"></a>变量使用案例</h6><p>–查询最近一次office考试的最高分和最低分</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@subName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'office'</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@subId</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">--科目id</span><span class="token keyword">set</span> <span class="token variable">@subId</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subId <span class="token keyword">from</span> subject <span class="token keyword">where</span> subName<span class="token operator">=</span><span class="token variable">@subName</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--获取科目id</span><span class="token keyword">declare</span> <span class="token variable">@time</span> <span class="token keyword">datetime</span><span class="token comment" spellcheck="true">--最近一次考试时间</span><span class="token keyword">select</span> <span class="token variable">@time</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>examDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subId<span class="token operator">=</span><span class="token variable">@subId</span> <span class="token comment" spellcheck="true">--获得这一科目最近考试时间</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subId<span class="token operator">=</span><span class="token variable">@subId</span> <span class="token operator">and</span> examDate<span class="token operator">=</span><span class="token variable">@time</span></code></pre><h5 id="全局变量（系统变量）"><a href="#全局变量（系统变量）" class="headerlink" title="全局变量（系统变量）"></a><strong>全局变量（系统变量）</strong></h5><p>全局变量必须以标记@@作为前缀，如</p><p>@@version</p><p>全局变量由系统定义和维护，我们只能读取，不能修改全局变量的值</p><h5 id="IF-ELSE"><a href="#IF-ELSE" class="headerlink" title="IF ELSE"></a><strong>IF ELSE</strong></h5><p>–没有bool值，只有条件表达式</p><p>–没有{}，只有begin..end</p><p>–可以多重，可以嵌套</p><p>–如果包含的语句只有一句，可以不使用begin…end </p><p>–if或else必须有处理语句，否则会报错</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span> ​    <span class="token keyword">print</span> <span class="token string">'2313'</span>​    <span class="token keyword">print</span> <span class="token string">'5846'</span>​    <span class="token keyword">end</span></code></pre><p>–计算java成绩的平均成绩，如果平均分超过60分输出前三名的成绩。否则输出后三名的成绩</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@avg</span> <span class="token keyword">float</span><span class="token keyword">set</span> <span class="token variable">@avg</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>java<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token variable">@avg</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">@avg</span><span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​    <span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> java <span class="token keyword">desc</span>​    <span class="token keyword">end</span><span class="token keyword">else</span>​    <span class="token keyword">begin</span>​    <span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token operator">*</span>  <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> java​    <span class="token keyword">end</span></code></pre><img src="http://116.62.203.42/img/10.png" alt="img" style="zoom:80%;"> <h5 id="while"><a href="#while" class="headerlink" title="while"></a><strong>while</strong></h5><p>–没有bool值，只有条件表达式</p><p>–没有{}，只有begin..end</p><p>–可以多重，可以嵌套</p><p>–可以使用continue/break语句</p><p>如果java考试布局个的人数超过了半数，题目出难了，就让每个同学的分数加2分，直到不及格的人数少于一半</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@nopassnum</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@totalnum</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@totalnum</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">set</span> <span class="token variable">@nopassnum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> java <span class="token operator">&lt;</span><span class="token number">60</span> <span class="token operator">and</span> java<span class="token operator">&lt;</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">@nopassnum</span><span class="token operator">>=</span><span class="token variable">@totalnum</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​    <span class="token keyword">update</span> stu <span class="token keyword">set</span> java<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span> ​    <span class="token keyword">set</span> <span class="token variable">@nopassnum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> java <span class="token operator">&lt;</span><span class="token number">60</span> <span class="token operator">and</span> java<span class="token operator">&lt;</span><span class="token number">98</span><span class="token punctuation">)</span>​    <span class="token keyword">end</span></code></pre><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a><strong>事务</strong></h5><p>事务：这些语句要么都成功执行，要么都不执行。事务只是一种处理机制</p><p>–事务是对有可能对表的数据进行更改的操作而言（增加，删除，修改），对查询没用</p><p>–事务的特点：CUID</p><p>–1.原子性：事务不可以再分，事务时原子工作单元，对于其数据的修改，要么全部执行，要不全部不执行</p><p>–2.一致性：事务处理后，数据要保持某种程度的一致性</p><p>–3.隔离性：每一个事务都是独立的，不受其他事务的影响</p><p>–4.持久性：事务一旦提交，对数据的修改永久保留</p><p>name        salary</p><p>aa                1000</p><p>bb                1000</p><p>–使用事务进行转账</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> bank <span class="token keyword">add</span> <span class="token keyword">constraint</span> bank_salary <span class="token keyword">check</span><span class="token punctuation">(</span>salary <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--添加约束，salary必须>0 </span><span class="token keyword">declare</span> <span class="token variable">@err</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">0</span><span class="token keyword">begin</span> <span class="token keyword">transaction</span>​    <span class="token keyword">update</span> bank <span class="token keyword">set</span> salary<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'aa'</span>​    <span class="token keyword">set</span> <span class="token variable">@err</span><span class="token operator">+</span><span class="token operator">=</span>@<span class="token variable">@ERROR</span> <span class="token comment" spellcheck="true">--累加此行的错误号</span>​    <span class="token comment" spellcheck="true">--if(@err&lt;>0)--有错误,</span>​    <span class="token comment" spellcheck="true">--    rollback transaction--不能某一句出现错误，就进行回滚或者提交</span>​    <span class="token keyword">update</span> bank <span class="token keyword">set</span> salary<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'bb'</span>​    <span class="token keyword">set</span> <span class="token variable">@err</span><span class="token operator">+</span><span class="token operator">=</span>@<span class="token variable">@ERROR</span>​    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">@err</span><span class="token operator">&lt;></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--有错误,只有全部语句执行完之后，在进行判断</span>​        <span class="token keyword">rollback</span> <span class="token keyword">transaction</span>​    <span class="token keyword">else</span>​        <span class="token keyword">commit</span> <span class="token keyword">transaction</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bank</code></pre><p><strong>COMMIT：</strong>提交更改；</p><p><strong>ROLLBACK：</strong>回滚更改；</p><p><strong>SAVEPOINT：</strong>在事务内部创建一系列可以 ROLLBACK 的还原点；</p><p>SAVEPOINT 是事务中的一个状态点，使得我们可以将事务回滚至特定的点，而不是将整个事务都撤销。</p><p>savepoint</p><p>SAVEPOINT SAVEPOINT_NAME;</p><p>ROLLBACK TO SAVEPOINT_NAME;</p><h5 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a><strong>存储过程</strong></h5><h6 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h6><p>存储过程–就像数据库中运行方法（函数）</p><p>–方法说明：</p><p>–方法名称：参数 调用 返回值</p><p>–参数：主要是一一对应的原则</p><p>–    1.类型对应：子类可以替换父类 int–double</p><p>–    2.数量对应：默认值，可变参数</p><p>–    3.顺序对应：可以使用 参数：值的方法调用</p><p>–返回值：通过return 返回值 ，但是只能返回单个值</p><p>–可以通过ref/out扩展方法的’返回值’</p><p>–创建存储过程的语法</p><p>–go</p><p>–create procedure usp_存储过程名称</p><p>–(形参) 可以在这个里面定义参数</p><p>–as–相当于方法体</p><p>–{</p><p>–    自定义局部变量</p><p>–    逻辑语句</p><p>–}</p><p>–go</p><h6 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h6><p>–.查询所有学生信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getAllInfo'</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">procedure</span> usp_getAllInfogo<span class="token keyword">create</span> <span class="token keyword">procedure</span> usp_getAllInfo <span class="token comment" spellcheck="true">--简写proc</span><span class="token keyword">as</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> empgo<span class="token comment" spellcheck="true">--调用存储过程，获取学生信息</span><span class="token keyword">execute</span>  usp_getAllInfo         <span class="token comment" spellcheck="true">--简写exec</span></code></pre><h6 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h6><p>查询指定性别的学生信息</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getAllInfoBySex'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getAllInfoBySexgo<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getAllInfoBySex​    <span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--形参只是声明，不是定义，所以不需要declare</span><span class="token keyword">as</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span>go<span class="token keyword">exec</span> usp_getAllInfoBySex <span class="token string">'男'</span><span class="token comment" spellcheck="true">--相当于'男孩'</span></code></pre><h6 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h6><p>获取指定性别和班级名称的学生信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'usp_getAllInfoBySexAndClassName'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassNamego<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassName<span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@className</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">as</span>    ​    <span class="token keyword">declare</span> <span class="token variable">@classId</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">--科目ID</span>​    <span class="token keyword">set</span> <span class="token variable">@classId</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> grade <span class="token keyword">where</span> className<span class="token operator">=</span><span class="token variable">@className</span><span class="token punctuation">)</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span> <span class="token operator">and</span> classId<span class="token operator">=</span><span class="token variable">@classId</span>go<span class="token keyword">exec</span> usp_getAllInfoBySexAndClassName <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'三班'</span></code></pre><h6 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a><strong>默认参数</strong></h6><p>–创建有默认值的存储过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'usp_getAllInfoBySexAndClassName'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassNamego<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassName<span class="token variable">@className</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'女'</span>  <span class="token comment" spellcheck="true">--往往会将有默认值的参数写在所有参数列表的最后，这样实参列表就可以省略default</span><span class="token keyword">as</span>    ​    <span class="token keyword">declare</span> <span class="token variable">@classId</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">--科目ID</span>​    <span class="token keyword">set</span> <span class="token variable">@classId</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> grade <span class="token keyword">where</span> className<span class="token operator">=</span><span class="token variable">@className</span><span class="token punctuation">)</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span> <span class="token operator">and</span> classId<span class="token operator">=</span><span class="token variable">@classId</span>go<span class="token comment" spellcheck="true">--参数传递顺序一致：第一个实参默认就是传递给第一个形参 </span><span class="token comment" spellcheck="true">--如果有默认值，那么可以使用default</span><span class="token keyword">exec</span> usp_getAllInfoBySexAndClassName <span class="token keyword">default</span><span class="token punctuation">,</span><span class="token string">'三班'</span><span class="token comment" spellcheck="true">--也可以使用 参数=值的方式调用存储过程，这样就与顺序没有关系了，</span><span class="token comment" spellcheck="true">--一旦使用了@name=value 之后，那么后续的参数就必须以@name=value的形式传递</span><span class="token comment" spellcheck="true">--exec usp_getAllInfoBySexAndClassName @className='三班',@sex='男'</span></code></pre><h6 id="创建带有输出参数的存储过程"><a href="#创建带有输出参数的存储过程" class="headerlink" title="创建带有输出参数的存储过程"></a><strong>创建带有输出参数的存储过程</strong></h6><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--根据性别和班级查询学员，同时返回总人数和指定性别的人数</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getInfoAndCount'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getInfoAndCountgo<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getInfoAndCount<span class="token variable">@totalnum</span> <span class="token keyword">int</span> output<span class="token punctuation">,</span><span class="token comment" spellcheck="true">--如果一个参数添加了output修饰，那么说明:它是一个输出参数,</span><span class="token comment" spellcheck="true">--说明了你会向服务器请求返回这个参数的值,服务器也知道标识了output的参数在以后需要返回</span><span class="token variable">@clanum</span> <span class="token keyword">int</span> output <span class="token punctuation">,</span><span class="token comment" spellcheck="true">--指定班级和性别的人数</span><span class="token variable">@className</span> nvarchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">--输入参数:需要用户传入值</span><span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span>​    <span class="token keyword">declare</span> <span class="token variable">@classId</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> classId <span class="token keyword">from</span> grade <span class="token keyword">where</span> className<span class="token operator">=</span><span class="token variable">@className</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--根据班级名称获取班级ID</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> classId<span class="token operator">=</span><span class="token variable">@classId</span> <span class="token operator">and</span> sex<span class="token operator">=</span><span class="token variable">@sex</span>​    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Student <span class="token comment" spellcheck="true">--总人数</span>​    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span> <span class="token operator">and</span> classId<span class="token operator">=</span><span class="token variable">@classId</span>go</code></pre><h6 id="调用有输出参数的存储过程"><a href="#调用有输出参数的存储过程" class="headerlink" title="调用有输出参数的存储过程"></a>调用有输出参数的存储过程</h6><p>–服务器返回值，需要创建对应的变量来接收</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@tnum</span> <span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token variable">@cnum</span> <span class="token keyword">int</span> <span class="token keyword">execute</span> usp_getInfoAndCount <span class="token variable">@tnum</span><span class="token punctuation">,</span><span class="token variable">@cnum</span><span class="token punctuation">,</span><span class="token string">'三班'</span><span class="token keyword">print</span> <span class="token variable">@tnum</span><span class="token keyword">print</span> <span class="token variable">@cnum</span></code></pre><h6 id="使用output的情况："><a href="#使用output的情况：" class="headerlink" title="使用output的情况："></a><strong>使用output的情况：</strong></h6><p><strong>1.返回多个值 2.返回的数据类型为非整型</strong></p><p><strong>（return 只能返回整型）</strong>–返回指定人数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getNameByNo'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getNameByNogo<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getNameByNo<span class="token variable">@cid</span> <span class="token keyword">int</span><span class="token keyword">as</span> ​    <span class="token keyword">declare</span> <span class="token variable">@cnt</span> <span class="token keyword">int</span>  ​    <span class="token keyword">set</span> <span class="token variable">@cnt</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> classId<span class="token operator">=</span> <span class="token variable">@cid</span><span class="token punctuation">)</span>​    <span class="token comment" spellcheck="true">--return 只能返回整数值</span>​    <span class="token keyword">return</span> <span class="token variable">@cnt</span>go<span class="token comment" spellcheck="true">--执行存储过程，接收return的返回值</span><span class="token keyword">declare</span> <span class="token variable">@count</span> <span class="token keyword">int</span> <span class="token keyword">execute</span> <span class="token variable">@count</span><span class="token operator">=</span> usp_getNameByNo <span class="token number">6</span><span class="token keyword">print</span> <span class="token variable">@count</span></code></pre><h5 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a><strong>触发器</strong></h5><p>–语法:</p><p>–create trigger tr_触发器名称</p><p>–on 表 after(for)/instead of 增加删除(delete) 修改</p><p>–as</p><p>–任意的逻辑代码 –存储过程</p><p>–go</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">Trigger</span> 触发器名 <span class="token keyword">On</span> {表<span class="token operator">|</span>视图}<span class="token punctuation">[</span><span class="token keyword">With</span> Encryption<span class="token punctuation">]</span>{{<span class="token keyword">For</span><span class="token operator">|</span><span class="token keyword">After</span><span class="token operator">|</span>Instead <span class="token keyword">of</span>} {<span class="token punctuation">[</span><span class="token keyword">Insert</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">Delete</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">Update</span><span class="token punctuation">]</span>}<span class="token punctuation">[</span><span class="token operator">Not</span> <span class="token keyword">For</span> <span class="token keyword">Replication</span><span class="token punctuation">]</span><span class="token keyword">as</span>SQL语句<span class="token punctuation">[</span><span class="token punctuation">,</span>…n<span class="token punctuation">]</span></code></pre><p>For：如果仅指定For关键字，而没指定After或Instead of，则默认After。</p><p>实例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'tr_emp_insert'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">trigger</span> tr_emp_insertgo <span class="token keyword">create</span> <span class="token keyword">trigger</span> tr_emp_insert<span class="token keyword">on</span> emp <span class="token keyword">for</span> <span class="token keyword">insert</span> <span class="token comment" spellcheck="true">--为emp表创建触发器，在你对grade表进行插入操作后触发</span><span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> empgo<span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>ename<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted <span class="token comment" spellcheck="true">--操作之后，新表(操作过后的表)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> deleted <span class="token comment" spellcheck="true">--操作之前，旧表（操作前的表）</span></code></pre><p>–两个临时表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'tr_emp_insert'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">trigger</span> tr_emp_insertgo<span class="token keyword">create</span> <span class="token keyword">trigger</span> tr_emp_insert<span class="token keyword">on</span> emp <span class="token keyword">for</span> <span class="token keyword">insert</span> <span class="token keyword">as</span><span class="token keyword">print</span> <span class="token string">'inserted表存储操作之后的 与当前操作相关的数据 ，而与之前表的数据无关'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted<span class="token keyword">print</span> <span class="token string">'deleted表存储操作之前的数据'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> deletedgo<span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>ename<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span></code></pre><p>记录增删改操作触发器中使用了两个逻辑(概念)表：<strong>Inserted</strong>表和<strong>Deleted</strong>表，它们的结构与定义触发器的表相同。Deleted保存要被删除的记录值或修改前的记录值(旧值)，Inserted保存要插入的记录值或修改后的记录值(新值)。也就是，在Insert触发器中，Inserted表保存要插入的记录，而Deleted表无记录；在Update触发器中，Inserted表保存修改后的记录，Deleted表保存修改前的记录；在Delete触发器中，Deleted表保存删除前的记录，而Inserted表无记录。</p><p>例：为emp表创建触发器，当有记录插入，删除或更新时，输出多少条被记录被插入，多少条被记录被删除，多少条被记录被更新</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">create</span> <span class="token keyword">trigger</span> StuIDU <span class="token keyword">on</span> emp<span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token punctuation">,</span><span class="token keyword">update</span><span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@insertnum</span> <span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token variable">@deletenum</span> <span class="token keyword">int</span><span class="token keyword">set</span> <span class="token variable">@insertnum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> inserted<span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token variable">@deletenum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> deleted<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token variable">@insertnum</span> <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span>  <span class="token variable">@deletenum</span><span class="token operator">></span><span class="token number">0</span>​    <span class="token keyword">print</span> cast<span class="token punctuation">(</span><span class="token variable">@insertnum</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被更新'</span><span class="token keyword">else</span>​    <span class="token keyword">if</span> <span class="token variable">@insertnum</span> <span class="token operator">></span><span class="token number">0</span>​        <span class="token keyword">print</span> cast<span class="token punctuation">(</span><span class="token variable">@insertnum</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被插入'</span>​    <span class="token keyword">else</span> ​        <span class="token keyword">print</span> cast<span class="token punctuation">(</span><span class="token variable">@deletenum</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被删除'</span>    go</code></pre><p> 1,已知学生表Stu含XH、XM等字段，分别表示学号和姓名等。现要求创建一个触发器StuIDU，记录增删改操作时触发，触发后显示当前执行的是什么操作和所影响的记录数。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">If</span> <span class="token keyword">Exists</span><span class="token punctuation">(</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> Sys<span class="token punctuation">.</span>Objects <span class="token keyword">Where</span> <span class="token keyword">Type</span><span class="token operator">=</span><span class="token string">'U'</span> <span class="token operator">and</span> Name<span class="token operator">=</span><span class="token string">'Stu'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--判断是否有Stu表</span><span class="token keyword">Drop</span> <span class="token keyword">Table</span> Stu<span class="token keyword">Create</span> <span class="token keyword">Table</span> Stu<span class="token punctuation">(</span>XH <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>XM <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>GO<span class="token keyword">Create</span> <span class="token keyword">Trigger</span> StuIDU <span class="token keyword">On</span> Stu <span class="token keyword">After</span> <span class="token keyword">Insert</span><span class="token punctuation">,</span><span class="token keyword">Delete</span><span class="token punctuation">,</span><span class="token keyword">Update</span> <span class="token keyword">As</span><span class="token keyword">Begin</span> <span class="token keyword">Declare</span> <span class="token variable">@In</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@Dn</span> <span class="token keyword">int</span> <span class="token keyword">Select</span> <span class="token variable">@In</span><span class="token operator">=</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">From</span> Inserted <span class="token keyword">Select</span> <span class="token variable">@Dn</span><span class="token operator">=</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">From</span> Deleted <span class="token keyword">If</span> <span class="token variable">@In</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> <span class="token variable">@Dn</span><span class="token operator">></span><span class="token number">0</span> <span class="token comment" spellcheck="true">--</span>  <span class="token keyword">Print</span> str<span class="token punctuation">(</span><span class="token variable">@In</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被更新'</span> <span class="token keyword">Else</span> <span class="token keyword">If</span> <span class="token variable">@In</span><span class="token operator">></span><span class="token number">0</span>  <span class="token keyword">Print</span> str<span class="token punctuation">(</span><span class="token variable">@In</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被插入'</span> <span class="token keyword">Else</span>  <span class="token keyword">Print</span> str<span class="token punctuation">(</span><span class="token variable">@Dn</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被删除'</span><span class="token keyword">End</span>GO<span class="token keyword">Insert</span> <span class="token keyword">Into</span> Stu<span class="token punctuation">(</span>XH<span class="token punctuation">,</span>XM<span class="token punctuation">)</span> <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'AAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">Into</span> Stu<span class="token punctuation">(</span>XH<span class="token punctuation">,</span>XM<span class="token punctuation">)</span> <span class="token keyword">Select</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'BBB'</span> <span class="token keyword">Union</span> <span class="token keyword">Select</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'CCC'</span><span class="token keyword">Update</span> Stu <span class="token keyword">Set</span> XH<span class="token operator">=</span>XH<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> XH<span class="token operator">></span><span class="token number">1</span><span class="token keyword">Delete</span> Stu<span class="token comment" spellcheck="true">--运行结果显示：</span><span class="token comment" spellcheck="true">--1条记录被插入</span><span class="token comment" spellcheck="true">--2条记录被插入</span><span class="token comment" spellcheck="true">--2条记录被更新</span><span class="token comment" spellcheck="true">--3条记录被删除</span></code></pre><p>2,已知学生图书借阅管理系统有三张表,图书表TuShu含书号、书名、册数等字段，读者表DuZhe含XH、XM等字段，分别表示学号和姓名，借阅表JieYue含SH、XH、JYRQ、GHRQ等字段，分别表示书号、学号、借阅日期、归还日期。现要求创建相关触发器，实现每借阅一本图书(插入一条借阅记录)，图书的库存册数自动减1，每归还一本图书(删除一条借阅记录)，图书的库存册数自动加1，更换借阅图书，库存册数作相应调整。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">If</span> <span class="token keyword">Exists</span><span class="token punctuation">(</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> Sys<span class="token punctuation">.</span>Objects <span class="token keyword">Where</span> <span class="token keyword">Type</span><span class="token operator">=</span><span class="token string">'U'</span> <span class="token operator">and</span> Name<span class="token operator">=</span><span class="token string">'TuShu'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--判断是否有TuShu表</span><span class="token keyword">Drop</span> <span class="token keyword">Table</span> JieYue<span class="token punctuation">,</span>TuShu<span class="token punctuation">,</span>DuZhe<span class="token keyword">Create</span> <span class="token keyword">Table</span> TuShu<span class="token punctuation">(</span>书号 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>书名 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>册数 <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">Into</span> TuShu <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'9787302161801'</span><span class="token punctuation">,</span><span class="token string">'Windows程序设计'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">Into</span> TuShu <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'9787302161802'</span><span class="token punctuation">,</span><span class="token string">'C++程序设计'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">Into</span> TuShu <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'9787302161803'</span><span class="token punctuation">,</span><span class="token string">'Win32汇编语言'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Create</span> <span class="token keyword">Table</span> DuZhe<span class="token punctuation">(</span>XH <span class="token keyword">Varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XM <span class="token keyword">Varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">Into</span> DuZhe<span class="token punctuation">(</span>XH<span class="token punctuation">,</span>XM<span class="token punctuation">)</span> <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'20120881101'</span><span class="token punctuation">,</span><span class="token string">'黄惠珍'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">Into</span> DuZhe<span class="token punctuation">(</span>XH<span class="token punctuation">,</span>XM<span class="token punctuation">)</span> <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'20120881102'</span><span class="token punctuation">,</span><span class="token string">'肖光'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Create</span> <span class="token keyword">Table</span> JieYue<span class="token punctuation">(</span>SH <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XH <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>JYRQ <span class="token keyword">DateTime</span><span class="token punctuation">,</span>GHRQ <span class="token keyword">DateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">If</span> <span class="token keyword">Exists</span><span class="token punctuation">(</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> Sys<span class="token punctuation">.</span>Objects <span class="token keyword">Where</span> <span class="token keyword">Type</span><span class="token operator">=</span><span class="token string">'TR'</span> <span class="token operator">and</span> Name<span class="token operator">=</span><span class="token string">'Jie'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--判断是否有Jie触发器</span><span class="token keyword">Drop</span> <span class="token keyword">Trigger</span> Jie<span class="token punctuation">,</span>Huan<span class="token punctuation">,</span>GengHuanGO<span class="token comment" spellcheck="true">--创建借阅触发器</span><span class="token keyword">Create</span> <span class="token keyword">Trigger</span> Jie <span class="token keyword">On</span> JieYue <span class="token keyword">After</span> <span class="token keyword">Insert</span> <span class="token keyword">As</span><span class="token keyword">Update</span> TuShu <span class="token keyword">set</span> 册数<span class="token operator">=</span>册数<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">Where</span> 书号 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">Select</span> SH <span class="token keyword">From</span> Inserted<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--被借图书册数减1</span>GO<span class="token comment" spellcheck="true">--创建归还触发器</span><span class="token keyword">Create</span> <span class="token keyword">Trigger</span> Huan <span class="token keyword">On</span> JieYue <span class="token keyword">After</span> <span class="token keyword">Delete</span> <span class="token keyword">As</span><span class="token keyword">Update</span> TuShu <span class="token keyword">Set</span> 册数<span class="token operator">=</span>册数<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">Where</span> 书号 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">Select</span> SH <span class="token keyword">From</span> Deleted<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--归还图书册数加1</span>GO<span class="token comment" spellcheck="true">--创建更换触发器</span><span class="token keyword">Create</span> <span class="token keyword">Trigger</span> GengHuan <span class="token keyword">On</span> JieYue <span class="token keyword">After</span> <span class="token keyword">Update</span> <span class="token keyword">As</span><span class="token keyword">Update</span> TuShu <span class="token keyword">Set</span> 册数<span class="token operator">=</span>册数<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">Where</span> 书号 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">Select</span> SH <span class="token keyword">From</span> Inserted<span class="token punctuation">)</span><span class="token keyword">Update</span> TuShu <span class="token keyword">Set</span> 册数<span class="token operator">=</span>册数<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">Where</span> 书号 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">Select</span> SH <span class="token keyword">From</span> Deleted<span class="token punctuation">)</span>GO<span class="token keyword">Insert</span> <span class="token keyword">Into</span> JieYue <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'9787302161802'</span><span class="token punctuation">,</span><span class="token string">'20120881101'</span><span class="token punctuation">,</span>GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">Into</span> JieYue <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'9787302161803'</span><span class="token punctuation">,</span><span class="token string">'20120881101'</span><span class="token punctuation">,</span>GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> JieYue<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> TuShuGO<span class="token keyword">Update</span> JieYue <span class="token keyword">Set</span> SH<span class="token operator">=</span><span class="token string">'9787302161801'</span> <span class="token keyword">Where</span> SH<span class="token operator">=</span><span class="token string">'9787302161803'</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> JieYue<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> TuShuGO<span class="token keyword">Delete</span> JieYue<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> JieYuee<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">From</span> TuShu<span class="token comment" spellcheck="true">/*运行结果显示：SH             XH          JYRQ                    GHRQ-------------- ----------- ----------------------- -----------------------9787302161802  20120881101 2016-11-21 18:43:58.903 2016-12-11 18:43:58.9039787302161803  20120881101 2016-11-21 18:43:59.107 2016-12-11 18:43:59.107书号           书名               册数-------------- ---------------    -----------9787302161801  Windows程序设计    29787302161802  C++程序设计        29787302161803  Win32汇编语言     3SH             XH          JYRQ                    GHRQ-------------- ----------- ----------------------- -----------------------9787302161802  20120881101 2016-11-21 18:43:58.903 2016-12-11 18:43:58.9039787302161801  20120881101 2016-11-21 18:43:59.107 2016-12-11 18:43:59.107书号           书名                 册数-------------- ---------------    -----------9787302161801  Windows程序设计    19787302161802  C++程序设计       29787302161803  Win32汇编语言     4SH             XH          JYRQ                    GHRQ-------------- ----------- ----------------------- -----------------------书号           书名                册数-------------- ---------------    -----------9787302161801  Windows程序设计    29787302161802  C++程序设计         39787302161803  Win32汇编语言      4*/</span></code></pre><p>3.创建简易酒店管理系统相关触发器，要求每入住一个旅客(插入一个旅客记录)，客房入住人数自动加1，每退房一个旅客(删除一个旅客记录)，客房入住人数自动减1，旅客调整房间，客房入住人数作相应调整。</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">create</span> <span class="token keyword">trigger</span> tr_house <span class="token keyword">on</span> 旅客<span class="token keyword">for</span> <span class="token keyword">delete</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@innum</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@denum</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@innum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> inserted<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token variable">@denum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> deleted<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token variable">@innum</span> <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> <span class="token variable">@denum</span><span class="token operator">&lt;=</span><span class="token number">0</span>    <span class="token keyword">update</span> 客房 <span class="token keyword">set</span> 入住人数<span class="token operator">=</span>入住人数<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> 房号 <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> 房号 <span class="token keyword">from</span> inserted<span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token variable">@innum</span> <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> <span class="token variable">@denum</span> <span class="token operator">></span> <span class="token number">0</span><span class="token keyword">begin</span>    <span class="token keyword">update</span> 客房 <span class="token keyword">set</span> 入住人数<span class="token operator">=</span>入住人数<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> 房号 <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> 房号 <span class="token keyword">from</span> inserted<span class="token punctuation">)</span>    <span class="token keyword">update</span> 客房 <span class="token keyword">set</span> 入住人数<span class="token operator">=</span>入住人数<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">where</span> 房号 <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> 房号 <span class="token keyword">from</span> deleted<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token variable">@innum</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">and</span> <span class="token variable">@denum</span><span class="token operator">></span><span class="token number">0</span><span class="token keyword">begin</span>    <span class="token keyword">update</span> 客房 <span class="token keyword">set</span> 入住人数<span class="token operator">=</span>入住人数<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">where</span> 房号 <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> 房号 <span class="token keyword">from</span> deleted<span class="token punctuation">)</span><span class="token keyword">end</span>go<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 客房<span class="token keyword">Insert</span> <span class="token keyword">Into</span> 旅客<span class="token punctuation">(</span>身份证号<span class="token punctuation">,</span>姓名<span class="token punctuation">,</span>房号<span class="token punctuation">)</span> <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'123…'</span><span class="token punctuation">,</span><span class="token string">'AAA'</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 客房<span class="token keyword">Update</span> 旅客 <span class="token keyword">Set</span> 房号<span class="token operator">=</span><span class="token number">201</span> <span class="token keyword">Where</span> 姓名<span class="token operator">=</span><span class="token string">'AAA'</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  客房<span class="token keyword">Delete</span> 旅客 <span class="token keyword">Where</span> 姓名<span class="token operator">=</span><span class="token string">'AAA'</span><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  客房<span class="token comment" spellcheck="true">/*运行后结果显示：房号        入住人数---------- ----------101  0201  0房号        入住人数---------- ----------101  1201  0房号        入住人数---------- ----------101  0201  1房号        入住人数---------- ----------101  0201  0*/</span></code></pre><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a><strong>练习</strong></h5><p>1.已知学生表XS有学号、姓名、毕业院校、成绩(CJ)等字段，请写一个SQL语句显示毕业院校的学生人数多于1个的毕业院校及其人数，并按学生人数升序、毕业院校降序显示。结果显示如下：<br>毕业院校                   人数<br>——————————————————————<br>厦门理工学院                  4<br>福建工程学院                  7</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 毕业院校 <span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  人数 <span class="token keyword">from</span> xs <span class="token keyword">group</span> <span class="token keyword">by</span> 毕业院校 <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token operator">></span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 人数</code></pre><p>2.已知学生表XS有学号、姓名、毕业院校、成绩(CJ)、出生(CS)等字段，请写一个SQL语句显示各分数段及其人数(注意：分数范围为0<del>99及NULL)。结果显示如下：<br>分数段        人数<br>————————————————<br>40</del>49            1<br>50<del>59            2<br>60</del>69            2<br>70<del>79            4<br>80</del>89            4<br>90~99            3<br>~                4</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 分数段<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 人数 <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> cj<span class="token punctuation">,</span>分数段<span class="token operator">=</span><span class="token keyword">case</span> <span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token keyword">then</span> <span class="token string">'0~9'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">10</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">19</span> <span class="token keyword">then</span> <span class="token string">'10~19'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">20</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">29</span> <span class="token keyword">then</span> <span class="token string">'20~29'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">30</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">39</span> <span class="token keyword">then</span> <span class="token string">'30~39'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">40</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">49</span> <span class="token keyword">then</span> <span class="token string">'40~49'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">50</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">59</span> <span class="token keyword">then</span> <span class="token string">'50~59'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">69</span> <span class="token keyword">then</span> <span class="token string">'60~69'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">79</span> <span class="token keyword">then</span> <span class="token string">'70~79'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">89</span> <span class="token keyword">then</span> <span class="token string">'80~89'</span><span class="token keyword">when</span> CJ<span class="token operator">>=</span><span class="token number">90</span> <span class="token operator">and</span> CJ<span class="token operator">&lt;=</span><span class="token number">99</span> <span class="token keyword">then</span> <span class="token string">'90~99'</span><span class="token keyword">else</span> <span class="token string">'~'</span><span class="token keyword">end</span><span class="token keyword">from</span> xs<span class="token punctuation">)</span> tmp <span class="token keyword">group</span> <span class="token keyword">by</span> tmp<span class="token punctuation">.</span>分数段 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 分数段<span class="token operator">=</span><span class="token string">'~'</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span></code></pre><p>1)–查询图书的信息，要求图书的价格显示为：</p><p>–价格为null :显示为价格未知</p><p>–价格为10-20：显示为价格10-20</p><p>–价格为20-50：显示为价格适中</p><p>–其他：原样显示</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> bookid<span class="token punctuation">,</span>bookname<span class="token punctuation">,</span><span class="token keyword">case</span> <span class="token keyword">when</span> price <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token string">'价格未知'</span><span class="token keyword">when</span> price <span class="token operator">&lt;</span><span class="token number">20</span> <span class="token operator">and</span> price <span class="token operator">>=</span><span class="token number">10</span> <span class="token keyword">then</span> <span class="token string">'价格在10-20之间'</span><span class="token keyword">when</span> price <span class="token operator">&lt;</span><span class="token number">30</span> <span class="token operator">and</span> price <span class="token operator">>=</span><span class="token number">20</span> <span class="token keyword">then</span> <span class="token string">'价格适中'</span> <span class="token keyword">else</span> <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token keyword">end</span> <span class="token keyword">as</span> 价格 <span class="token keyword">from</span> book</code></pre><p>2)</p><p>子查询：一个查询中还包含着另外n个查询</p><p>分类：独立子查询（直接运行子查询语句）相关子查询（子查询中引用了父查询的结果）</p><p>使用方法:1.子查询作为条件：如果跟在&gt; &lt; &gt;= &lt;= …后面要保证子查询只返回了一个值</p><p>A.如果子查询返回了一行多列值，可以使用exists/not exists，否则报错</p><p>B.如果返回了多行一列值，可以使用in /not in</p><p>2.子查询可以作为结果集</p><p>A.如果需要用到子查询中的字段，必须保证字段有名字（需要添加新的列名）</p><p>B.子查询做结果集必须命名</p><p>3.子查询作为列的值</p><p>–查询学号是19的学生参加最近一次office课程考试的成绩,要求输出学生的姓名，成绩</p><p>–1.子查询</p><p>–2.如果没有相应的数据，则可以更改数据表中的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Student<span class="token punctuation">.</span>studentName<span class="token punctuation">,</span>Result<span class="token punctuation">.</span>studentResult <span class="token keyword">from</span> Student <span class="token keyword">inner</span> <span class="token keyword">join</span> Result <span class="token keyword">on</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span>Result<span class="token punctuation">.</span>studentNo <span class="token keyword">where</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span><span class="token number">19</span> <span class="token operator">and</span> ExamDate<span class="token operator">=</span><span class="token punctuation">(</span>​    <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>ExamDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token punctuation">(</span>​        <span class="token keyword">select</span> subjectId <span class="token keyword">from</span> Subject <span class="token keyword">where</span> SubjectName<span class="token operator">=</span><span class="token string">'office'</span> <span class="token punctuation">)</span> <span class="token operator">and</span> studentNo<span class="token operator">=</span><span class="token number">19</span>​    <span class="token punctuation">)</span><span class="token operator">and</span> subjectId<span class="token operator">=</span><span class="token punctuation">(</span>​    <span class="token keyword">select</span> subjectId <span class="token keyword">from</span> Subject <span class="token keyword">where</span> SubjectName<span class="token operator">=</span><span class="token string">'office'</span>​    <span class="token punctuation">)</span></code></pre><p>–使用变量</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@subjectName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'office'</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@subjectId</span> <span class="token keyword">int</span> <span class="token keyword">set</span> <span class="token variable">@subjectId</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectId <span class="token keyword">from</span> subject <span class="token keyword">where</span> subjectName<span class="token operator">=</span><span class="token variable">@subjectName</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@time</span> <span class="token keyword">datetime</span><span class="token comment" spellcheck="true">--考试日期</span><span class="token keyword">select</span> <span class="token variable">@time</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>examDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span> <span class="token operator">and</span> studentNo<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token keyword">select</span> Student<span class="token punctuation">.</span>studentName<span class="token punctuation">,</span>Result<span class="token punctuation">.</span>studentResult <span class="token keyword">from</span> Student <span class="token keyword">inner</span> <span class="token keyword">join</span> Result <span class="token keyword">on</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span>Result<span class="token punctuation">.</span>studentNo <span class="token keyword">where</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span><span class="token number">19</span> <span class="token operator">and</span> ExamDate<span class="token operator">=</span><span class="token variable">@time</span> <span class="token operator">and</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span></code></pre><p>3）检查学生office最近一次考试的成绩是否有不及格，如有，没人加2分，高于95的学生不加分，直至所有学生及格</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@subjectName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'office'</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@subjectId</span> <span class="token keyword">int</span> <span class="token keyword">set</span> <span class="token variable">@subjectId</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectId <span class="token keyword">from</span> subject <span class="token keyword">where</span> subjectName<span class="token operator">=</span><span class="token variable">@subjectName</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@time</span> <span class="token keyword">datetime</span><span class="token comment" spellcheck="true">--考试日期</span><span class="token keyword">select</span> <span class="token variable">@time</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>examDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​        <span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span> <span class="token operator">and</span> examDate<span class="token operator">=</span><span class="token variable">@time</span> <span class="token operator">and</span> studentResult<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span>​        <span class="token keyword">begin</span>​            <span class="token keyword">update</span> Result <span class="token keyword">set</span>  studentResult<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">where</span> studentResult<span class="token operator">&lt;=</span><span class="token number">95</span> <span class="token operator">and</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span> <span class="token operator">and</span> examDate<span class="token operator">=</span><span class="token variable">@time</span>​        <span class="token keyword">end</span>​        <span class="token keyword">else</span> ​            <span class="token keyword">break</span><span class="token punctuation">;</span>​    <span class="token keyword">end</span></code></pre><p>4）打印图案</p><p>–★</p><p>–★★</p><p>–★★★</p><p>–★★★★</p><p>–★★★★★</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@rownum</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">declare</span> <span class="token variable">@colnum</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">declare</span> <span class="token variable">@graph</span> nvarchar<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'★'</span><span class="token comment" spellcheck="true">--set @graph+='★★★'</span><span class="token comment" spellcheck="true">--print @graph</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">@rownum</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​        <span class="token comment" spellcheck="true">--set @colnum=1</span>​        <span class="token comment" spellcheck="true">--set @graph=''</span>​        <span class="token comment" spellcheck="true">--while(@colnum&lt;=@rownum)</span>​        <span class="token comment" spellcheck="true">--    begin</span>​                <span class="token comment" spellcheck="true">--set @colnum+=1</span>​        <span class="token keyword">print</span> <span class="token variable">@graph</span>​                <span class="token keyword">set</span> <span class="token variable">@graph</span><span class="token operator">+</span><span class="token operator">=</span><span class="token string">'★'</span>​            <span class="token comment" spellcheck="true">--end</span>​        <span class="token keyword">set</span> <span class="token variable">@rownum</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span> ​    <span class="token keyword">end</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> sql   </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown简介</title>
      <link href="/2019/11/01/%E7%AE%80%E5%8D%95%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/11/01/%E7%AE%80%E5%8D%95%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="文章简单介绍"><a href="#文章简单介绍" class="headerlink" title="文章简单介绍"></a>文章简单介绍</h5><h6 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h6><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h6 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h6><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> xxx<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署hexo走过的坑</title>
      <link href="/2019/08/16/%E9%83%A8%E7%BD%B2hexo%E8%B5%B0%E8%BF%87%E7%9A%84%E5%9D%91/"/>
      <url>/2019/08/16/%E9%83%A8%E7%BD%B2hexo%E8%B5%B0%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo的搭建"><a href="#hexo的搭建" class="headerlink" title="hexo的搭建"></a>hexo的搭建</h3><h4 id="提示hexo命令找不到"><a href="#提示hexo命令找不到" class="headerlink" title="提示hexo命令找不到"></a>提示hexo命令找不到</h4><ul><li><h5 id="在系统的环境变量中加入自己博客系统的hexo路径"><a href="#在系统的环境变量中加入自己博客系统的hexo路径" class="headerlink" title="在系统的环境变量中加入自己博客系统的hexo路径"></a>在系统的环境变量中加入自己博客系统的hexo路径</h5></li><li><p>比如我的：J:\hexo\node_modules.bin</p></li><li><p>hexo就是我的博客系统所在的文件夹</p></li></ul><h4 id="git命令找不到"><a href="#git命令找不到" class="headerlink" title="git命令找不到"></a>git命令找不到</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
