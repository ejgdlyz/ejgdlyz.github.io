<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux基础教程</title>
      <link href="/2019/11/03/linux/"/>
      <url>/2019/11/03/linux/</url>
      
        <content type="html"><![CDATA[<h4 id="一-Linux目录"><a href="#一-Linux目录" class="headerlink" title="一.Linux目录"></a>一.Linux目录</h4><h6 id="1-目录简介"><a href="#1-目录简介" class="headerlink" title="1.目录简介"></a>1.目录简介</h6><p>/根目录</p><p>/dev 管理设备</p><p>/etc 配置文件</p><p><strong>/home家目录</strong></p><p>/lib动态库</p><p><strong>/usr 已经安装的软件</strong></p><p>/opt 未安装的软件放置目录</p><p>/sbin 高权限指令</p><p>/selinux 安全</p><p>/tmp 临时文件</p><p><strong>/media 识别外部设备，U盘，光驱</strong></p><p><strong>/var 日志文件</strong></p><h4 id="二-Linux实操"><a href="#二-Linux实操" class="headerlink" title="二.Linux实操"></a>二.Linux实操</h4><h5 id="1-远程登录Linux系统"><a href="#1-远程登录Linux系统" class="headerlink" title="1.远程登录Linux系统"></a>1.远程登录Linux系统</h5><p>1）远程登录的软件</p><p>​    xshell5</p><p>2）远程上传和下载软件</p><p>​    xftp5(链接时选用SFTP协议，才能使用22端口)</p><h5 id="2-vi和vim编辑器"><a href="#2-vi和vim编辑器" class="headerlink" title="2.vi和vim编辑器"></a>2.vi和vim编辑器</h5><p>vim可以认为是vi的增强版</p><p>1）vi和vim的三种常见模式</p><ul><li><p>正常模式</p><p>再此模式下，可以使用快捷键，上下左右移动光标，复制和删除等。</p></li><li><p>插入模式/编辑模式</p><p>输入i即可进入此模式</p></li><li><p>命令行模式</p><p> 存盘，退出vim等操作</p><img src="http://116.62.203.42/linuximg/1.png" alt="img" style="zoom:80%;"></li><li><p>快速入门案例</p><p>开发一个hello.java程序</p><p>public class Hello<br>{</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prntln</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>}</p><ul><li>快捷键的使用</li></ul><p>1）复制当前行 yy，复制当前行的下5行，5yy，并粘贴 p</p><p>2）删除当前行是dd,删除当前行的下5行是 5dd</p><p>3）在文件中查找某个单词，命令行下 /关键词 回车 就能查找</p><p>4）设置文件的行号 命令行下 输入 [：set nu]，取消行号 [:set nonu]</p><p>5）编辑/etc/profile文件，到达文件的最末行[G]和最首行[gg]，此操作是在正常模式下</p><p>6）撤销动作，输入hello 然后撤销[正常模式下:u]</p><p>7）编辑一个文件/etc/profile，并将光标移动到第20行[shift+g]</p><p>​    ①显示行号[:set nu]</p><p>​    ②输入20这个数[正常模式]</p><p>​    ③输入shift+g[正常模式]</p></li></ul><h5 id="3-开关机和重启命令"><a href="#3-开关机和重启命令" class="headerlink" title="3.开关机和重启命令"></a>3.开关机和重启命令</h5><ul><li>基本介绍</li></ul><p>​    shutdown</p><p>​        shutdown -h now        立即关机</p><p>​        shutdown -h 1               1分钟后关机</p><p>​        shutdown -r now         立即重启</p><p>​    halt                   直接使用，等价于关机</p><p>​    reboot              重启系统</p><p>​    sync                  把内存的数据保存到磁盘上(关机或重启之前使用)</p><ul><li><p>用户的登录和注销</p><p>logout—–退出远程登录</p></li></ul><h5 id="4-用户管理"><a href="#4-用户管理" class="headerlink" title="4.用户管理"></a>4.用户管理</h5><ul><li><p>基本介绍</p><img src="http://116.62.203.42/linuximg/2.png" alt="11" style="zoom:80%;"></li><li><p><strong>添加用户(创建用户时，会自动为其创建组并且创建与其同名的家目录)</strong></p><p>useradd 【选项】用户名</p><p>[root@localhost ~]# useradd xiaoming</p><p>useradd -d 指定目录(未存在目录)  用户名   ——&gt;在指定目录创建用户</p></li><li><p><strong>为用户创建密码或者修改密码</strong></p><p>passwd 用户名</p><p>[root@localhost ~]# passwd xiaoming</p></li><li><p><strong>删除用户</strong></p><p>userdel 用户名</p><p>①删除用户，保留家目录</p><p>[root@localhost home]# userdel  xiaoming</p><p>②删除用户以及用户主目录</p><p>[root@localhost home]# userdel -r xm</p><p>删除用户时，一般不会删除家目录</p></li><li><p><strong>查询用户信息</strong></p><p>id 用户名</p><p>[root@localhost home]# id zzy<br>uid=500(zzy) gid=500(zzy) 组=500(zzy)</p><p>用户id号             所在组id号              组名称</p></li><li><p><strong>切换用户</strong></p><p>su - 非root用户名</p><p>[root@localhost home]# su - zzy</p><p>root切换到权限低的用户不需要密码</p><p>exit 可以回到原用户</p></li><li><p><strong>查看当前用户</strong></p><p>whoami</p><p>[root@localhost home]# whoami<br>root</p></li><li><p><strong>用户组</strong></p><p>介绍：类似于角色，系统可以对有共性的多个用户进行统一的管理</p><p><strong>增加组：groupadd 组名</strong></p><p>演示：[root@localhost /]# groupadd wd</p><p><strong>删除组：groupdel 组名</strong></p><p>演示：[root@localhost /]# groupdel wd</p><p><strong>增加用户时直接加上组:useradd -g  用户组 用户名</strong></p><p>案例：增加一个zwj用户，将其指定到wudang组</p><p>[root@localhost /]# groupadd wudang</p><p>[root@localhost /]# useradd -g wudang zwj </p><p>[root@localhost /]# useradd -g wudang zwj<br>[root@localhost /]# id zwj<br>uid=501(zwj) gid=501(wudang) 组=501(wudang)</p><p><strong>修改用户组：usermod -g 用户组 用户名</strong></p><p>案例：创建一个shaolin组，修改zwf所在组</p><p>[root@localhost /]# groupadd shaolin<br>[root@localhost /]# usermod -g shaolin zwj<br>[root@localhost /]# id zwj<br>uid=501(zwj) gid=502(shaolin) 组=502(shaolin)</p></li><li><p><strong>用户和组的配置文件</strong></p><p>/etc/passwd 用户配置文件 vim /etc/passwd</p><img src="http://116.62.203.42/linuximg/3.png" alt="1570349096959" style="zoom:80%;"><p>zzy用户名：x加密后的密码：500用户id：500组id：/home/zzy 家目录 ：shell</p><p>/etc/ shadow 口令配置文件</p><p>vim /etc/shadow</p><img src="http://116.62.203.42/linuximg/4.png" alt="1570349386555" style="zoom:80%;"><p>/etc/group 组配置文件</p><p>vim /etc/group</p><img src="http://116.62.203.42/linuximg/5.png" alt="1570349420084" style="zoom:80%;"></li></ul><h5 id="5-实用指令"><a href="#5-实用指令" class="headerlink" title="5.实用指令"></a>5.实用指令</h5><ul><li><p><strong>指定运行级别</strong></p><img src="http://116.62.203.42/linuximg/6.png" alt="1570350140600" style="zoom:80%;"><p>0：关机</p><p>1：单用户（找回丢失密码）</p><p>2：多用户状态没有网络服务</p><p>3：多用户状态有网络服务</p><p>4：系统未使用保留给用户</p><p>5：图像界面</p><p>6：系统重启</p><p>[root@localhost /]# vim /etc/inittab</p><img src="http://116.62.203.42/linuximg/7.png" alt="1570350392095" style="zoom:80%;"><p>常用的运行级别是3和5，要修改默认级别可改配置文件/etc/inittab的id:5:initdefault:这一行的数字</p><p><strong>切换到指定运行级别的指令：</strong></p><p>命令：init [0123456]</p><p>案例：运用init切换用户级别，5-3,然后关机</p><p> init 5</p><p> init 3</p><p> init 0</p><p><strong>找回丢失的root密码</strong></p><p>​    ①进入到单用户模式(因为进入到单用户，root不需要密码就能登录)</p><p>​    ②修改密码</p><p>开机-&gt;引导是输入e -&gt;看到一个界面a输入e-&gt;看到一个新的界面b，选中第二行(编辑内核) 输入e-&gt;在此行的最后输入 1 ，回车 -&gt;回到b界面，输入b，此时就会进入单用户模式。然后输入passwd root修改密码即可</p></li><li><p><strong>帮助指令</strong></p><p>对某个指令不熟悉时，通过帮助指令来了解使用方法</p><p><strong>man [命令或配置文件]</strong></p><p>案例：</p><p>查看ls的帮助</p><p>man ls</p><p><strong>help 命令</strong></p><h6 id="help-cd"><a href="#help-cd" class="headerlink" title="help cd"></a>help cd</h6></li></ul><h6 id="文件目录类指令"><a href="#文件目录类指令" class="headerlink" title="文件目录类指令"></a>文件目录类指令</h6><ul><li><p><strong>pwd</strong></p><p>显示当前工作目录的绝对路径</p><p>[root@localhost ~]# pwd<br>/root</p></li><li><p><strong>ls指令</strong></p><p>ls [选项] [目录或文件]</p><p>-a：显示当前目录所有文件信息（包括隐藏文件）</p><p>-l:以列表显示文件的详细信息</p></li><li><p><strong>cd命令</strong></p><p>cd [参数] </p><p>cd ~（可省略）回到家目录</p><p>cd .. 回到当前目录的上一级目录</p><p>理解：相对路径和绝对路径</p></li><li><p><strong>mkdir指令</strong></p><p>mkdir [选项] [创建的目录]</p><p>[root@localhost ~]# mkdir /home/dog</p><p>-p：创建多级目录</p><p>[root@localhost home]# mkdir -p /home/animal/tiger</p></li><li><p><strong>rmdir删除空目录</strong></p><p>rmdir [选项] 要删除的空目录</p><p>[root@localhost home]# rmdir /home/dog</p></li><li><p><strong>rm -rf 指令</strong></p><p>[root@localhost home]# rmdir animal<br>rmdir: 删除 “animal” 失败: 目录非空<br>[root@localhost home]# rm -rf animal</p></li><li><p><strong>touch指令</strong></p><p>touch 文件名称   —创建一个空文件</p><p>touch hello.txt</p><p>创建多个文件</p><p>touch a1.txt a2.txt</p></li><li><p><strong>cp指令</strong></p><p>cp [选项] source(源文件) dest(目标路径)</p><p>-r：递归复制整个文件夹</p><p>拷贝单个文件<br>[root@localhost home]# cp aaa.txt bbb/<br>拷贝整个目录</p><p>[root@localhost home]# cp -r bbb ccc</p><p>强制覆盖不提示的方法：\cp</p></li><li><p><strong>rm指令</strong></p><p>rm [选项] 要删除的文件或者目录</p><p>-r:递归删除整个文件</p><p>-f:强制删除不提示</p><p>[root@localhost home]# rm aaa.txt<br>rm：是否删除普通空文件 “aaa.txt”？y</p><p>[root@localhost home]# rm -rf bbb</p></li><li><p><strong>mv命令</strong></p><p>mv 移动文件与目录或者重命名</p><p>mv oldFileName newFileName —–重命名(同一目录)</p><p>[root@localhost home]# mv hello.txt world.txt</p><p>mv /temp/aa /targetfolder———移动</p><p>[root@localhost home]# mv world.txt ./zzy/</p><p>移动的同时重命名</p><p>[root@localhost zzy]# mv world.txt /home/hello.txt</p></li><li><p><strong>cat指令</strong></p><p>cat [选项] 要查看的文件</p><p>只能浏览文件信息，不能修改</p><p>-n:显示行号</p><p>cat -n hello.txt</p><p>分页显示（通过管道符）</p><p>[root@localhost home]# cat hello.txt | more</p></li><li><p><strong>more指令</strong></p><p>more 要查看的文件</p><p>空格：代表下一页</p><p>Enter:下一行</p><p>q:退出</p><p>Ctrl+f:向下滚动一屏</p><p>Ctrl+b:向上滚动一屏</p><p>=：当前行号</p><p>:f 输出文件名和当前行号</p></li><li><p><strong>less指令</strong></p><p>less 要查看的文件</p><p>是用于较大文件，分屏查看文件内容，分步加载文件内容。</p></li><li><p><strong>(&gt;)和&gt;&gt;指令</strong></p><p>输出重定向&gt;(覆盖原来内容)</p><p>追加&gt;&gt;(追加到文件尾部)</p><p>ls -l &gt;a.txt  ——将列表的内容写入a.txt （覆盖写）</p><p>ls -al &gt;&gt;b.txt   ——将列表的内容追加写到b.txt</p><p>cat a.txt &gt;b.txt——a.txt的内容覆盖写到b.txt</p><p>echo “内容” &gt;c.txt——-覆盖写到c.txt</p><p>echo “内容”&gt;&gt;c.txt ——–追加写到c.txt</p></li><li><p><strong>cal</strong></p><p>cal 查看日历信息</p></li><li><p><strong>echo指令</strong></p><p>作用：输出内容到控制台</p><p>echo [选项] [输出内容]</p><p>使用echo输出环境变量的路径</p><p>[root@localhost ~]# echo $PATH<br>/usr/lib/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</p><p>使用echo输出hello world</p><p>[root@localhost ~]# echo “hello world”<br>hello world</p></li><li><p><strong>head指令</strong></p><p>head 文件名 [查看文件的前10行内容]</p><p>head -n 5 [查看文件的前5行内容]</p><p>[root@localhost home]# head  -n 5 hello.txt</p><p>应用实例：查看/etc/profile的前5行代码</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># head -n 5 /etc/profile</span></code></pre></li><li><p><strong>tail指令</strong></p><p>显示文件尾部内容，用法类似head指令</p><p>tail 文件名</p><p>tail -n 文件名</p><p>tail -f 文件名 [追踪该文件的所有更新]</p><p>案例：实时监控hello.txt</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tail</span> -f hello.txt</code></pre></li><li><p><strong>ln软链接指令</strong></p><p>类似于windows<code>的快捷方式</code></p><p>ln -s [源文件或目录] [软连接名] </p><p>案例：创建一个链接到root的快捷方式</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s /root linktoroot</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd linktoroot</span></code></pre><p>当使用pwd查看当前目录时，仍然在当前目录</p><p>删除软链接</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -rf linktoroot </span></code></pre><p> —-(注意不要带/)</p></li><li><p><strong>history指令</strong></p><p>查看已经执行过的指令</p><p>history</p><p>显示所有历史指令</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># history </span></code></pre><p>显示最近的10个指令</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># history 10</span></code></pre><p>执行历史编号为5的指令</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># !298</span></code></pre></li></ul><h6 id="时间日期类指令"><a href="#时间日期类指令" class="headerlink" title="时间日期类指令"></a>时间日期类指令</h6><ul><li><p><strong>date指令</strong></p><p>基本语法：</p><p>date 显示当前时间</p><p>date +%Y 显示当前年份</p><p>date +% m 显示当前月份</p><p>date +%d 显示当前是哪一天</p><p>date “+%Y-%m-%d-%H-%M-%S” 显示年月日时分秒</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date</span>2019年 10月 07日 星期一 21:02:54 CST<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date +%Y</span>2019<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date "+%Y-%m-%d-%H-%M-%S"</span>2019-10-07-21-03-49</code></pre><p>设置系统时间</p><pre class=" language-bash"><code class="language-bash"><span class="token function">date</span> -s <span class="token string">"2018-10-10 11:20:20"</span></code></pre></li><li><p><strong>cal查看日历</strong></p><p>cal [选项] 显示本月历</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cal</span></code></pre><p>显示2020年的整年日历</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cal 2020</span></code></pre></li></ul><h6 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h6><ul><li><p><strong>find指令</strong></p><p>find [搜索目录] [选项]</p><p>-name 指定文件名查找</p><p>-user 指定用户名所有文件</p><p>-size 指定文件的大小(+20M查找&gt;20M的文件)[+n 大于 -n 小于 n 等于] [或者20K ]</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find /home -name hello.txt</span>/home/hello.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find /home -user zzy</span></code></pre><p>查找以txt结尾的文件（尽量不在本目录使用）</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# find / -name *.txt</code></pre></li><li><p><strong>locate指令</strong></p><p>快速定位文件路径（基于locate的数据库实现快速定位）</p><p>locate 搜索文件</p><p>注意：使用locate之前，必须先使用updatedb指令创建locate数据库</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># updatedb</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># locate hello.txt</span>/home/hello.txt</code></pre></li><li><p><strong>grep指令和管道符号|</strong></p><p>grep过滤查找 </p><p>管道符|：表示将前一个命令的处理结果输出传递给后面的命令处理。</p><p>grep [选项] 查找内容 源文件</p><p>-n 显示匹配行及行号</p><p>-i 忽略字母大小写</p><p>案例:在hello.txt查找hello所在行，并显示行号</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grep -n hello /home hello.txt</span>hello.txt:66:hello<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat hello.txt | grep -n hello</span>66:hello</code></pre></li></ul><h6 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h6><ul><li><p><strong>gzip和gunzip指令</strong></p><p>gzip 文件 [压缩文件]</p><p>gunzip 文件.gz [解压缩文件]</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># gzip hello.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a.txt  hello.txt.gz  mycal  zzy<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># gunzip hello.txt.gz</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a.txt  hello.txt  mycal  zzy</code></pre><p>当使用gzip进行压缩文件后，不会保留源文件</p></li><li><p><strong>zip和unzip指令</strong></p><p>zip [选项] xxx.zip 将要压缩的内容 [压缩文件或者命令]</p><p>-r 递归压缩</p><p>压缩home目录下的所有文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># zip -r mypack.zip /home/</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a.txt  hello.txt  mycal  mypack.zip  zzy</code></pre><p>unzip [选项] xxx.zip</p><p>将mypack.zip解压到/opt/tmp目录</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># unzip -d /opt/tmp mypack.zip</span><span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>home</code></pre></li><li><p><strong>tar指令</strong></p><p>基本语法：tar [选项] xxx.tar.gz 打包的内容 [打包目录，压缩后的文件格式为.tar.gz]</p><p>-c:产生.tar打包文件</p><p>-v:显示详细信息</p><p>-f:指定压缩后的文件名</p><p>-z:打包同时压缩</p><p>-x:解包.tar文件</p><p>将/home/a1.txt,a2.txt压缩成a.tar.gz</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zcvf a.tar.gz a1.txt a2.txt</span>a1.txta2.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a1.txt  a2.txt  a.tar.gz  a.txt  hello.txt  mycal  zzy</code></pre><p>将/home的文件压缩成myhome.tar.gz</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zcvf myhome.tar.gz /home/</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a1.txt  a2.txt  a.tar.gz  a.txt  hello.txt  mycal  myhome.tar.gz  zzy</code></pre><p>将a.tar.gz解压到当前目录</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf a.tar.gz </span>a1.txta2.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>a1.txt  a2.txt  a.tar.gz  a.txt  hello.txt  mycal  myhome.tar.gz  zzy</code></pre><p>将myhome.tar.gz解压到/opt/tmp目录下（指定的解压缩路径必须存在）</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -zxvf myhome.tar.gz -C /opt/tmp/</span></code></pre></li></ul><h5 id="6-组管理和权限管理"><a href="#6-组管理和权限管理" class="headerlink" title="6.组管理和权限管理"></a>6.组管理和权限管理</h5><h6 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h6><ul><li><p>linux组的基本介绍</p><p>在Linux中的每个用户必须属于一个组，不能独立于组外。在Linux在每个文件有所有者，所在组，其他组的概念</p><p>1）所有者</p><p>2）所在组</p><p>3）其他组</p><p>4）改变用户所在组</p></li><li><p><strong>所有者</strong></p><p>文件的创建者</p><p>查看文件的所有者</p><p>1）指令：ls -ahl</p><pre class=" language-bash"><code class="language-bash">drwx------. 26 zzy  zzy  4.0K 10月  8 22:46 zzy</code></pre><p>zzy 所有者   zzy 所属组</p><p>修改文件的所有者：</p><p>chown 用户名 文件名</p><p>使用root创建一个apple.txt，然后改变所有者为zzy</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch apple.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 120-rw-r--r--.  1 root root      0 10月  8 23:02 apple.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown zzy apple.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 120-rw-r--r--.  1 zzy  root      0 10月  8 23:02 apple.txt</code></pre></li><li><p><strong>组的创建</strong></p><p>groupadd 组名</p><p>创建animal组，用户fox，将fox放到animal组</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd animal</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g animal fox</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id fox</span>uid<span class="token operator">=</span>504<span class="token punctuation">(</span>fox<span class="token punctuation">)</span> gid<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span> 组<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span></code></pre></li><li><p><strong>所在组</strong></p><p>某个用户创建了一个文件后，默认这个文件的所在组就是该用户所在组</p><p>修改文件的所在组</p><p>chgrp 组名 文件名</p><p>使用root创建bb.txt文件，查看此文件的所在组，然后修改此文件的所在组到animal组</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch bb.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-r--r--.  1 root root        0 10月  8 23:12 bb.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp animal bb.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-r--r--.  1 root animal      0 10月  8 23:12 bb.txt</code></pre></li><li><p><strong>改变用户所在组</strong></p><p>添加用户时指定用户所在组：useradd -g 组名 用户名</p><p>或者使用root用户修改：usermod -g  组名 用户名</p><p>新建monster组，修改fox用户所在组为monster</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd monster</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id fox</span>uid<span class="token operator">=</span>504<span class="token punctuation">(</span>fox<span class="token punctuation">)</span> gid<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span> 组<span class="token operator">=</span>504<span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># usermod -g monster fox</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id fox</span>uid<span class="token operator">=</span>504<span class="token punctuation">(</span>fox<span class="token punctuation">)</span> gid<span class="token operator">=</span>505<span class="token punctuation">(</span>monster<span class="token punctuation">)</span> 组<span class="token operator">=</span>505<span class="token punctuation">(</span>monster<span class="token punctuation">)</span></code></pre></li></ul><h6 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h6><ul><li><p><strong>权限的基本介绍</strong></p><pre class=" language-bash"><code class="language-bash">-rw-r--r--.  1 root root      263 10月  6 20:56 a.txt</code></pre><p>rw-表示文件所有者的权限–读写</p><p>r–表示文件所在组的用户的权限 –只读</p><p>r–文件的其他组的权限 –只读</p><p>1 –如果是文件，表示硬链接，如果是目录，表示字母的个数</p><p>root –所有者</p><p>root–所属组</p><p>263–文件大小，如果是目录则显示4096</p><p>10月  6 20:56–文件最后的修改时间</p><p>0-9位说明：</p><p>1）第0位确定文件夹类型[- (普通文件) ,d（目录）,l（软链接文件）,c（字符设备）,b(块文件，硬盘)]</p><p>2）第1-3位确定所有者—user</p><p>3）第4-6位确定所属组—-group</p><p>4）第7-9位确定其他用户用于该文件的权限–other</p></li><li><p><strong>chmod</strong></p><p>修改文件或者目录的权限</p><p>第一种方式:+，=，-</p><p>u:所有者，g:所有组，o:其他人,a:所有人</p><p>1）chmod u=rwx,g=rx,o=x 文件目录名 </p><p>2）chmod o+w 文件目录名</p><p>3）chmod a-x 文件目录名 </p><p>案例：</p><p>给abc文件的所有者读写执行的权限，给所在组读执行的权限，给其他组读执行的权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-r--r--.  1 root root        0 10月  9 14:40 abc<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod u=rwx,g=rw,o=rx abc</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rwxrw-r-x.  1 root root        0 10月  9 14:40 abc</code></pre><p>给abc文件的所有者除去执行的权限，增加组执行的权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod u-x,g+x abc</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rw-rwxr-x.  1 root root        0 10月  9 14:40 abc</code></pre><p>给abc文件的所有用户添加执行的权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod a+x abc</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 124-rwxrwxr-x.  1 root root        0 10月  9 14:40 abc</code></pre><p>第二种方式：通过数字变更权限</p><p>r=4 w=2 x=1 rwx=4+2+1=7</p><p>chmod u=rwx,g=rx,o=x 文件目录名</p><p>相当于 chmod 751 文件目录名</p><p>案例：将abc.txt文件的权限修改成rwxr-xr-x ，使用数字方式实现</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 12-rw-r--r--.  1 root root      0 10月  9 19:06 abc.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod 755 abc.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 12-rwxr-xr-x.  1 root root      0 10月  9 19:06 abc.txt</code></pre></li><li><p><strong>修改文件所有者</strong></p><p>chown newowner file 改变文件的所有者</p><p>chown newownergroup file 改变用户的所有者和所有组</p><p>-R 如果是目录，则使其下的所有子文件或目录递归生效</p><p>案例：将abc.txt文件的所有者修改位fox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown fox abc.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 12-rwxr-xr-x.  1 fox  root      0 10月  9 19:06 abc.txt</code></pre><p>将kkk目录所有文件或目录的所有者改为fox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown -R fox kkk</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 16drwxr-xr-x.  2 fox  root   4096 10月  9 19:15 kkk</code></pre></li><li><p><strong>改变文件的所在组</strong></p><p>charp newgroup file 改变文件的所有组</p><p>将abc.txt所属组改为animal</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp animal abc.txt</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 16-rwxr-xr-x.  1 fox  animal    0 10月  9 19:06 abc.txt</code></pre><p>将kkk下所有文件和目录的所属组改为fox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp -R animal kkk</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 16drwxr-xr-x.  2 fox  animal 4096 10月  9 19:15 kkk</code></pre></li></ul><h6 id="最佳实践—警察和土匪游戏"><a href="#最佳实践—警察和土匪游戏" class="headerlink" title="最佳实践—警察和土匪游戏"></a>最佳实践—警察和土匪游戏</h6><p>​    两个组：ploice(警察),bankit(土匪)</p><p>​    警察用户：jack，jerry</p><p>​    土匪用户：xh,xq</p><p>​    要求：</p><p>​    创建组</p><pre class=" language-bash"><code class="language-bash">root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd ploice</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd bankit</span></code></pre><p>​    创建用户并分组</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g police jack</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd jerry</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp -R police jerry</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 24drwx------.  4 jack  police 4096 10月  9 19:49 jackdrwx------.  4 jerry police 4096 10月  9 19:49 jerry<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g bankit xh</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g bankit xq</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 32drwx------.  4 xh    bankit 4096 10月  9 19:55 xhdrwx------.  4 xq    bankit 4096 10月  9 19:55 xq</code></pre><p>​    jack创建一个文件，自己可以读写，本组人可以读，其他组没有任何权限</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ <span class="token function">touch</span> jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ ll总用量 0-rw-r--r--. 1 jack police 0 10月  9 19:56 jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 740 jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ ll总用量 0-rwxr-----. 1 jack police 0 10月  9 19:56 jackfile</code></pre><p>​    jack修改该文件，让其他组可以读，本组人可以读写</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 764 jackfile<span class="token punctuation">[</span>jack@localhost ~<span class="token punctuation">]</span>$ ll总用量 0-rwxrw-r--. 1 jack police 0 10月  9 19:56 jackfile</code></pre><p>xh投靠警察，看看是否可以读写</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chgrp -R police xh</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>总用量 32drwx------.  4 xh    police 4096 10月  9 19:55 xh<span class="token punctuation">[</span>xh@localhost home<span class="token punctuation">]</span>$ <span class="token function">cd</span> jackbash: cd: jack: 权限不够<span class="token punctuation">[</span>jack@localhost home<span class="token punctuation">]</span>$ <span class="token function">chmod</span> g<span class="token operator">=</span>rx jack<span class="token punctuation">[</span>jack@localhost home<span class="token punctuation">]</span>$ ll总用量 32drwxr-x---.  4 jack  police 4096 10月  9 20:04 jack<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># usermod -g police xh</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id xh</span>uid<span class="token operator">=</span>507<span class="token punctuation">(</span>xh<span class="token punctuation">)</span> gid<span class="token operator">=</span>501<span class="token punctuation">(</span>police<span class="token punctuation">)</span> 组<span class="token operator">=</span>501<span class="token punctuation">(</span>police<span class="token punctuation">)</span><span class="token punctuation">[</span>xh@localhost home<span class="token punctuation">]</span>$ <span class="token function">cd</span> jack<span class="token punctuation">[</span>xh@localhost jack<span class="token punctuation">]</span>$ ll总用量 0-rwxrw-r--. 1 jack police 0 10月  9 19:56 jackfile<span class="token punctuation">[</span>xh@localhost jack<span class="token punctuation">]</span>$ vim jackfile</code></pre><p><strong>注意文件所在组的修改和用户所在组的修改所用命令不同</strong></p><p>注意修改jack文件的权限管理后，重新登录xh账号</p><p>练习：</p><img src="http://116.62.203.42/linuximg/11.png" alt="1570624373363" style="zoom:80%;"><h5 id="7-crond定时调度"><a href="#7-crond定时调度" class="headerlink" title="7.crond定时调度"></a>7.crond定时调度</h5><ul><li><p><strong>crontab任务调度</strong></p><p>是指系统在某个时间执行的特定的命令或程序</p><p>crontab [选项]</p><p>-e 编辑crond任务调度</p><p>-l 查询crontab任务</p><p>-r 删除当前用户的所有crontab任务</p><p>案例：</p><p>每分钟执行 [root@localhost home]# ls -l /home&gt;&gt;/home/to.txt指令</p><p>简单的任务不用写脚本，可以在crontab中加入任务即可，对于比较复杂的任务，需要写脚本（shell编程）来完成</p><p>crontab -e </p><p>*/1 * * * * ls -l /home &gt;&gt; /home/to.txt</p><p>wq退出</p><p>参数说明：</p><p>第一个* 一小时的第几分钟，范围 0-59</p><p>第二个* 一天的第几小时，范围 0-23</p><p>第三个* 一月的第几天，范围 1-31</p><p>第四个* 一年的第几月，范围 1-12</p><p>第五个* 一周的星期几，范围 0-7（0和7都代表星期日）</p><p>特殊符号的说明：</p><p>*代表任何时间，比如第一个 * 就代表一小时每分钟都执行一次</p><p>,代表不连续的时间，比如 0 8,12,16 * * * 命令，就代表在每天的8点0分，12点0分,16点0分都执行一次命令</p><p>-代表连续的时间范围。比如 0 5 * * 1-6 命令，带在周一到周六的凌晨5点0分执行命令</p><p>*/n 代表每隔多久执行一次，比如:   */10 * * * * 命令，代表每隔10分钟执行一次命令 </p><p>练习：</p><p>1）每隔1分钟，就将当前日期信息，追加到/tmp/mydate文件中</p><p>​    编写一个文件/home/mytask1.sh</p><p>​        vim mytask1.sh</p><p>​        date &gt;&gt; /tmp/date</p><p>​        给mytask1.sh一个可执行权限 chmod 744 mytask1.sh</p><p>​        crontab -e</p><p>​        */1 * * * *  /home/mytask1.sh</p><p>2)每隔一分钟，将当前日期和日历都追加到/home/mycal文件中</p><p>类似1）修改 date &gt;&gt; /home/mycal 为 date &gt;&gt;/home/mycal </p><p>cal &gt;&gt; /home/mycal</p></li></ul><h5 id="8-磁盘分区，挂载"><a href="#8-磁盘分区，挂载" class="headerlink" title="8.磁盘分区，挂载"></a>8.磁盘分区，挂载</h5><ul><li><p><strong>分区的基础知识</strong></p><p>分区的方式：</p><p>1）mbr分区</p><p>最多支持四个分区</p><p>系统只能安装在主分区</p><p>扩展分区要占一个主分区</p><p>MBR最大只支持2TB,但拥有好的兼容性</p><p>2）gtp分区</p><p>支持无限多的分区（windows下做多支持128个分区）</p><p>最大支持18EB的大容量（EB=1204PB,PB=1024TB）</p><p>windows7 64位以后支持gtp</p></li><li><p>分区基础知识</p><p>Windows下的磁盘分区：</p><img src="http://116.62.203.42/linuximg/8.png" alt="1570691965777" style="zoom:80%;"></li><li><p>Linux分区</p><p>原理介绍：</p><p>Linux来说无论有几个分区，分给哪一个目录使用，它归根结底就只有一个目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分</p><p>Linux采用了一种叫做载入的处理方法，它的整个文件系统包含了一整套的文件和目录，且将一个分区和一个目录联系起来，这时载入的一个分区使它的存储空间在一个目录下获得</p><p>示意图：</p><img src="http://116.62.203.42/linuximg/9.png" alt="1570692250711" style="zoom:80%;"></li><li><p><strong>查看分区和挂载命令：lsblk -f</strong></p><img src="http://116.62.203.42/linuximg/10.png" alt="1570692929383" style="zoom:80%;"></li><li><p><strong>挂载的经典案例</strong></p><p>新增一块硬盘，挂载到/home/newdisk目录</p><p>1）虚拟机添加硬盘</p><p>2）分区 fdisk/dev/sdb</p><p>3）格式化 mkfs -t ext4 /dev/sdb1</p><p>4）挂载 创建目录/home/newdisk   挂载 mount /dev/sdb1 /home/newdisk</p><p>5）设置可以自动挂载(已经挂载，重启机器后仍然可以挂载到 /home/newdisk)</p><p>vim /etc/fstab</p><p>/dev/sdb1  /home/newdisk ext4 defaults 0 0</p><p>mount -a </p><p>reboot</p></li><li><p>具体步骤</p><p>①在虚拟机菜单中，选择设置，设别列表添加硬盘，下一步，修改磁盘大小，完成后重启系统才能识别</p><p>②分区命令：fdisk /dev/sdb</p><p>开始对/sdb分区</p><p>m–显示命令列表</p><p>p–显示磁盘分区 同 fdisk -l</p><p>n –新增分区</p><p>d –删除分区</p><p>w –写入并退出</p><p>说明：开始分区后，输入n，新增分区，然后选择p,分区类型位主分区，两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q</p><p>③格式化磁盘</p><p>分区命令：mkfs -t ext4 /dev/sdb1</p><p>其中ext4是分区类型</p><p>④挂载：将一个分区与一个目录联系起来</p><p>mount 设备名称 挂载目录 </p><p>mount /dev/sdb1 /home/newdisk</p><p>umount 设备名称或挂载目录</p><p>umount /dev/sdb1 或者 umount /home/newdisk</p><p>⑤永久挂载</p><p>通过修改/etc/fstab实现挂载</p><p>编辑完成后</p><p>[root@localhost home]# vim /etc/fstab<br>[root@localhost home]# mount -a</p><p>添加完成后，执行mount -a 即可生效</p></li></ul><h6 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h6><ul><li><p><strong>查询系统整体磁盘的使用情况</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem                    Size  Used Avail Use% Mounted on/dev/mapper/VolGroup-lv_root   18G  5.3G   12G  32% /tmpfs                         764M   76K  764M   1% /dev/shm/dev/sda1                     485M   33M  427M   8% /boot/dev/sdb1                     2.0G   35M  1.9G   2% /home/newdisk<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -lh</span></code></pre></li><li><p>查询指定目录的磁盘占用情况</p><p>du -h /目录</p><p>默认为当前目录</p><p>-s 指定目录占用大小汇总</p><p>-h 带计量单位</p><p>-a 含文件</p><p>–max-depth=1 子目录深度</p><p>-c 列出明细的同时，增加汇总值</p><p>应用实例：</p><p>查询/opt目录的磁盘占用情况，深度为1</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># du -ach --max-depth=1 /opt</span>86M    /opt/gcc-4.9.2.tar.bz21.5M    /opt/tmp4.0K    /opt/rh743M    /opt/gcc-4.9.2830M    /opt830M    总用量</code></pre></li><li><p><strong>实用指令查询</strong></p><p>统计/home文件夹下文件的个数</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /home | grep "^-" | wc -l</span>3</code></pre><p>统计/home文件夹下目录的个数</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll /home | grep "^d" | wc -l</span>8</code></pre><p>统计/home文件夹下文件的个数，包括子文件里的</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -lR /home | grep "^-" | wc -l</span>5</code></pre><p>统计/home文件夹下目录的个数，包括子文件夹里的</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -lR /home | grep "^d" | wc -l</span>17</code></pre><p>以树形显示目录结构(可能需要安装)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install tree</span></code></pre></li></ul><h5 id="9-网络配置"><a href="#9-网络配置" class="headerlink" title="9.网络配置"></a>9.网络配置</h5><ul><li><p>自动获取</p><p>网络连接—&gt;自动连接—&gt;应用，此方式获取的IP地址可能会变化，所以不适合做服务器</p></li><li><p>指定特定的IP</p><p>说明：直接修改配置文件来指定ip,并可以连接到外网，编辑 vi /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>配置IP地址为静态的，IP地址为192.168.145.133</p><p>没有则新增</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span>.ONBOOT<span class="token operator">=</span>yesBOOTPROTO<span class="token operator">=</span>static//设置静态ipIPADDR<span class="token operator">=</span>192.168.145.133 //IP地址GATEWAY<span class="token operator">=</span>192.168.145.2 //网关，虚拟网卡的地址DNS1<span class="token operator">=</span>192.168.145.2 //dns地址和网关相同就行<span class="token punctuation">..</span>.</code></pre><p>保存退出重启服务(或系统)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service network restart</span></code></pre><p>若为拷贝的系统，可能会出现错误，这是因为网卡地址不同</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service network restart</span>关闭环回接口：                                             <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>弹出环回接口：                                             <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>弹出界面 eth0： 错误：没有找到合适的设备：没有找到可用于连接 <span class="token string">'System eth0'</span> 的设备。</code></pre><p>解决方法：</p><p>首先查看现在使用的网卡信息(就是eth?)，例如我的就是eth3</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig</span>eth3      Link encap:Ethernet  HWaddr 00:0C:29:4C:5C:7B            inet addr:192.168.145.133  Bcast:192.168.145.255  Mask:255.255.255.0          inet6 addr: fe80::20c:29ff:fe4c:5c7b/64 Scope:Link<span class="token punctuation">..</span>.</code></pre><p>接着，修改MAC地址</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vi /etc/udev/rules.d/70-persistent-net.rules</span><span class="token comment" spellcheck="true"># PCI device 0x1022:0x2000 (vmxnet)</span>SUBSYSTEM<span class="token operator">==</span><span class="token string">"net"</span>, ACTION<span class="token operator">==</span><span class="token string">"add"</span>, DRIVERS<span class="token operator">==</span><span class="token string">"?*"</span>, ATTR<span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token operator">==</span><span class="token string">"00:0c:29:4c:5c:7b"</span>, ATTR<span class="token punctuation">{</span>type<span class="token punctuation">}</span><span class="token operator">==</span><span class="token string">"1"</span>, KERNEL<span class="token operator">==</span><span class="token string">"eth*"</span>, NAME<span class="token operator">=</span><span class="token string">"eth3"</span></code></pre><p>将eth3直接改为eth0，并且复制00:0c:29:4c:5c:7b网卡地址</p><p>然后配置静态IP</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><span class="token punctuation">..</span>.HWADDR<span class="token operator">=</span>00:0c:29:4c:5c:7b  //改为刚才复制的网卡地址<span class="token punctuation">..</span>.</code></pre><p>退出保存，重启服务(或系统)即可。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service network restart</span></code></pre></li></ul><h5 id="10-进程管理"><a href="#10-进程管理" class="headerlink" title="10.进程管理"></a>10.进程管理</h5><h6 id="进程简介"><a href="#进程简介" class="headerlink" title="进程简介"></a>进程简介</h6><p>linux中，每个进程分配一个ID号</p><p>每个进程有两种存在方式，前台与后台，所谓前台就是用户目前的屏幕上可以进行操作的。后台则是在屏幕上无法看到，通常使用后台方式执行</p><p>系统服务一般在后台运行，直到关机结束。</p><ul><li><p>显示系统执行的进程</p><p>ps 命令用来查看目前系统中，有哪些正在执行，以及他们的执行情况</p><p>ps -aux</p><p>ps -a 显示当前终端的所有进程信息</p><p>ps -u 以用户的格式显示进程信息</p><p>ps -x显示后台进程运行的参数</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | more</span>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot         1  0.0  0.0   2900  1424 ?        Ss   19:27   0:01 /sbin/initroot         2  0.0  0.0      0     0 ?        S    19:27   0:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>root         3  0.0  0.0      0     0 ?        S    19:27   0:00 <span class="token punctuation">[</span>migration/0<span class="token punctuation">]</span></code></pre><p>分别为：用户-进程id-占用内存-占用虚拟内存- 使用物理内存 -使用终端 -运行状态(s:休眠，r:运行) - 启动时间 -占用cpu总时间 -进程执行时的命令行 </p><p>和管道符一起使用，进行过滤</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | grep sshd</span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      2006  0.0  0.0   9836  1012 ?        Ss   19:27   0:00 /usr/sbin/sshdroot      3881  0.0  0.2  12780  3428 ?        Ss   19:52   0:00 sshd: root@pts/1 root      4094  0.0  0.0   5984   732 pts/1    S+   20:18   0:00 <span class="token function">grep</span> sshd</code></pre><p>查看父进程</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef </span>UID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 19:27 ?        00:00:01 /sbin/init root         2     0  0 19:27 ?        00:00:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>root         3     2  0 19:27 ?        00:00:00 <span class="token punctuation">[</span>migration/0<span class="token punctuation">]</span></code></pre><p>PPID为PID的父进程</p><p>比如：查看sshd的父进程</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef | grep sshd</span>root      2006     1  0 19:27 ?        00:00:00 /usr/sbin/sshd</code></pre></li></ul><h6 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h6><p>kill [选项] 进程号 //通过进程号杀死进程</p><p>killall 进程名称 //通过进程名杀死进程 ，支持通配符</p><p>常用选项 </p><p>-9 :表示强迫进程立即停止</p><p>实践：</p><p>①剔除非法用户登录</p><p>查看当前远程登录的用户</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | grep sshd </span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      2006  0.0  0.0   9836  1012 ?        Ss   19:27   0:00 /usr/sbin/sshdroot      3881  0.0  0.2  12780  3428 ?        Ss   19:52   0:00 sshd: root@pts/1 root      4213  0.1  0.2  11888  3316 ?        Ss   20:31   0:00 sshd: zzy <span class="token punctuation">[</span>priv<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill 4217</span>You have new mail <span class="token keyword">in</span> /var/spool/mail/root</code></pre><p>②终止远程登录服务sshd,在适当的时候再启用</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux | grep sshd </span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      2006  0.0  0.0   9836  1012 ?        Ss   19:27   0:00 /usr/sbin/sshd<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill 2006</span></code></pre><p>启动sshd服务</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /etc/init.d/sshd start</span></code></pre><p>③终止多个gedit编辑器，killall (通过进程名来    终止进程)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># killall gedit</span></code></pre><p>④强制杀掉一个终端(/bin/bash 代表一个终端)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux |grep bash</span>Warning: bad syntax, perhaps a bogus <span class="token string">'-'</span>? See /usr/share/doc/procps-3.2.8/FAQroot      3886  0.0  0.1   6876  1684 pts/1    Ss+  19:52   0:00 -bashroot      7959  0.0  0.1   6876  1648 pts/0    Ss   20:44   0:00 /bin/bashroot      7971  0.0  0.1   6876  1696 pts/2    Ss+  20:44   0:00 /bin/bash<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@localhost 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill -9 7959</span></code></pre><ul><li><p>pstree 查看进程树</p><p>pstree [选项] </p><p>pstree -p :显示进程的PID</p><p>pstree -u :显示进程的所属用户</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pstree -u</span></code></pre></li></ul><h6 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h6><p>基本介绍：service的本质就是进程，但是运行在后台，通常都会监听某个端口，等待其他程序的请求，像 mysql,sshd，防火墙等，又称为守护进程。</p><p>service 管理指令:</p><p>service 服务名 start | stop | restart | reload | status</p><p>在redhat7.0后，不再使用service,而是systemctl</p><p>使用案例：</p><p>查看当前防火墙的状况，关闭和重启防火墙</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables status</span>表格：filter<span class="token punctuation">..</span>.          4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22 </code></pre><p>关闭防火墙：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service iptables stop</span>iptables：将链设置为政策 ACCEPT：filter                    <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>iptables：清除防火墙规则：                                 <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>iptables：正在卸载模块：                                   <span class="token punctuation">[</span>确定<span class="token punctuation">]</span></code></pre><p>windows dos下 的telnet ip地址 端口号 来查看端口是否打开</p><p>telnet 192.168.145.133 22</p><p>注意：service 命令使用后立即生效，但只是临时生效，当重启系统后，回归到以前的服务设置 </p><p>使用chkconfig才能设置某个服务自启动或关闭永久生效。</p><p>查看服务名:</p><p>setup 查看</p><p>/etc/init.d/服务名称</p><ul><li><p>服务的运行级别</p><p>vi /etc/inittab</p><p>0—6</p></li><li><p>chkconfig命令(重启后生效)</p><p>通过chkconfig命令可以给每个服务的各个运行级别设置自启动/关闭</p><p>基本语法：</p><p>chkconfig -list|grep xxx 查看服务</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig --list | grep sshd</span>sshd               0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</code></pre><p>chkconfig 服务名 –list</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig iptables --list</span>iptables           0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</code></pre><p>chkconfig –level 5 服务名 on/off</p><p>将sshd服务再运行级别为5情况下，不自启动</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig --level 5 sshd off</span></code></pre></li></ul><h6 id="动态监控"><a href="#动态监控" class="headerlink" title="动态监控"></a>动态监控</h6><ul><li><p>查看系统的网络情况 netstat</p><p>基本语法：</p><p>netstat [选项]</p><p>-an ：按照一定的顺序排列输出</p><p>-p:显示那个进程在调用</p><p>netstat -anp</p><p>案例：</p><p>查看系统所有的网络服务</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># netstat -anp | more</span>Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span>Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   tcp        0      0 0.0.0.0:43904               0.0.0.0:*                   LISTEN      1783/rpc.statd   </code></pre><p>查看服务名为sshd的服务信息</p><pre><code>[root@localhost home]# netstat -anp | grep sshdtcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      2006/sshd           tcp        0      0 127.0.0.1:6011              0.0.0.0:*                   LISTEN      3881/sshd           tcp        0     64 192.168.145.133:22          192.168.145.1:52686         ESTABLISHED 3881/sshd           tcp        0      0 :::22                       :::*                        LISTEN      2006/sshd           tcp        0      0 ::1:6011                    :::*                        LISTEN      3881/sshd    </code></pre></li></ul><ul><li><p>top命令</p><p>top与ps命令类似，都用来显示正在执行的进程。不同之处，top在执行一段时间可以更新正在运行的进程</p><p>基本语法：</p><p>top [选项]</p><p>-d 秒数 指定top命令隔几秒更新，默认3秒</p><p>-i 使top不显示任何闲置或者僵死进程</p><p>-p 通过指定监控进程id来仅仅监控某个进程的状态</p><p>交互操作说明</p><p>P 以cpu使用率排序，默认</p><p>M 以内存的使用率排序</p><p>N 以PID排序</p><p>q 退出top</p><p>案例:</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># top</span><span class="token function">top</span> - 21:41:35 up  2:14,  3 users,  load average: 0.04, 0.02, 0.00Tasks: 181 total,   1 running, 180 sleeping,   0 stopped,   0 zombieCpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%stMem:   1562944k total,   693188k used,   869756k free,    42252k buffersSwap:  2064376k total,        0k used,  2064376k free,   423176k cached </code></pre><p>top - 21:41:35(当前时间) up  2:14(系统运行时间),  3 users(当前系统用户数量),  load average: 0.04, 0.02, 0.00（负载均衡 三个树的和&lt;0.7 运行正常）</p><p>按q退出</p><p>①监视特定的用户</p><p>输入 top 回车,输入 u 回车，再输入用户名 ，即可。</p><p>②终止指定的进程</p><p>输入 top 回车,输入 k回车，再输入要结束的进程id号 ，即可。</p><p>③指定系统状态更新时间（每隔10s 自动更新，默认3s）</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># top -d 5</span></code></pre></li></ul><h5 id="11-RPM包管理"><a href="#11-RPM包管理" class="headerlink" title="11.RPM包管理"></a>11.RPM包管理</h5><ul><li><p>RPM 介绍</p><p>红帽包管理器（linux系统通用），类似于Windows 的setup.exe</p></li><li><p>rpm包的查询指令</p><p>查询已安装的rpm列表 rpm -qa | grep xx（软件名）</p><p>查询是否安装了firefox</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qa | grep firefox</span>firefox-17.0.10-1.el6_4.i686</code></pre><p>rpm -qa                 查询所安装的所有rpm软件包</p><p>rpm -qa | more      分页显示</p><p>rpm -qa | grep X</p><p>rpm -q 软件包名      查询软件包是否安装</p><p>rpm -qi 软件包名      查询软件包信息</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qi firefox</span>Name        <span class="token keyword">:</span> firefox                      Relocations: <span class="token punctuation">(</span>not relocatable<span class="token punctuation">)</span>Version     <span class="token keyword">:</span> 17.0.10                           Vendor: Red Hat, Inc.Release     <span class="token keyword">:</span> 1.el6_4                       Build Date: 2013年10月23日 星期三 21时15分16秒</code></pre><p>rpm -qi file </p><p>rpm -ql 软件包名     查询软件包中的文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -ql firefox</span>/usr/bin/firefox/usr/lib/firefox/usr/lib/firefox/LICENSE/usr/lib/firefox/application.ini</code></pre><p>rpm -qf 文件全路径名     查询文件所属的软件包</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qf /etc/passwd </span>setup-2.8.14-20.el6_4.1.noarch</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -qf /root/install.log</span><span class="token function">file</span> /root/install.log is not owned by any package</code></pre></li><li><p>卸载rpm包</p><p>rpm -e rpm包的名称</p><p>例：</p><p>删除firefox 软件包</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -e firefox</span></code></pre><p>强制删除</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -e --nodeps foo</span></code></pre></li><li><p>安装rpm包</p><p>rpm -ivh rpm包的全路径</p><p>i install 安装</p><p>v verbose 提示</p><p>h hash 进度条</p><p>安装firefox</p><p>找到firefox的安装包。先挂载到Linux系统iso文件，然后到/media/下去找rpm.</p><p>记住要连接镜像文件，然后redhat6桌面会多一个光驱。</p><p>切换到Packages目录，可查看到Centos系统的所有rpm包，找到firefox，复制到/opt/目录</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /media</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd CentOS_6.5_Final/</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd Packages/</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp firefox-17.0.10-1.el6.centos.i686.rpm /opt/</span><span class="token punctuation">[</span>root@localhost Packages<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/</span><span class="token punctuation">[</span>root@localhost opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>firefox-17.0.10-1.el6.centos.i686.rpm  gcc-4.9.2  gcc-4.9.2.tar.bz2  rh  tmp<span class="token punctuation">[</span>root@localhost opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -ivh firefox-17.0.10-1.el6.centos.i686.rpm </span>Preparing<span class="token punctuation">..</span>.                <span class="token comment" spellcheck="true">########################################### [100%]</span></code></pre></li></ul><h5 id="12-yum"><a href="#12-yum" class="headerlink" title="12.yum"></a>12.yum</h5><ul><li><p>介绍</p><p>yum是一个shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且进行安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。使用yum的前提是要联网</p></li><li><p>基本指令</p><p>查询yum服务器是否有需要安装的软件</p><p>yum list | grep xx 软件列表</p><p>安装指定的yum包</p><p>yum install xxx 下载安装</p><p>使用yum安装firefox</p><p>先查看yum服务器是否有firefox的rpm包</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum list | grep firefox</span>firefox.i686                                17.0.10-1.el6.centos        installedfirefox.i686                                68.2.0-4.el6.centos         updates </code></pre><p>安装（安装前先卸载）默认安装最新版本</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -e firefox</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install firefox</span>已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * rpmforge: ftp.riken.jp解决依赖关系<span class="token punctuation">..</span>.作为依赖被升级:  nspr.i686 0:4.21.0-1.el6_10                     nss.i686 0:3.44.0-7.el6_10               nss-softokn.i686 0:3.44.0-5.el6_10        nss-softokn-freebl.i686 0:3.44.0-5.el6_10       nss-sysinit.i686 0:3.44.0-7.el6_10       nss-tools.i686 0:3.44.0-7.el6_10          nss-util.i686 0:3.44.0-1.el6_10                完毕！</code></pre></li><li></li><li><p>5</p></li><li><p>55</p></li><li><p>55</p></li><li><p>55</p></li><li><p>5</p></li><li><p>55</p></li><li><p>5</p></li><li><p>55</p></li><li><p>5</p></li><li><p>5</p></li><li><p>55</p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux Redhat 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Redhat 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门</title>
      <link href="/2019/11/02/SQL%20SERVER/"/>
      <url>/2019/11/02/SQL%20SERVER/</url>
      
        <content type="html"><![CDATA[<h5 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h5><h6 id="1-where-条件-is-null"><a href="#1-where-条件-is-null" class="headerlink" title="1.where 条件 is null"></a>1.where 条件 is null</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> mgr <span class="token operator">is</span> <span class="token boolean">null</span></code></pre><h6 id="2-between"><a href="#2-between" class="headerlink" title="2.between"></a>2.between</h6><p> 包含num1和num2</p><h6 id="3-where-group-by-having-order-by-的顺序"><a href="#3-where-group-by-having-order-by-的顺序" class="headerlink" title="3.where group by having order by 的顺序"></a>3.where group by having order by 的顺序</h6><p>SELECT</p><p>FROM</p><p>WHERE</p><p>GROUP BY</p><p>HAVING</p><p>ORDER BY</p><h6 id="4-更新多个记录"><a href="#4-更新多个记录" class="headerlink" title="4.更新多个记录"></a>4.更新多个记录</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> 平均成绩之和 <span class="token keyword">float</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu<span class="token keyword">update</span> stu <span class="token keyword">set</span>  平均成绩之和<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> 平均成绩<span class="token operator">+</span>新平均成绩 <span class="token keyword">from</span> stu <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>学号<span class="token operator">=</span>stu<span class="token punctuation">.</span>学号<span class="token punctuation">)</span></code></pre><h5 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a><strong>数据完整性</strong></h5><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>实体完整性：表的每一行数据就称为一个实体，实体完整性是指 每一行记录是唯一的，不重复的</p><p>​    标识列：系统自动生成，永远不会重复</p><p>​    主键：唯一 非空</p><p>​    唯一键：唯一 但是可以为null，只能空一次 </p><p>域完整性：域就是字段，域完整性就是为了保证字段的值是合理和准确的</p><p>​    非空 类型，check约束，默认值，关系（主外键约束）</p><p>自定义完整性：用户自己定义的约束规则</p><p>​    check约束 存储过程 触发器</p><p>引用完整性：一个表的字段的值引用另外一个表的某一个字段，</p><p>被引用的表称为主表，引用表就是称为从表或者外键表</p><p>​    1.选择外键表去创建主外键关系</p><p>​    2.建立主外键关系的字段类型和意义必须一致</p><p>​    3.建立关系的字段 在主表中必须是主键或者是唯一键</p><p>​    4.添加数据的时候先添加主表数据，再添加外键表</p><p>​    5.删除数据的时候先删除外键表数据，再删除主表</p><p>关系建立后表的级联操作</p><p>​    1.不执行任何操作：该报错就报错，能删除就删除</p><p>​    2.级联：删除主表记录，对应的从表记录也将被删除</p><p>​    3.set null ：删除主表，从表对应记录的字段值=null，前提是这个字段可以设置为null</p><p>​    4.set default :删除主表，从表对应记录的字段值=设置的默认值，前提是这个字段已经设置了默认值</p><h6 id="使用代码创建约束"><a href="#使用代码创建约束" class="headerlink" title="使用代码创建约束"></a><strong>使用代码创建约束</strong></h6><p>–种类：主键约束（primary key PK） 唯一键约束(unique UQ) 检查约束（check CK ） 默认值约束(default DF)</p><p>–外键约束(Foreign key FK)</p><p><strong>–创建约束的语法：</strong></p><p>–alter table 表名 </p><p>–add constraint 约束的名字(以简写作为前缀) 约束的类型(字段,表达式 值)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> test<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> Teacher <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>Name nvarchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>Gender <span class="token keyword">bit</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>Age <span class="token keyword">int</span> <span class="token punctuation">,</span>Salary money<span class="token punctuation">,</span>Birthday <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span></code></pre><p><strong>teacher表</strong></p><img src="http://116.62.203.42/img/1.jpg" alt="img" style="zoom:80%;"> <p><strong>classes表</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> classes<span class="token punctuation">(</span>cid <span class="token keyword">int</span> <span class="token keyword">identity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">constraint</span> PK_classes_cid <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="http://116.62.203.42/img/2.jpg" alt="img" style="zoom:80%;"> <p>–1.将id设置为主键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Teacher<span class="token keyword">add</span> <span class="token keyword">constraint</span> PK_Teacher_Id <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></code></pre><p>–2.设置name为唯一键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'UQ_Teacher_Name'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> UQ_Teacher_Name<span class="token keyword">alter</span> <span class="token keyword">table</span> Teacher <span class="token keyword">add</span> <span class="token keyword">constraint</span> UQ_Teacher_Name <span class="token keyword">unique</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span></code></pre><p>–3.设置年龄0-100之间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'CK_Teacher_Age'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> CK_Teacher_Age<span class="token keyword">alter</span> <span class="token keyword">table</span> teacher<span class="token keyword">ADD</span> <span class="token keyword">constraint</span> CK_Teacher_Age <span class="token keyword">check</span><span class="token punctuation">(</span>Age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> Age<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><p>–4.为birthday添加默认值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'DF_Teacher_Birthday'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> DF_Teacher_Birthday<span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">add</span> <span class="token keyword">constraint</span> DF_Teacher_Birthday <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token string">'1999-9-9'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> birthday  <span class="token comment" spellcheck="true">--for是说明为哪一个字段添加</span></code></pre><p>–5.为ClassId添加外键约束</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token comment" spellcheck="true">--从表的某一个字段，引用主表的某一个字段</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> FK_teacher_ClassId <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>classid<span class="token punctuation">)</span> <span class="token keyword">references</span> classes<span class="token punctuation">(</span>cid<span class="token punctuation">)</span></code></pre><h6 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'FK_teacher_ClassId'</span><span class="token punctuation">)</span>​    <span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">constraint</span> FK_teacher_ClassId<span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token comment" spellcheck="true">--从表的某一个字段，引用主表的某一个字段</span><span class="token keyword">with</span> <span class="token keyword">nocheck</span> <span class="token comment" spellcheck="true">--不检查现有数据</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> FK_teacher_ClassId <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>classid<span class="token punctuation">)</span> <span class="token keyword">references</span> classes<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--on delete Set null --删除主表数据，从表引用的数据设为null</span></code></pre><p><strong>subject表</strong></p><img src="http://116.62.203.42/img/3.jpg" alt="img" style="zoom:80%;"> <p><strong>student表</strong></p><img src="http://116.62.203.42/img/4.jpg" alt="img" style="zoom:80%;"> <p><strong>result表</strong></p><img src="http://116.62.203.42/img/5.jpg" alt="img" style="zoom:80%;"> <p>1.设置外键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>depno <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>empno <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>ename nvarchar<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> dept<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>外键的数据类型和主键一致</p><p>外键只能指向主键</p><p>保持数据的完整性</p><h5 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h5><p>1.显示每个雇员的年工资(基础工资加奖金)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> sal<span class="token operator">*</span><span class="token number">13</span><span class="token operator">+</span>isnull<span class="token punctuation">(</span>comm<span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp</code></pre><p>2.显示所有员工中的最低工资和该员工的名字</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span></code></pre><h5 id="表的复杂查询"><a href="#表的复杂查询" class="headerlink" title="表的复杂查询"></a>表的复杂查询</h5><h6 id="1-Group-by-和having-语句"><a href="#1-Group-by-和having-语句" class="headerlink" title="1.Group by 和having 语句"></a><strong>1.Group by 和having 语句</strong></h6><p>Group by对查询结果进行分组统计</p><p>Having用于     限制分组产生的结果</p><p>例：</p><p>显示每个部门的平均工资和最高工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno</code></pre><p>显示每种部门每种岗位的平均工资和最低工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">,</span>job <span class="token keyword">order</span> <span class="token keyword">by</span> deptno</code></pre><p>总结：</p><p>① 如果select语句中同时包含，group by,having,order by时，那么顺序是：group by having oreder by</p><p>② 在选择列中如果有列，分组和表达式，那么这些列和表达式必须有一个出现在group by子句中，否则就会出错。</p><h6 id="2-多表查询"><a href="#2-多表查询" class="headerlink" title="2.多表查询"></a><strong>2.多表查询</strong></h6><p>查询部门名字为sales的雇员名字</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> dname<span class="token operator">=</span>’sales’<span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span>dept<span class="token punctuation">.</span>deptno</code></pre><p>(注意笛卡尔集)</p><p>显示雇员名，雇员工资及所在部门的名字，部门号</p><p>如果两张表有相同的字段名，则需要带表名（别名）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>dname<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span>emp<span class="token punctuation">.</span>deptno<span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> dept<span class="token punctuation">.</span>deptno<span class="token operator">=</span>emp<span class="token punctuation">.</span>deptno</code></pre><p>或</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>dname<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>deptno</code></pre><p>显示部门号为10的部门名，员工名和工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> dept<span class="token punctuation">.</span>dname<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>sal <span class="token keyword">from</span> dept<span class="token punctuation">,</span>emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span>dept<span class="token punctuation">.</span>deptno</code></pre><h6 id="3-自连接"><a href="#3-自连接" class="headerlink" title="3.自连接"></a><strong>3.自连接</strong></h6><p>指的是在同一张表中的连接查询</p><p>例：</p><p>显示每个员工和他上级的名字</p><p>把emp看作两张表，一个是a,一个是b</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token number">a</span><span class="token punctuation">.</span>ename 雇员<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>ename 老板<span class="token keyword">from</span> emp <span class="token number">a</span><span class="token punctuation">,</span>emp <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>mgr<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>empno</code></pre><h6 id="4-子查询"><a href="#4-子查询" class="headerlink" title="4.子查询"></a><strong>4.子查询</strong></h6><p>指的是嵌入在其他sql语句中的select语句</p><p>1）子查询的分类：</p><p>独立子查询</p><p>子查询可以独立运行</p><p>相关子查询</p><p>子查询引用了父查询的结果</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> stuno<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> stuno <span class="token keyword">from</span> result <span class="token keyword">where</span> stuno<span class="token operator">=</span>stu<span class="token punctuation">.</span>stuno<span class="token punctuation">)</span></code></pre><p>作为结果集(查询7班的男生信息)，一定要为结果集<strong>起个别名</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> classid<span class="token operator">=</span>’<span class="token number">7</span>’<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> classid<span class="token operator">=</span>’<span class="token number">7</span>’<span class="token punctuation">)</span> <span class="token keyword">as</span> tmp <span class="token keyword">where</span> sex<span class="token operator">=</span>’男’</code></pre><p>2）单行子查询</p><p>只返回一行数据的子查询语句</p><p>3）多行查询</p><p>返回多行数据的查询</p><p>例：显示与SMITH同一部门的所有员工</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename<span class="token operator">=</span>’smith’<span class="token punctuation">)</span></code></pre><p>查询和部门10工作相同的雇员名字，岗位，工资，部门号</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>在from子句中使用子查询</p><p>如何显示高于部门平均工资的员工信息</p><p>首先求出各个部门的平均工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> 平均工资<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><p>把查询结果当作一个临时表看待</p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> myavg<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">)</span> tmp</code></pre><p>最终结果</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> myavg<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">)</span> tmp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno<span class="token operator">=</span>tmp<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>sal<span class="token operator">></span>tmp<span class="token punctuation">.</span>myavg</code></pre><p>查询最近一次office考试的最高分和最低分</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span> 最高分<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span> <span class="token keyword">as</span> 最低分<span class="token keyword">from</span> stu <span class="token keyword">where</span> subjectid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectid <span class="token keyword">from</span> subject <span class="token keyword">where</span> subject<span class="token operator">=</span>’office’<span class="token punctuation">)</span> <span class="token operator">and</span> examdate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>examdate<span class="token punctuation">)</span> <span class="token keyword">from</span> result <span class="token keyword">where</span> subjectid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectid <span class="token keyword">from</span> subject <span class="token keyword">where</span> subject<span class="token operator">=</span>’office’<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="5-分页查询"><a href="#5-分页查询" class="headerlink" title="5. 分页查询"></a><strong>5.</strong> <strong>分页查询</strong></h6><p>1)不用分页函数</p><p>字段 ename deptno sal hiredate</p><p>显示第一个到第四个的入职的雇员</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> hiredate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--top后的数表示要选择几条记录</span></code></pre><p>显示第四个到第9个入职的职员信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> ename <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> hiredate<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> hiredate<span class="token punctuation">;</span></code></pre><p>用查询结果创建新表（不存在）</p><p>Select *（可选字段名） into 新表名 from 表名</p><p>如何删除一张表的重复记录</p><p>tid    tname    tpasswd</p><p>1        aaa         123</p><p>1        aaa         123</p><p>1        aaa         123</p><p>2        bbb        456</p><p>2        bbb        456</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token keyword">into</span> emp <span class="token keyword">from</span>  test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建一个临时表</span><span class="token keyword">delete</span> <span class="token keyword">from</span> test <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--删除原表的所有数据 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> test <span class="token keyword">select</span> <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--将临时表的数据插入原表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">temp</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--删除临时表</span></code></pre><p>2）使用分页函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> tid<span class="token punctuation">)</span> id<span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> stu<span class="token punctuation">)</span> tmp <span class="token keyword">where</span> id <span class="token operator">>=</span><span class="token number">5</span> <span class="token operator">and</span> id<span class="token operator">&lt;=</span><span class="token number">8</span></code></pre><p>注意：如果使用生成行号的子查询作为结果集，那么必须为结果集添加别名，并且为行号添加名称</p><p>ROW_NUMBER() over(排序字段)：根据指定的字段排序，对排序之后的每一行添加一个不间断的行号</p><h6 id="6-维护数据的完整性"><a href="#6-维护数据的完整性" class="headerlink" title="6.维护数据的完整性"></a>6.维护数据的完整性</h6><p>Not null</p><p>Unique 当定义了唯一约束后，该值不能重复，可以空但是最多只能有一个</p><p>Primary key</p><p>一张表只能有一个主键，但是可以有多个unique约束</p><p>复合主键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test3<span class="token punctuation">(</span>tid <span class="token keyword">int</span><span class="token punctuation">,</span>tname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tpasswd nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>tid<span class="token punctuation">,</span>tname<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Foreign key(外键)</p><p>定义主表和从表之间的关系，外键的约束要定义在从表上，主表必须有主键约束或者unique约束</p><p>Check 强制数据必须满足的条件</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test4<span class="token punctuation">(</span>tid <span class="token keyword">int</span><span class="token punctuation">,</span>tname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tpasswd nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tage <span class="token keyword">int</span> <span class="token keyword">check</span><span class="token punctuation">(</span>tage<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> tage<span class="token operator">&lt;=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>商品售货系统表设计案例</p><img src="http://116.62.203.42/img/8.jpg" alt="img" style="zoom:80%;"> <pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> goods<span class="token punctuation">(</span>goodsid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>goodsname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>unitprice <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>unitprice<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>category nvarchar<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>category <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'食物'</span><span class="token punctuation">,</span><span class="token string">'日用'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>provider nvarchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> customer<span class="token punctuation">(</span>customerid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>custname nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>custaddress nvarchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>email nvarchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>sex <span class="token keyword">nchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>sex <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>cardid nvarchar<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">table</span> purchase<span class="token punctuation">(</span>customerid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> customer<span class="token punctuation">(</span>customerid<span class="token punctuation">)</span><span class="token punctuation">,</span>goodsid nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> goods<span class="token punctuation">(</span>goodsid<span class="token punctuation">)</span><span class="token punctuation">,</span>nums <span class="token keyword">int</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>nums<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a><strong>case 语句</strong></h5><p>1)如果case后面跟表达式或字段，那么这种结构只能做等值判断，不能判断null值</p><p>case 表达式/字段</p><p> when 值then 自定义值</p><p>else 自定义值</p><p>end</p><p>2) 如果case后面没有接表达式或值，那么这种结构相当于if…else</p><p>,它可以判断null值</p><p>case </p><p> when 值then 自定义值</p><p>else 自定义值</p><p>end</p><h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a><strong>视图</strong></h5><h6 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h6><p>视图就是一张虚拟表，根据用户的查询创建的命令，使用视图就像使用表一样</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vw_getinfo<span class="token keyword">create</span> <span class="token keyword">view</span> view_emp <span class="token keyword">as</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>hiredate<span class="token punctuation">,</span>sal<span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> view_emp<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">view</span> view_emp<span class="token punctuation">;</span></code></pre><h6 id="使用代码创建视图"><a href="#使用代码创建视图" class="headerlink" title="使用代码创建视图"></a>使用代码创建视图</h6><p>–create view vw_视图名称</p><p>–as </p><p>–查询的命令</p><p>–go</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> ls<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'vw_stuinfo'</span><span class="token punctuation">)</span> <span class="token keyword">drop</span> <span class="token keyword">view</span> vw_stuinfogo<span class="token keyword">create</span> <span class="token keyword">view</span> vw_stuinfo <span class="token comment" spellcheck="true">--这个创建语句必须是批处理的第一句</span><span class="token keyword">as</span>​    <span class="token comment" spellcheck="true">--select * from stu where 性别='男'</span>​    <span class="token comment" spellcheck="true">--update stu 不能在视图中使用update,delete,insert</span>​    <span class="token comment" spellcheck="true">--视图中只能使用一条select命令</span>​    <span class="token comment" spellcheck="true">--视图不能使用order by，除非同时使用了top</span>​    <span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">99.9999</span> <span class="token keyword">percent</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> 姓名go</code></pre><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>–对视图一般不去执行增加删除和修改的操作，需要注意的是，</p><p>–这些操作会直接影响原始的物理表,d但是这些操作局限于单表</p><p>–使用视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vw_stuinfo<span class="token keyword">update</span> vw_stuinfo <span class="token keyword">set</span> java<span class="token operator">=</span>java<span class="token number">-100</span> <span class="token keyword">where</span> 性别<span class="token operator">=</span><span class="token string">'男'</span></code></pre><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a><strong>局部变量</strong></h5><h6 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h6><p>–语法</p><p>–declare @变量的名字 变量的类型=[默认值]</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'zzy'</span><span class="token keyword">print</span> <span class="token variable">@name</span><span class="token operator">+</span><span class="token string">'1346'</span><span class="token keyword">select</span> <span class="token variable">@name</span>go</code></pre><h6 id="赋值-set-select"><a href="#赋值-set-select" class="headerlink" title="赋值 set  select"></a>赋值 set  select</h6><p>–如果后面是完整的子查询，那么两个没有任何的区别</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">'3radsaf'</span><span class="token keyword">select</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">'456789'</span></code></pre><p>–查询比学号44的年龄大的学生信息</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@obj</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@obj</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> 年龄 <span class="token keyword">from</span> stu <span class="token keyword">where</span> <span class="token keyword">right</span><span class="token punctuation">(</span>cast<span class="token punctuation">(</span> cast <span class="token punctuation">(</span>学号 <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'44'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--set @obj=(select 年龄 from stu where right(cast( cast (学号 as decimal(11,0) )as varchar(11) ),2)='44')</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> 年龄<span class="token operator">></span><span class="token variable">@obj</span></code></pre><h6 id="两种赋值方式的区别"><a href="#两种赋值方式的区别" class="headerlink" title="两种赋值方式的区别"></a>两种赋值方式的区别</h6><p>–1. </p><p>–set一次只能为一个变量赋值,select支持一次为多个变量</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@age</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token variable">@age</span><span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true">--set @name='111',@age=20</span></code></pre><p>–2.</p><p>–如果=后是不完整的sql语句，那么当语句返回多行一列的时候,select会得到最后一个值</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@age</span> <span class="token keyword">int</span><span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true">--当没有用 EXISTS 引入子查询时，在选择列表中只能指定一个表达式。</span><span class="token comment" spellcheck="true">--子查询返回的值不止一个。当子查询跟随在 =、!=、&lt;、&lt;=、>、>= 之后，或子查询用作表达式时，这种情况是不允许的。 </span><span class="token comment" spellcheck="true">--set @name =(select 姓名 from stu)</span><span class="token comment" spellcheck="true">--set @name = 姓名 from stu  set后只能接独立子查询</span><span class="token keyword">select</span> <span class="token variable">@name</span> <span class="token operator">=</span> 姓名 <span class="token keyword">from</span> stu<span class="token keyword">print</span> <span class="token variable">@name</span> <span class="token comment" spellcheck="true">--最后一个名字</span></code></pre><p>–如果=后边的查询语句没有返回值，那么select会保留默认值</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@name</span> nvarchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'safaf'</span><span class="token punctuation">,</span><span class="token variable">@age</span> <span class="token keyword">int</span><span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true">--set @name=(select 姓名 from stu where right(cast( cast (学号 as decimal(11,0) )as varchar(11) ),2)='88')</span><span class="token comment" spellcheck="true">--等价于select @name=(select 姓名 from stu where right(cast( cast (学号 as decimal(11,0) )as varchar(11) ),2)='88')</span><span class="token keyword">select</span> <span class="token variable">@name</span><span class="token operator">=</span>姓名 <span class="token keyword">from</span> stu <span class="token keyword">where</span> <span class="token keyword">right</span><span class="token punctuation">(</span>cast<span class="token punctuation">(</span> cast <span class="token punctuation">(</span>学号 <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'88'</span><span class="token keyword">print</span> <span class="token variable">@name</span><span class="token keyword">print</span> <span class="token string">'13214'</span></code></pre><h6 id="变量使用案例"><a href="#变量使用案例" class="headerlink" title="变量使用案例"></a>变量使用案例</h6><p>–查询最近一次office考试的最高分和最低分</p><pre class=" language-sql"><code class="language-sql">go <span class="token keyword">declare</span> <span class="token variable">@subName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'office'</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@subId</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">--科目id</span><span class="token keyword">set</span> <span class="token variable">@subId</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subId <span class="token keyword">from</span> subject <span class="token keyword">where</span> subName<span class="token operator">=</span><span class="token variable">@subName</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--获取科目id</span><span class="token keyword">declare</span> <span class="token variable">@time</span> <span class="token keyword">datetime</span><span class="token comment" spellcheck="true">--最近一次考试时间</span><span class="token keyword">select</span> <span class="token variable">@time</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>examDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subId<span class="token operator">=</span><span class="token variable">@subId</span> <span class="token comment" spellcheck="true">--获得这一科目最近考试时间</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>stuResult<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subId<span class="token operator">=</span><span class="token variable">@subId</span> <span class="token operator">and</span> examDate<span class="token operator">=</span><span class="token variable">@time</span></code></pre><h5 id="全局变量（系统变量）"><a href="#全局变量（系统变量）" class="headerlink" title="全局变量（系统变量）"></a><strong>全局变量（系统变量）</strong></h5><p>全局变量必须以标记@@作为前缀，如</p><p>@@version</p><p>全局变量由系统定义和维护，我们只能读取，不能修改全局变量的值</p><h5 id="IF-ELSE"><a href="#IF-ELSE" class="headerlink" title="IF ELSE"></a><strong>IF ELSE</strong></h5><p>–没有bool值，只有条件表达式</p><p>–没有{}，只有begin..end</p><p>–可以多重，可以嵌套</p><p>–如果包含的语句只有一句，可以不使用begin…end </p><p>–if或else必须有处理语句，否则会报错</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span> ​    <span class="token keyword">print</span> <span class="token string">'2313'</span>​    <span class="token keyword">print</span> <span class="token string">'5846'</span>​    <span class="token keyword">end</span></code></pre><p>–计算java成绩的平均成绩，如果平均分超过60分输出前三名的成绩。否则输出后三名的成绩</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@avg</span> <span class="token keyword">float</span><span class="token keyword">set</span> <span class="token variable">@avg</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>java<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token variable">@avg</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">@avg</span><span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​    <span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> java <span class="token keyword">desc</span>​    <span class="token keyword">end</span><span class="token keyword">else</span>​    <span class="token keyword">begin</span>​    <span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token operator">*</span>  <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> java​    <span class="token keyword">end</span></code></pre><img src="http://116.62.203.42/img/10.png" alt="img" style="zoom:80%;"> <h5 id="while"><a href="#while" class="headerlink" title="while"></a><strong>while</strong></h5><p>–没有bool值，只有条件表达式</p><p>–没有{}，只有begin..end</p><p>–可以多重，可以嵌套</p><p>–可以使用continue/break语句</p><p>如果java考试布局个的人数超过了半数，题目出难了，就让每个同学的分数加2分，直到不及格的人数少于一半</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@nopassnum</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@totalnum</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@totalnum</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">set</span> <span class="token variable">@nopassnum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> java <span class="token operator">&lt;</span><span class="token number">60</span> <span class="token operator">and</span> java<span class="token operator">&lt;</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">@nopassnum</span><span class="token operator">>=</span><span class="token variable">@totalnum</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​    <span class="token keyword">update</span> stu <span class="token keyword">set</span> java<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span> ​    <span class="token keyword">set</span> <span class="token variable">@nopassnum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> java <span class="token operator">&lt;</span><span class="token number">60</span> <span class="token operator">and</span> java<span class="token operator">&lt;</span><span class="token number">98</span><span class="token punctuation">)</span>​    <span class="token keyword">end</span></code></pre><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a><strong>事务</strong></h5><p>事务：这些语句要么都成功执行，要么都不执行。事务只是一种处理机制</p><p>–事务是对有可能对表的数据进行更改的操作而言（增加，删除，修改），对查询没用</p><p>–事务的特点：CUID</p><p>–1.原子性：事务不可以再分，事务时原子工作单元，对于其数据的修改，要么全部执行，要不全部不执行</p><p>–2.一致性：事务处理后，数据要保持某种程度的一致性</p><p>–3.隔离性：每一个事务都是独立的，不受其他事务的影响</p><p>–4.持久性：事务一旦提交，对数据的修改永久保留</p><p>name        salary</p><p>aa                1000</p><p>bb                1000</p><p>–使用事务进行转账</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> bank <span class="token keyword">add</span> <span class="token keyword">constraint</span> bank_salary <span class="token keyword">check</span><span class="token punctuation">(</span>salary <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--添加约束，salary必须>0 </span><span class="token keyword">declare</span> <span class="token variable">@err</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">0</span><span class="token keyword">begin</span> <span class="token keyword">transaction</span>​    <span class="token keyword">update</span> bank <span class="token keyword">set</span> salary<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'aa'</span>​    <span class="token keyword">set</span> <span class="token variable">@err</span><span class="token operator">+</span><span class="token operator">=</span>@<span class="token variable">@ERROR</span> <span class="token comment" spellcheck="true">--累加此行的错误号</span>​    <span class="token comment" spellcheck="true">--if(@err&lt;>0)--有错误,</span>​    <span class="token comment" spellcheck="true">--    rollback transaction--不能某一句出现错误，就进行回滚或者提交</span>​    <span class="token keyword">update</span> bank <span class="token keyword">set</span> salary<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'bb'</span>​    <span class="token keyword">set</span> <span class="token variable">@err</span><span class="token operator">+</span><span class="token operator">=</span>@<span class="token variable">@ERROR</span>​    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">@err</span><span class="token operator">&lt;></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--有错误,只有全部语句执行完之后，在进行判断</span>​        <span class="token keyword">rollback</span> <span class="token keyword">transaction</span>​    <span class="token keyword">else</span>​        <span class="token keyword">commit</span> <span class="token keyword">transaction</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bank</code></pre><p><strong>COMMIT：</strong>提交更改；</p><p><strong>ROLLBACK：</strong>回滚更改；</p><p><strong>SAVEPOINT：</strong>在事务内部创建一系列可以 ROLLBACK 的还原点；</p><p>SAVEPOINT 是事务中的一个状态点，使得我们可以将事务回滚至特定的点，而不是将整个事务都撤销。</p><p>savepoint</p><p>SAVEPOINT SAVEPOINT_NAME;</p><p>ROLLBACK TO SAVEPOINT_NAME;</p><h5 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a><strong>存储过程</strong></h5><h6 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h6><p>存储过程–就像数据库中运行方法（函数）</p><p>–方法说明：</p><p>–方法名称：参数 调用 返回值</p><p>–参数：主要是一一对应的原则</p><p>–    1.类型对应：子类可以替换父类 int–double</p><p>–    2.数量对应：默认值，可变参数</p><p>–    3.顺序对应：可以使用 参数：值的方法调用</p><p>–返回值：通过return 返回值 ，但是只能返回单个值</p><p>–可以通过ref/out扩展方法的’返回值’</p><p>–创建存储过程的语法</p><p>–go</p><p>–create procedure usp_存储过程名称</p><p>–(形参) 可以在这个里面定义参数</p><p>–as–相当于方法体</p><p>–{</p><p>–    自定义局部变量</p><p>–    逻辑语句</p><p>–}</p><p>–go</p><h6 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h6><p>–.查询所有学生信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getAllInfo'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">procedure</span> usp_getAllInfo<span class="token operator">*</span><span class="token operator">*</span>go<span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> usp_getAllInfo <span class="token comment" spellcheck="true">--简写proc</span><span class="token keyword">as</span> ​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token operator">*</span><span class="token operator">*</span>go<span class="token operator">*</span><span class="token operator">*</span><span class="token comment" spellcheck="true">--调用存储过程，获取学生信息</span><span class="token keyword">execute</span>  usp_getAllInfo         <span class="token comment" spellcheck="true">--简写exec</span></code></pre><h6 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h6><p>查询指定性别的学生信息</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getAllInfoBySex'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getAllInfoBySexgo<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getAllInfoBySex​    <span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--形参只是声明，不是定义，所以不需要declare</span><span class="token keyword">as</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span>go<span class="token keyword">exec</span> usp_getAllInfoBySex <span class="token string">'男'</span><span class="token comment" spellcheck="true">--相当于'男孩'</span></code></pre><h6 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h6><p>获取指定性别和班级名称的学生信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'usp_getAllInfoBySexAndClassName'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassNamego<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassName<span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@className</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">as</span>    ​    <span class="token keyword">declare</span> <span class="token variable">@classId</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">--科目ID</span>​    <span class="token keyword">set</span> <span class="token variable">@classId</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> grade <span class="token keyword">where</span> className<span class="token operator">=</span><span class="token variable">@className</span><span class="token punctuation">)</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span> <span class="token operator">and</span> classId<span class="token operator">=</span><span class="token variable">@classId</span>go<span class="token keyword">exec</span> usp_getAllInfoBySexAndClassName <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'三班'</span></code></pre><h6 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a><strong>默认参数</strong></h6><p>–创建有默认值的存储过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'usp_getAllInfoBySexAndClassName'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassNamego<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getAllInfoBySexAndClassName<span class="token variable">@className</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'女'</span>  <span class="token comment" spellcheck="true">--往往会将有默认值的参数写在所有参数列表的最后，这样实参列表就可以省略default</span><span class="token keyword">as</span>    ​    <span class="token keyword">declare</span> <span class="token variable">@classId</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">--科目ID</span>​    <span class="token keyword">set</span> <span class="token variable">@classId</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> grade <span class="token keyword">where</span> className<span class="token operator">=</span><span class="token variable">@className</span><span class="token punctuation">)</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span> <span class="token operator">and</span> classId<span class="token operator">=</span><span class="token variable">@classId</span>go<span class="token comment" spellcheck="true">--参数传递顺序一致：第一个实参默认就是传递给第一个形参 </span><span class="token comment" spellcheck="true">--如果有默认值，那么可以使用default</span><span class="token keyword">exec</span> usp_getAllInfoBySexAndClassName <span class="token keyword">default</span><span class="token punctuation">,</span><span class="token string">'三班'</span><span class="token comment" spellcheck="true">--也可以使用 参数=值的方式调用存储过程，这样就与顺序没有关系了，</span><span class="token comment" spellcheck="true">--一旦使用了@name=value 之后，那么后续的参数就必须以@name=value的形式传递</span><span class="token comment" spellcheck="true">--exec usp_getAllInfoBySexAndClassName @className='三班',@sex='男'</span></code></pre><h6 id="创建带有输出参数的存储过程"><a href="#创建带有输出参数的存储过程" class="headerlink" title="创建带有输出参数的存储过程"></a><strong>创建带有输出参数的存储过程</strong></h6><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--根据性别和班级查询学员，同时返回总人数和指定性别的人数</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getInfoAndCount'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getInfoAndCountgo<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getInfoAndCount<span class="token variable">@totalnum</span> <span class="token keyword">int</span> output<span class="token punctuation">,</span><span class="token comment" spellcheck="true">--如果一个参数添加了output修饰，那么说明:它是一个输出参数,</span><span class="token comment" spellcheck="true">--说明了你会向服务器请求返回这个参数的值,服务器也知道标识了output的参数在以后需要返回</span><span class="token variable">@clanum</span> <span class="token keyword">int</span> output <span class="token punctuation">,</span><span class="token comment" spellcheck="true">--指定班级和性别的人数</span><span class="token variable">@className</span> nvarchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">--输入参数:需要用户传入值</span><span class="token variable">@sex</span> char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span>​    <span class="token keyword">declare</span> <span class="token variable">@classId</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> classId <span class="token keyword">from</span> grade <span class="token keyword">where</span> className<span class="token operator">=</span><span class="token variable">@className</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--根据班级名称获取班级ID</span>​    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> classId<span class="token operator">=</span><span class="token variable">@classId</span> <span class="token operator">and</span> sex<span class="token operator">=</span><span class="token variable">@sex</span>​    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Student <span class="token comment" spellcheck="true">--总人数</span>​    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token variable">@sex</span> <span class="token operator">and</span> classId<span class="token operator">=</span><span class="token variable">@classId</span>go</code></pre><h6 id="调用有输出参数的存储过程"><a href="#调用有输出参数的存储过程" class="headerlink" title="调用有输出参数的存储过程"></a>调用有输出参数的存储过程</h6><p>–服务器返回值，需要创建对应的变量来接收</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@tnum</span> <span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token variable">@cnum</span> <span class="token keyword">int</span> <span class="token keyword">execute</span> usp_getInfoAndCount <span class="token variable">@tnum</span><span class="token punctuation">,</span><span class="token variable">@cnum</span><span class="token punctuation">,</span><span class="token string">'三班'</span><span class="token keyword">print</span> <span class="token variable">@tnum</span><span class="token keyword">print</span> <span class="token variable">@cnum</span></code></pre><h6 id="使用output的情况："><a href="#使用output的情况：" class="headerlink" title="使用output的情况："></a><strong>使用output的情况：</strong></h6><p><strong>1.返回多个值 2.返回的数据类型为非整型</strong></p><p><strong>（return 只能返回整型）</strong>–返回指定人数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'usp_getNameByNo'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">proc</span> usp_getNameByNogo<span class="token keyword">create</span> <span class="token keyword">proc</span> usp_getNameByNo<span class="token variable">@cid</span> <span class="token keyword">int</span><span class="token keyword">as</span> ​    <span class="token keyword">declare</span> <span class="token variable">@cnt</span> <span class="token keyword">int</span>  ​    <span class="token keyword">set</span> <span class="token variable">@cnt</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> classId<span class="token operator">=</span> <span class="token variable">@cid</span><span class="token punctuation">)</span>​    <span class="token comment" spellcheck="true">--return 只能返回整数值</span>​    <span class="token keyword">return</span> <span class="token variable">@cnt</span>go<span class="token comment" spellcheck="true">--执行存储过程，接收return的返回值</span><span class="token keyword">declare</span> <span class="token variable">@count</span> <span class="token keyword">int</span> <span class="token keyword">execute</span> <span class="token variable">@count</span><span class="token operator">=</span> usp_getNameByNo <span class="token number">6</span><span class="token keyword">print</span> <span class="token variable">@count</span></code></pre><h5 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a><strong>触发器</strong></h5><p>–语法:</p><p>–create trigger tr_触发器名称</p><p>–on 表 after(for)/instead of 增加删除(delete) 修改</p><p>–as</p><p>–任意的逻辑代码 –存储过程</p><p>–go</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'tr_emp_insert'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">trigger</span> tr_emp_insertgo <span class="token keyword">create</span> <span class="token keyword">trigger</span> tr_emp_insert<span class="token keyword">on</span> emp <span class="token keyword">for</span> <span class="token keyword">insert</span> <span class="token comment" spellcheck="true">--为emp表创建触发器，在你对grade表进行插入操作后触发</span><span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> empgo<span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>ename<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted <span class="token comment" spellcheck="true">--操作之后，新表(操作过后的表)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> deleted <span class="token comment" spellcheck="true">--操作之前，旧表（操作前的表）</span></code></pre><p>–两个临时表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'tr_emp_insert'</span><span class="token punctuation">)</span>​    <span class="token keyword">drop</span> <span class="token keyword">trigger</span> tr_emp_insertgo<span class="token keyword">create</span> <span class="token keyword">trigger</span> tr_emp_insert<span class="token keyword">on</span> emp <span class="token keyword">for</span> <span class="token keyword">insert</span> <span class="token keyword">as</span><span class="token keyword">print</span> <span class="token string">'inserted表存储操作之后的 与当前操作相关的数据 ，而与之前表的数据无关'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted<span class="token keyword">print</span> <span class="token string">'deleted表存储操作之前的数据'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> deletedgo<span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>ename<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span>emp表<span class="token keyword">create</span> <span class="token keyword">trigger</span> StuIDU <span class="token keyword">on</span> emp<span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token punctuation">,</span><span class="token keyword">update</span><span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@insertnum</span> <span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token variable">@deletenum</span> <span class="token keyword">int</span><span class="token keyword">set</span> <span class="token variable">@insertnum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> inserted<span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token variable">@deletenum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> deleted<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token variable">@insertnum</span> <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span>  <span class="token variable">@deletenum</span><span class="token operator">></span><span class="token number">0</span>​    <span class="token keyword">print</span> cast<span class="token punctuation">(</span><span class="token variable">@insertnum</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被更新'</span><span class="token keyword">else</span>​    <span class="token keyword">if</span> <span class="token variable">@insertnum</span> <span class="token operator">></span><span class="token number">0</span>​        <span class="token keyword">print</span> cast<span class="token punctuation">(</span><span class="token variable">@insertnum</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被插入'</span>​    <span class="token keyword">else</span> ​        <span class="token keyword">print</span> cast<span class="token punctuation">(</span><span class="token variable">@deletenum</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'条记录被删除'</span>    go</code></pre><h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a><strong>练习：</strong></h5><p>1)–查询图书的信息，要求图书的价格显示为：</p><p>–价格为null :显示为价格未知</p><p>–价格为10-20：显示为价格10-20</p><p>–价格为20-50：显示为价格适中</p><p>–其他：原样显示</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> bookid<span class="token punctuation">,</span>bookname<span class="token punctuation">,</span><span class="token keyword">case</span> <span class="token keyword">when</span> price <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token string">'价格未知'</span><span class="token keyword">when</span> price <span class="token operator">&lt;</span><span class="token number">20</span> <span class="token operator">and</span> price <span class="token operator">>=</span><span class="token number">10</span> <span class="token keyword">then</span> <span class="token string">'价格在10-20之间'</span><span class="token keyword">when</span> price <span class="token operator">&lt;</span><span class="token number">30</span> <span class="token operator">and</span> price <span class="token operator">>=</span><span class="token number">20</span> <span class="token keyword">then</span> <span class="token string">'价格适中'</span> <span class="token keyword">else</span> <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token keyword">end</span> <span class="token keyword">as</span> 价格 <span class="token keyword">from</span> book</code></pre><p>2)</p><p>子查询：一个查询中还包含着另外n个查询</p><p>分类：独立子查询（直接运行子查询语句）相关子查询（子查询中引用了父查询的结果）</p><p>使用方法:1.子查询作为条件：如果跟在&gt; &lt; &gt;= &lt;= …后面要保证子查询只返回了一个值</p><p>A.如果子查询返回了一行多列值，可以使用exists/not exists，否则报错</p><p>B.如果返回了多行一列值，可以使用in /not in</p><p>2.子查询可以作为结果集</p><p>A.如果需要用到子查询中的字段，必须保证字段有名字（需要添加新的列名）</p><p>B.子查询做结果集必须命名</p><p>3.子查询作为列的值</p><p>–查询学号是19的学生参加最近一次office课程考试的成绩,要求输出学生的姓名，成绩</p><p>–1.子查询</p><p>–2.如果没有相应的数据，则可以更改数据表中的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Student<span class="token punctuation">.</span>studentName<span class="token punctuation">,</span>Result<span class="token punctuation">.</span>studentResult <span class="token keyword">from</span> Student <span class="token keyword">inner</span> <span class="token keyword">join</span> Result <span class="token keyword">on</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span>Result<span class="token punctuation">.</span>studentNo <span class="token keyword">where</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span><span class="token number">19</span> <span class="token operator">and</span> ExamDate<span class="token operator">=</span><span class="token punctuation">(</span>​    <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>ExamDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token punctuation">(</span>​        <span class="token keyword">select</span> subjectId <span class="token keyword">from</span> Subject <span class="token keyword">where</span> SubjectName<span class="token operator">=</span><span class="token string">'office'</span> <span class="token punctuation">)</span> <span class="token operator">and</span> studentNo<span class="token operator">=</span><span class="token number">19</span>​    <span class="token punctuation">)</span><span class="token operator">and</span> subjectId<span class="token operator">=</span><span class="token punctuation">(</span>​    <span class="token keyword">select</span> subjectId <span class="token keyword">from</span> Subject <span class="token keyword">where</span> SubjectName<span class="token operator">=</span><span class="token string">'office'</span>​    <span class="token punctuation">)</span></code></pre><p>–使用变量</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@subjectName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'office'</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@subjectId</span> <span class="token keyword">int</span> <span class="token keyword">set</span> <span class="token variable">@subjectId</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectId <span class="token keyword">from</span> subject <span class="token keyword">where</span> subjectName<span class="token operator">=</span><span class="token variable">@subjectName</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@time</span> <span class="token keyword">datetime</span><span class="token comment" spellcheck="true">--考试日期</span><span class="token keyword">select</span> <span class="token variable">@time</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>examDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span> <span class="token operator">and</span> studentNo<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token keyword">select</span> Student<span class="token punctuation">.</span>studentName<span class="token punctuation">,</span>Result<span class="token punctuation">.</span>studentResult <span class="token keyword">from</span> Student <span class="token keyword">inner</span> <span class="token keyword">join</span> Result <span class="token keyword">on</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span>Result<span class="token punctuation">.</span>studentNo <span class="token keyword">where</span> Student<span class="token punctuation">.</span>studentNo<span class="token operator">=</span><span class="token number">19</span> <span class="token operator">and</span> ExamDate<span class="token operator">=</span><span class="token variable">@time</span> <span class="token operator">and</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span></code></pre><p>3）检查学生office最近一次考试的成绩是否有不及格，如有，没人加2分，高于95的学生不加分，直至所有学生及格</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@subjectName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'office'</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@subjectId</span> <span class="token keyword">int</span> <span class="token keyword">set</span> <span class="token variable">@subjectId</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> subjectId <span class="token keyword">from</span> subject <span class="token keyword">where</span> subjectName<span class="token operator">=</span><span class="token variable">@subjectName</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--科目名称</span><span class="token keyword">declare</span> <span class="token variable">@time</span> <span class="token keyword">datetime</span><span class="token comment" spellcheck="true">--考试日期</span><span class="token keyword">select</span> <span class="token variable">@time</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>examDate<span class="token punctuation">)</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​        <span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Result <span class="token keyword">where</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span> <span class="token operator">and</span> examDate<span class="token operator">=</span><span class="token variable">@time</span> <span class="token operator">and</span> studentResult<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span>​        <span class="token keyword">begin</span>​            <span class="token keyword">update</span> Result <span class="token keyword">set</span>  studentResult<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">where</span> studentResult<span class="token operator">&lt;=</span><span class="token number">95</span> <span class="token operator">and</span> subjectId<span class="token operator">=</span><span class="token variable">@subjectId</span> <span class="token operator">and</span> examDate<span class="token operator">=</span><span class="token variable">@time</span>​        <span class="token keyword">end</span>​        <span class="token keyword">else</span> ​            <span class="token keyword">break</span><span class="token punctuation">;</span>​    <span class="token keyword">end</span></code></pre><p>4）打印图案</p><p>–★</p><p>–★★</p><p>–★★★</p><p>–★★★★</p><p>–★★★★★</p><pre class=" language-sql"><code class="language-sql">go<span class="token keyword">declare</span> <span class="token variable">@rownum</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">declare</span> <span class="token variable">@colnum</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">declare</span> <span class="token variable">@graph</span> nvarchar<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'★'</span><span class="token comment" spellcheck="true">--set @graph+='★★★'</span><span class="token comment" spellcheck="true">--print @graph</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">@rownum</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>​    <span class="token keyword">begin</span>​        <span class="token comment" spellcheck="true">--set @colnum=1</span>​        <span class="token comment" spellcheck="true">--set @graph=''</span>​        <span class="token comment" spellcheck="true">--while(@colnum&lt;=@rownum)</span>​        <span class="token comment" spellcheck="true">--    begin</span>​                <span class="token comment" spellcheck="true">--set @colnum+=1</span>​        <span class="token keyword">print</span> <span class="token variable">@graph</span>​                <span class="token keyword">set</span> <span class="token variable">@graph</span><span class="token operator">+</span><span class="token operator">=</span><span class="token string">'★'</span>​            <span class="token comment" spellcheck="true">--end</span>​        <span class="token keyword">set</span> <span class="token variable">@rownum</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span> ​    <span class="token keyword">end</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> sql   </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown简介</title>
      <link href="/2019/11/01/%E7%AE%80%E5%8D%95%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/11/01/%E7%AE%80%E5%8D%95%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="文章简单介绍"><a href="#文章简单介绍" class="headerlink" title="文章简单介绍"></a>文章简单介绍</h5><h6 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h6><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h6 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h6><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> xxx<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署hexo走过的坑</title>
      <link href="/2019/08/16/%E9%83%A8%E7%BD%B2hexo%E8%B5%B0%E8%BF%87%E7%9A%84%E5%9D%91/"/>
      <url>/2019/08/16/%E9%83%A8%E7%BD%B2hexo%E8%B5%B0%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo的搭建"><a href="#hexo的搭建" class="headerlink" title="hexo的搭建"></a>hexo的搭建</h3><h4 id="提示hexo命令找不到"><a href="#提示hexo命令找不到" class="headerlink" title="提示hexo命令找不到"></a>提示hexo命令找不到</h4><ul><li><h5 id="在系统的环境变量中加入自己博客系统的hexo路径"><a href="#在系统的环境变量中加入自己博客系统的hexo路径" class="headerlink" title="在系统的环境变量中加入自己博客系统的hexo路径"></a>在系统的环境变量中加入自己博客系统的hexo路径</h5></li><li><p>比如我的：J:\hexo\node_modules.bin</p></li><li><p>hexo就是我的博客系统所在的文件夹</p></li></ul><h4 id="git命令找不到"><a href="#git命令找不到" class="headerlink" title="git命令找不到"></a>git命令找不到</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
